<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>haoran&#39;s blog</title>
  
  <subtitle>Talk is cheap. Show me the code</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://javassun.github.io/"/>
  <updated>2020-04-16T16:17:20.801Z</updated>
  <id>http://javassun.github.io/</id>
  
  <author>
    <name>Allen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java8新特性</title>
    <link href="http://javassun.github.io/2020/02/08/Java8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>http://javassun.github.io/2020/02/08/Java8%E6%96%B0%E7%89%B9%E6%80%A7/</id>
    <published>2020-02-08T04:43:25.000Z</published>
    <updated>2020-04-16T16:17:20.801Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>2014年，Oracle发布了Java8新版本后，愈来愈多的公司开始尝试使用Java8新特性来摆脱繁琐的语法，在使用Java8代码编写公司项目后，尝到了“语法糖”的妙处，由此开始了系统学习Java8的一些新特性。<br>疫情在家，闲来无事，收集整理网上各种Java8学习笔记后，汇成一篇，以便诸君参考，亦是个人Java8学习的小结。</p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li>速度更块</li><li>代码更少（Lambda表达式）</li><li>强大的Stream API</li><li>便于并行</li><li>最大化减少空指针异常 Optional</li></ul><p><font color="red">核心为：Lambda表达式与Stream API</font></p><a id="more"></a><h2 id="1-Lambda表达式"><a href="#1-Lambda表达式" class="headerlink" title="1. Lambda表达式"></a>1. Lambda表达式</h2><h3 id="1-为什么使用Lambda表达式"><a href="#1-为什么使用Lambda表达式" class="headerlink" title="1. 为什么使用Lambda表达式"></a>1. 为什么使用Lambda表达式</h3><p><strong>Lambda</strong>是一个<font color="red">匿名函数</font>，我们可以把Lambda表达式理解为是<font color="red">一段可以传递的代码</font>（将代码像数据一样传递）。可以写出更简洁、更灵活的代码。作为一种紧凑的代码风格，使Java语言的表达更加凝练。</p><ul><li>从匿名类到 Lambda 的转换</li></ul><p>例子1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;匿名内部类</span><br><span class="line">Runnable r1 &#x3D; new Runnable()&#123;</span><br><span class="line">     @Override</span><br><span class="line">     public void run()&#123;</span><br><span class="line">         System.out.println(&quot;Hello World!&quot;)</span><br><span class="line">     &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Lambda 表达式</span><br><span class="line">Runnable r1 &#x3D; () -&gt; System.out.println(&quot;Hello World!&quot;);</span><br></pre></td></tr></table></figure><p>例子2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;原来使用匿名内部类作为参数传递</span><br><span class="line">TreeSet&lt;String&gt; ts &#x3D; new TreeSet&lt;&gt;(new Comparator&lt;String&gt;()&#123;</span><br><span class="line">     @Override</span><br><span class="line">     public int compare(String o1,String o2)&#123;</span><br><span class="line">        return Integer.compare(o1.length,o2.length());</span><br><span class="line">     &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Lambda 表达式作为参数传递</span><br><span class="line">TreeSet&lt;String&gt; ts2 &#x3D; new TreeSet&lt;&gt;(</span><br><span class="line">     (o1,o2) -&gt; Integer.compare(o1.length(),o2.length())</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p> <font color="red"><strong>匿名内部类</strong></font>：冗余的语法。导致了“Height Problem”（只有一行在工作）</p><h3 id="2-Lambda表达式语法"><a href="#2-Lambda表达式语法" class="headerlink" title="2. Lambda表达式语法"></a>2. Lambda表达式语法</h3><p>Lambda 表达式在Java语言中引入了一个新的语法元素和操作符。这个操作符为 “<font color="red"> -&gt; </font>“，该操作符被称为 Lambda操作符 或 箭头操作符。它将Lambda分为两个部分：</p><p><strong>左侧：</strong>指定了 Lambda 表达式需要的所有参数<br><strong>右侧：</strong>指定了 Lambda 体，即 Lambda 表达式要执行的功能。</p><p><strong>语法格式一：无参，无返回值，Lambda只需一条语句</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Runnable r1 &#x3D; () -&gt; System.out.println(&quot;Hello Lambda&quot;);</span><br></pre></td></tr></table></figure><p><strong>语法格式二：Lambda需要一个参数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Consumer&lt;String&gt; fun &#x3D; (args) -&gt; System.out.println(args);</span><br></pre></td></tr></table></figure><p><strong>语法格式三：Lambda只需要一个参数时，参数的小括号可省略</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Consummer&lt;String&gt; fun &#x3D; args -&gt; System.out.println(args);</span><br></pre></td></tr></table></figure><p><strong>语法格式四：Lambda需要两个参数，并且有返回值</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BinaryOperator&lt;Long&gt; bo &#x3D; (x,y) -&gt;&#123;</span><br><span class="line">      System.out.println(&quot;实现函数接口方法&quot;);</span><br><span class="line">      return x + y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>语法格式五：当Lambda体只有一条语句时，return与大括号可以省略</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BinaryOperator&lt;Long&gt; bo &#x3D; (x,y) -&gt; x + y;</span><br></pre></td></tr></table></figure><p><strong>语法格式六：Long数据类型可以省略，可由编译器推断，即“类型推断”</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BinaryOperator&lt;Long&gt; bo &#x3D; (Long x,Long y) -&gt; &#123;</span><br><span class="line">         System.out.println(&quot;实现函数接口方法&quot;)；</span><br><span class="line">         x + y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Lambda</strong>是<font color="red"><strong>匿名内函数</strong></font>：提供了轻量级的语法。解决了匿名内部类带来的“高度”问题。</p><p>语法：<strong>参数列表</strong> <strong>-&gt;</strong> <strong>函数体</strong>三部分组成。<br>函数体：表达式、语句块。<br><font color="red"><strong>表达式</strong></font>：表达式会被执行然后返回执行结果。<br><font color="red"><strong>语句块</strong></font>：语句块中的语句会被依次执行，就像方法中的语句一样</p><ol><li>return语句会把控制权交给匿名函数的调用者</li><li>break和continue只能在循环中使用。</li><li>如果函数体有返回值。那么函数体内部的每一条路径都要有。</li></ol><p>表达式函数体适合小型<strong>Lambda</strong>表达式。消除了return关键字。简洁。</p><p><font color="red">新包</font>：<strong>java.util.function:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;接收 T对象 返回boolean</span><br><span class="line">Predicate&lt;T&gt; boolean test(T t)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 接收 T对象 不返回任何值</span><br><span class="line">Consumer&lt;T&gt; void accept(T t)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;接收 T对象 返回R对象</span><br><span class="line">Function(T,R) R apply(T t)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;提供 T对象（工厂T）</span><br><span class="line">Supplier&lt;T&gt; T get()</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 一元：接收T 返回T</span><br><span class="line">UnaryOperator&lt;T&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 二元：接收两个T 返回T</span><br><span class="line">BinaryOperator&lt;T&gt;</span><br></pre></td></tr></table></figure><p>一些 Lambda表达式简单例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(int x,int y)-&gt;x+y; &#x2F;&#x2F;接收 x y 返回 x与y的和</span><br><span class="line">()-&gt;45;       &#x2F;&#x2F; 不接受参数 返回45</span><br><span class="line">(String s)-&gt;&#123;System.out.println(s);&#125; &#x2F;&#x2F;接收一个字符串，并把它打印在控制台</span><br></pre></td></tr></table></figure><h3 id="3-类型推断"><a href="#3-类型推断" class="headerlink" title="3. 类型推断"></a>3. 类型推断</h3><p>Lambda表达式无需指定类型，程序依然可以编译，因为 javac 根据程序上下文，在后台推断出了参数类型。Lambda表达式的类型依赖于上下文环境，是由编译器推断出来的。即所谓的“类型推断”。</p><h2 id="2-函数式接口"><a href="#2-函数式接口" class="headerlink" title="2. 函数式接口"></a>2. 函数式接口</h2><h3 id="1-什么是函数式接口"><a href="#1-什么是函数式接口" class="headerlink" title="1. 什么是函数式接口"></a>1. 什么是函数式接口</h3><ul><li><p>只包含了一个抽象方法的接口，称为<strong>函数式接口</strong></p></li><li><p>你可以通过 Lambda 表达式来创建该接口的对象。（若 Lambda 表达式抛出一个受检异常，那么该异常需要在目标接口的抽象方法上进行声明）。</p></li><li><p>我们可以在任意函数式接口上使用 <strong>@FunctionalInterface</strong> 注解，这样做可以检查它是否是一个函数式接口，同时 javadoc 也会包含一条声明，说明这个接口是一个函数式接口。</p></li></ul><h3 id="2-自定义函数式接口"><a href="#2-自定义函数式接口" class="headerlink" title="2. 自定义函数式接口"></a>2. 自定义函数式接口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@FunctionalInterface</span><br><span class="line">public interface MyNumber&#123;</span><br><span class="line">   public double getValue();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;函数式接口中使用泛型：</span><br><span class="line">@FunctionalInterface</span><br><span class="line">public interface MyFunc&lt;T&gt;&#123;</span><br><span class="line">   public T getValue(T t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;作为参数传递 Lambda 表达式</span><br><span class="line">public String toUpperString(MyFunc&lt;String&gt; mf, String str)&#123;</span><br><span class="line">        return mf.getValue(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">       String newStr &#x3D; toUpperString(</span><br><span class="line">       (str) -&gt; str.toUpperCase(), &quot;abcdef&quot;);</span><br><span class="line">       System.out.println(newStr);</span><br></pre></td></tr></table></figure><p><font color="red">作为参数传递 Lambda 表达式：为了将 Lambda 表达式作为参数传递，接收Lambda 表达式的参数类型必须是与该 Lambda 表达式兼容的函数式接口的类型。<br></font></p><h3 id="3-Java内治四大核心函数式接口"><a href="#3-Java内治四大核心函数式接口" class="headerlink" title="3. Java内治四大核心函数式接口"></a>3. Java内治四大核心函数式接口</h3><p><img src="/2020/02/08/Java8%E6%96%B0%E7%89%B9%E6%80%A7/97801292-5716-4519-9bff-9f8f08aed48b.png" alt></p><p><img src="/2020/02/08/Java8%E6%96%B0%E7%89%B9%E6%80%A7/743ea2bc-aeda-44e0-b691-31c354b94f47.png" alt></p><h2 id="3-方法引用与构造器引用"><a href="#3-方法引用与构造器引用" class="headerlink" title="3. 方法引用与构造器引用"></a>3. 方法引用与构造器引用</h2><h3 id="1-方法引用"><a href="#1-方法引用" class="headerlink" title="1. 方法引用"></a>1. 方法引用</h3><p>当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用！<br>（实现抽象方法的参数列表，必须与方法引用方法的参数列表保持一致！）<br>方法引用：使用操作符 “::” 将方法名和对象或类的名字分隔开来。 如下三种主要使用情况：</p><ul><li><p><strong>对象::实例方法</strong></p></li><li><p><strong>类::静态方法</strong></p></li><li><p><strong>类::实例方法</strong></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">() -&gt; System.out.println(x);</span><br><span class="line">等同于</span><br><span class="line">System.out::println;</span><br><span class="line"></span><br><span class="line">BinaryOperator&lt;Double&gt; bo &#x3D; (x,y) -&gt; Math.pow(x,y);</span><br><span class="line">等同于</span><br><span class="line">BinaryOperator&lt;Double&gt; bo &#x3D;Math::pow;</span><br><span class="line"></span><br><span class="line">compare((x,y) -&gt;x.equals(y), &quot;abcdef&quot; , &quot;abcdef&quot;);</span><br><span class="line">等同于</span><br><span class="line">compare(String::equals,&quot;abc&quot;,&quot;abc&quot;);</span><br></pre></td></tr></table></figure><p><strong>注意：当需要引用方法的第一个参数是调用对象，并且第二个参数是需要引<br>用方法的第二个参数(或无参数)时：ClassName::methodName</strong></p><h3 id="2-构造器引用"><a href="#2-构造器引用" class="headerlink" title="2. 构造器引用"></a>2. 构造器引用</h3><p><strong>格式： ClassName::new</strong><br>与函数式接口相结合，自动与函数式接口中方法兼容。 可以把构造器引用赋值给定义的方法，与构造器参数 列表要与接口中抽象方法的参数列表一致！</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Function&lt;Integer,MyClass&gt; fun &#x3D; (n) -&gt; new MyClass(n);</span><br><span class="line">等同于</span><br><span class="line">Function&lt;Integer,MyClass&gt; fun &#x3D; MyClass::new;</span><br></pre></td></tr></table></figure><h3 id="3-数字引用"><a href="#3-数字引用" class="headerlink" title="3. 数字引用"></a>3. 数字引用</h3><p><strong>格式： type[] :: new</strong></p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Function&lt;Integer,Integer[]&gt; fun &#x3D; (n) -&gt; new Integer(n);</span><br><span class="line">等同于</span><br><span class="line">Function&lt;Integer,MyClass&gt; fun &#x3D; Integer[]::new;</span><br></pre></td></tr></table></figure><h2 id="4-Stream-API"><a href="#4-Stream-API" class="headerlink" title="4. Stream API"></a>4. Stream API</h2><h3 id="1-了解Stream"><a href="#1-了解Stream" class="headerlink" title="1. 了解Stream"></a>1. 了解Stream</h3><p>Java8中有两大最为重要的改变。第一个是 Lambda 表达式；另外一 个则是 <strong>Stream API(java.util.stream.*)</strong>。 Stream 是 Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。使用Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。也可以使用 Stream API 来并行执行操作。简而言之，Stream API 提供了一种高效且易于使用的处理数据的方式。</p><p>*<em>流(Stream)是数据渠道，用于操作数据源（集合、数组等）所生成的元素序列。<br>*</em><br><font color="red">“集合讲的是数据，流讲的是计算！”</font></p><ol><li>Stream 自己不会存储元素。</li><li>Stream 不会改变源对象。相反，他们会返回一个持有结果的新Stream。</li><li>Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行。</li></ol><h3 id="2-Stream三步骤"><a href="#2-Stream三步骤" class="headerlink" title="2. Stream三步骤"></a>2. Stream三步骤</h3><ul><li><p><strong>创建 Stream</strong><br>一个数据源（如：集合、数组），获取一个流</p></li><li><p><strong>中间操作</strong><br>一个中间操作链，对数据源的数据进行处理 </p></li><li><p><strong>终端操作</strong><br>一个终止操作，执行中间操作链，并产生结果<br><img src="/2020/02/08/Java8%E6%96%B0%E7%89%B9%E6%80%A7/37346492-7531-44b8-a2bf-681c14b381ec.jpg" alt></p></li></ul><h3 id="3-创建Stream"><a href="#3-创建Stream" class="headerlink" title="3. 创建Stream"></a>3. 创建Stream</h3><h4 id="1-Collection-创建流"><a href="#1-Collection-创建流" class="headerlink" title="1. Collection 创建流"></a>1. Collection 创建流</h4><ul><li><p>default Stream<E> stream() : 返回一个顺序流</E></p></li><li><p>default Stream<E> parallelStream() : 返回一个并行流</E></p></li></ul><h4 id="2-数组-创建流（Arrays的静态方法stream-创建）"><a href="#2-数组-创建流（Arrays的静态方法stream-创建）" class="headerlink" title="2. 数组 创建流（Arrays的静态方法stream()创建）"></a>2. 数组 创建流（Arrays的静态方法stream()创建）</h4><ul><li>static <T> Stream<T> stream(T[] array): 返回一个流</T></T></li></ul><p><strong>重载形式，能够处理对应基本类型的数组</strong></p><ul><li><p>public static IntStream stream(int[] array)</p></li><li><p>public static LongStream stream(long[] array)</p></li><li><p>public static DoubleStream stream(double[] array)</p></li></ul><h4 id="3-由值创建流"><a href="#3-由值创建流" class="headerlink" title="3. 由值创建流"></a>3. 由值创建流</h4><p>可以使用静态方法 Stream.of(), 通过显示值 创建一个流。它可以接收任意数量的参数。</p><ul><li>public static<T> Stream<T> of(T… values) : 返回一个流</T></T></li></ul><h4 id="4-由函数创建流：创建无限流"><a href="#4-由函数创建流：创建无限流" class="headerlink" title="4. 由函数创建流：创建无限流"></a>4. 由函数创建流：创建无限流</h4><p>可以使用静态方法 Stream.iterate() 和 Stream.generate(), 创建无限流。</p><ul><li>迭代</li></ul><p>public static<T> Stream<T> iterate(final T seed, final UnaryOperator<T> f)</T></T></T></p><ul><li>生成</li></ul><p>public static<T> Stream<T> generate(Supplier<T> s)</T></T></T></p><h3 id="4-Stream-的中间操作"><a href="#4-Stream-的中间操作" class="headerlink" title="4. Stream 的中间操作"></a>4. Stream 的中间操作</h3><p>多个中间操作可以连接起来形成一个流水线，除非流水 线上触发终止操作，否则中间操作不会执行任何的处理！ 而在终止操作时一次性全部处理，称为“惰性求值”。</p><p><strong>筛选与切片</strong><br><img src="/2020/02/08/Java8%E6%96%B0%E7%89%B9%E6%80%A7/853fb496-9885-4191-b20d-1d5c8508def5.png" alt></p><p><strong>映射</strong><br><img src="/2020/02/08/Java8%E6%96%B0%E7%89%B9%E6%80%A7/feb89458-0a81-42a9-9aa4-33b20b5991bf.png" alt></p><p><strong>排序</strong><br><img src="/2020/02/08/Java8%E6%96%B0%E7%89%B9%E6%80%A7/3a69b800-08f9-4bca-ab2d-51e3f3446635.png" alt></p><h3 id="5-Stream-的终止操作"><a href="#5-Stream-的终止操作" class="headerlink" title="5. Stream 的终止操作"></a>5. Stream 的终止操作</h3><p>终端操作会从流的流水线生成结果。其结果可以是任何不是流的 值，例如：List、Integer，甚至是 void 。</p><p><strong>查找与匹配</strong><br><img src="/2020/02/08/Java8%E6%96%B0%E7%89%B9%E6%80%A7/1cd0233f-598b-4537-8998-5e5fa24aada0.png" alt><br><img src="/2020/02/08/Java8%E6%96%B0%E7%89%B9%E6%80%A7/bae6b149-cc4f-4f84-aec0-e27bf8afe015.png" alt></p><p><strong>归约</strong><br><img src="/2020/02/08/Java8%E6%96%B0%E7%89%B9%E6%80%A7/037bfd49-78ed-468b-aa65-4ad0242e490b.png" alt></p><p>备注：map 和 reduce 的连接通常称为 map-reduce 模式，因 Google 用它 来进行网络搜索而出名。</p><p><strong>收集</strong><br><img src="/2020/02/08/Java8%E6%96%B0%E7%89%B9%E6%80%A7/2cccbffb-7df8-4a65-8153-537071e75bd7.png" alt></p><p>Collector 接口中方法的实现决定了如何对流执行收集操作(如收集到 List、Set、Map)。但是 Collectors 实用类提供了很多静态方法，可以方便地创建常见收集器实例，具体方法与实例如下表：</p><h3 id="6-并行流与串行流"><a href="#6-并行流与串行流" class="headerlink" title="6. 并行流与串行流"></a>6. 并行流与串行流</h3><p><strong>并行流</strong>就是把一个内容分成多个数据块，并用不同的线程分 别处理每个数据块的流。</p><p>Java 8 中将并行进行了优化，我们可以很容易的对数据进行并 行操作。Stream API 可以声明性地通过 parallel() 与 sequential() 在并行流与顺序流之间进行切换。</p><h3 id="7-了解-Fork-Join-框架"><a href="#7-了解-Fork-Join-框架" class="headerlink" title="7. 了解 Fork/Join 框架"></a>7. 了解 Fork/Join 框架</h3><p><strong>Fork/Join 框架</strong>:就是在必要的情况下，将一个大任务，进行拆分(fork)成若干个小任务（拆到不可再拆时），再将一个个的小任务运算的结果进行 join 汇总.</p><p><img src="/2020/02/08/Java8%E6%96%B0%E7%89%B9%E6%80%A7/84eaed9b-717b-47f9-9f0a-f5fde05f7472.jpg" alt></p><h3 id="8-Fork-Join-框架与传统线程池的区别"><a href="#8-Fork-Join-框架与传统线程池的区别" class="headerlink" title="8. Fork/Join 框架与传统线程池的区别"></a>8. Fork/Join 框架与传统线程池的区别</h3><p>采用 “工作窃取”模式（work-stealing）：<br>当执行新的任务时它可以将其拆分分成更小的任务执行，并将小任务加到线程队列中，然后再从一个随机线程的队列中偷一个并把它放在自己的队列中。</p><p>相对于一般的线程池实现,fork/join框架的优势体现在对其中包含的任务的<br>处理方式上.在一般的线程池中,如果一个线程正在执行的任务由于某些原因<br>无法继续运行,那么该线程会处于等待状态.而在fork/join框架实现中,如果<br>某个子问题由于等待另外一个子问题的完成而无法继续运行.那么处理该子<br>问题的线程会主动寻找其他尚未运行的子问题来执行.这种方式减少了线程<br>的等待时间,提高了性能.</p><h2 id="5-新时间日期API"><a href="#5-新时间日期API" class="headerlink" title="5. 新时间日期API"></a>5. 新时间日期API</h2><ul><li>LocalDate、LocalTime、LocalDateTime 类的实 例是<strong>不可变的对象</strong>，分别表示使用 ISO-8601日 历系统的日期、时间、日期和时间。它们提供了简单的日期或时间，并不包含当前的时间信息。也不包含与时区相关的信息。</li></ul><p><img src="/2020/02/08/Java8%E6%96%B0%E7%89%B9%E6%80%A7/1d49dcda-eb3d-4eb7-aa3c-889e5607867f.png" alt></p><p><strong>Instant 时间戳</strong></p><ul><li>用于“时间戳”的运算。它是以Unix元年(传统 的设定为UTC时区1970年1月1日午夜时分)开始 所经历的描述进行运算</li></ul><p><strong>Duration 和 Period</strong></p><ul><li><p>Duration:用于计算两个“时间”间隔</p></li><li><p>Period:用于计算两个“日期”间隔</p></li><li><p>日期的操纵</p></li><li><p>TemporalAdjuster : 时间校正器。有时我们可能需要获 取例如：将日期调整到“下个周日”等操作。</p></li><li><p>TemporalAdjusters : 该类通过静态方法提供了大量的常 用 TemporalAdjuster 的实现。</p></li></ul><p>例如获取下个周日：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LocalDate nextSunday &#x3D; LocalDate.now().with(</span><br><span class="line">   TemporalAdjusters.next(DayOfWeek.SUNDAY)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>解析与格式化</strong></p><p>java.time.format.DateTimeFormatter 类：该类提供了三种 格式化方法：</p><ul><li><p>预定义的标准格式</p></li><li><p>语言环境相关的格式</p></li><li><p>自定义的格式</p></li></ul><p><strong>时区的处理</strong></p><ul><li>Java8 中加入了对时区的支持，带时区的时间为分别为：</li></ul><p>ZonedDate、ZonedTime、ZonedDateTime<br>其中每个时区都对应着 ID，地区ID都为 “{区域}/{城市}”的格式<br>例如 ：Asia/Shanghai 等</p><p>ZoneId：该类中包含了所有的时区信息</p><p>getAvailableZoneIds() : 可以获取所有时区时区信息<br>of(id) : 用指定的时区信息获取 ZoneId 对象</p><p><strong>与传统日期处理的转换</strong><br><img src="/2020/02/08/Java8%E6%96%B0%E7%89%B9%E6%80%A7/0b30f162-415f-4a9c-a650-ba13116ff20b.png" alt></p><h2 id="6-接口中的默认方法与静态方法"><a href="#6-接口中的默认方法与静态方法" class="headerlink" title="6. 接口中的默认方法与静态方法"></a>6. 接口中的默认方法与静态方法</h2><h3 id="1-接口中的默认方法"><a href="#1-接口中的默认方法" class="headerlink" title="1. 接口中的默认方法"></a>1. 接口中的默认方法</h3><p>Java 8中允许接口中包含具有具体实现的方法，该方法称为 “默认方法”，默认方法使用 default 关键字修饰。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">例如：</span><br><span class="line">interface MyFunc&lt;T&gt;&#123;</span><br><span class="line">  T func(int a);</span><br><span class="line"></span><br><span class="line">  default String getName()&#123;</span><br><span class="line">     return &quot;Hello Java&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>*<em>接口默认方法的”类优先”原则 *</em></p><p>若一个接口中定义了一个默认方法，而另外一个父类或接口中 又定义了一个同名的方法时</p><ul><li><p>选择父类中的方法。如果一个父类提供了具体的实现，那么 接口中具有相同名称和参数的默认方法会被忽略。</p></li><li><p>接口冲突。如果一个父接口提供一个默认方法，而另一个接 口也提供了一个具有相同名称和参数列表的方法（不管方法 是否是默认方法），那么必须覆盖该方法来解决冲突</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">interface MyFunc&#123;</span><br><span class="line">   default String getName()&#123;</span><br><span class="line">        return &quot;Hello World&quot;;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Named&#123;</span><br><span class="line">   default String getName()&#123;</span><br><span class="line">        return &quot;Hello java8&quot;;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class MyClass implements MyFunc,Named&#123;</span><br><span class="line">   public String getName()&#123;</span><br><span class="line">        return Named.super.getName();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-接口中的静态方法"><a href="#2-接口中的静态方法" class="headerlink" title="2. 接口中的静态方法"></a>2. 接口中的静态方法</h3><p>Java8 中，接口中允许添加静态方法</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">interface Named&#123;</span><br><span class="line">  public Integer myFun();</span><br><span class="line"></span><br><span class="line">  default String getName()&#123;</span><br><span class="line">     return &quot;Hello World&quot;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  static void show()&#123;</span><br><span class="line">     System.out.println(&quot;Hello Lambda&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-其他新特性"><a href="#7-其他新特性" class="headerlink" title="7. 其他新特性"></a>7. 其他新特性</h2><p><strong>Optional 类</strong></p><p>Optional<T> 类(java.util.Optional) 是一个容器类，代表一个值存在或不存在，原来用 null 表示一个值不存在，现在 Optional 可以更好的表达这个概念。并且可以避免空指针异常。</T></p><p><strong>常用方法：</strong><br>Optional.of(T t) : 创建一个 Optional 实例<br>Optional.empty() : 创建一个空的 Optional 实例<br>Optional.ofNullable(T t):若 t 不为 null,创建 Optional 实例,否则创建空实例<br>isPresent() : 判断是否包含值<br>orElse(T t) :  如果调用对象包含值，返回该值，否则返回t<br>orElseGet(Supplier s) :如果调用对象包含值，返回该值，否则返回 s 获取的值<br>map(Function f): 如果有值对其处理，并返回处理后的Optional，否则返回 Optional.empty()<br>flatMap(Function mapper):与 map 类似，要求返回值必须是Optional</p><p><strong>重复注解与类型注解</strong></p><p>Java 8对注解处理提供了两点改进：可重复的注解及可用于类型的注解。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@Target(&#123;TYPE,FIELD,METHOD,PARAMETER,CONSTRUCTOR,LOCAL_VARIABLE&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">public @interface MyAnnotations&#123;</span><br><span class="line">   MyAnnotation[] value();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Repeatable(MyAnnotations.class)</span><br><span class="line">@Target(&#123;TYPE,FIELD,METHOD,PARAMETER,CONSTRUCTOR,LOCAL_VARIABLE,ElementType.TYPE_PARAMETER&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">public @interface MyAnnotation&#123;</span><br><span class="line">   String value();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@MyAnnotation(&quot;Hello&quot;)</span><br><span class="line">@MyAnnotation(&quot;World&quot;)</span><br><span class="line">public void show(@MyAnnotation(&quot;abc&quot;) String str)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h2><p>1 交易员</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">public class Trader &#123;</span><br><span class="line">     private String name;</span><br><span class="line">     private String city;</span><br><span class="line">     public Trader(String name, String city) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">        this.city &#x3D; city;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; getter setter方法省略</span><br><span class="line"></span><br><span class="line">public class Transaction &#123;</span><br><span class="line">     private Trader trader;</span><br><span class="line">     private int year;</span><br><span class="line">     private int value;</span><br><span class="line">     public Transaction(Trader trader, int year, int value) &#123;</span><br><span class="line">        this.trader &#x3D; trader;</span><br><span class="line">        this.year &#x3D; year;</span><br><span class="line">        this.value &#x3D; value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class PuttingIntoPractice &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Trader raoul &#x3D; new Trader(&quot;Raoul&quot;,&quot;Cambridge&quot;);</span><br><span class="line">        Trader mario &#x3D; new Trader(&quot;mario&quot;,&quot;Milan&quot;);</span><br><span class="line">        Trader alen &#x3D; new Trader(&quot;alen&quot;,&quot;Cambridge&quot;);</span><br><span class="line">        Trader brian &#x3D; new Trader(&quot;brian&quot;,&quot;Cambridge&quot;);</span><br><span class="line"></span><br><span class="line">  List&lt;Transaction&gt; transactions &#x3D; Arrays.asList(</span><br><span class="line">          new Transaction(brian,2011,300),</span><br><span class="line">          new Transaction(raoul,2012,1000),</span><br><span class="line">          new Transaction(raoul,2011,400),</span><br><span class="line">          new Transaction(mario,2012,710),</span><br><span class="line">          new Transaction(mario,2012,700),</span><br><span class="line">          new Transaction(alen,2012,950)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;        (1) 找出2011年发生的所有交易，并按交易额排序（从低到高）。</span><br><span class="line">  transactions.stream()</span><br><span class="line">                .filter(transaction -&gt; transaction.getYear() &#x3D;&#x3D; 2011)</span><br><span class="line">.sorted(Comparator.comparing(Transaction::getValue))</span><br><span class="line">                .collect(Collectors.toList())</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;        (2) 交易员都在哪些不同的城市工作过？</span><br><span class="line">  transactions.stream()</span><br><span class="line">                .map(transaction -&gt; transaction.getTrader().getCity())</span><br><span class="line">                .distinct()</span><br><span class="line">                .collect(Collectors.toList())</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;        (3) 查找所有来自于剑桥的交易员，并按姓名排序。</span><br><span class="line">  transactions.stream()</span><br><span class="line">                .map(Transaction::getTrader)</span><br><span class="line">                .filter(trader -&gt; trader.getCity().equals(&quot;Cambridge&quot;))</span><br><span class="line">                .distinct()</span><br><span class="line">                .sorted(Comparator.comparing(Trader::getName))</span><br><span class="line">                .collect(Collectors.toList())</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;        (4) 返回所有交易员的姓名字符串，按字母顺序排序。</span><br><span class="line">  String traderStr &#x3D; transactions.stream()</span><br><span class="line">                .map(transaction -&gt; transaction.getTrader().getName())</span><br><span class="line">                .distinct()</span><br><span class="line">                .sorted()</span><br><span class="line">                .reduce(&quot;&quot;, (n1, n2) -&gt; n1 + n2);</span><br><span class="line">  System.out.println(traderStr);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;        (5) 有没有交易员是在米兰工作的？</span><br><span class="line">  boolean miLanBased &#x3D; transactions.stream()</span><br><span class="line">                .anyMatch(transaction -&gt; transaction.getTrader()</span><br><span class="line">                        .getCity().equals(&quot;MiLan&quot;));</span><br><span class="line">  System.out.println(miLanBased);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;        (6) 打印生活在剑桥的交易员的所有交易额。</span><br><span class="line">         transactions.stream()</span><br><span class="line">                .filter(transaction -&gt; transaction.getTrader().getCity().equals(&quot;Cambridge&quot;))</span><br><span class="line">                .map(Transaction::getValue)</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;        (7) 所有交易中，最高的交易额是多少？</span><br><span class="line">  int highestValue &#x3D; transactions.stream()</span><br><span class="line">                .map(Transaction::getValue)</span><br><span class="line">                .reduce(0,Integer::max);</span><br><span class="line">  System.out.println(highestValue);</span><br><span class="line"></span><br><span class="line">  transactions.stream()</span><br><span class="line">  .sorted(Comparator.comparing(Transaction::getValue).reversed())</span><br><span class="line">                .findFirst()</span><br><span class="line">                .ifPresent(System.out::println);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;        (8) 找到交易额最小的交易。</span><br><span class="line">  transactions.stream()</span><br><span class="line">                .map(Transaction::getValue)</span><br><span class="line">                .reduce(Integer::min)</span><br><span class="line">                .ifPresent(System.out::println);</span><br><span class="line"></span><br><span class="line">  transactions.stream()</span><br><span class="line">             .min(Comparator.comparing(Transaction::getValue))</span><br><span class="line">                .ifPresent(System.out::println);</span><br><span class="line"></span><br><span class="line">  transactions.stream()</span><br><span class="line">                .min(Comparator.comparing((Transaction t1)-&gt; t1.getValue()))</span><br><span class="line">                .ifPresent(System.out::println);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;        (9) 统计每个交易员的记录</span><br><span class="line">  transactions.stream()</span><br><span class="line">       .collect(Collectors.groupingBy(Transaction::getTrader))</span><br><span class="line">                .entrySet().stream()</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;        (10) 找到单笔交易最高的交易员</span><br><span class="line">  transactions.stream()</span><br><span class="line">             .max(Comparator.comparing(Transaction::getValue))</span><br><span class="line">                .ifPresent(tran -&gt;&#123;</span><br><span class="line">                    System.out.println(tran.getTrader());</span><br><span class="line">  &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多练习参考网络</p><h2 id="8-java8红黑树"><a href="#8-java8红黑树" class="headerlink" title="8. java8红黑树"></a>8. java8红黑树</h2><h3 id="HashMap数据结构"><a href="#HashMap数据结构" class="headerlink" title="HashMap数据结构"></a>HashMap数据结构</h3><p>回顾：HashSet是基于HashCode实现元素不重复的。当插入元素的哈希码相同时，会调用equals方法进行二次比较，如果相同，则新值替旧值。如果不同，则以链表的形式挂在当前元素所在的位置。</p><p>扩容因子：0.75</p><p>如果是1 ，则可能永远是只插入到两个位置，形成部分元素的长链表。每次都要在哈希码相同时进行equals比较（哈希碰撞）。降低性能。</p><p>如果是&lt;0.75,则可能浪费空间。</p><h3 id="数组-链表-红黑树-二叉树的一种"><a href="#数组-链表-红黑树-二叉树的一种" class="headerlink" title="数组-链表-红黑树(二叉树的一种)"></a>数组-链表-红黑树(二叉树的一种)</h3><p><strong>条件：当碰撞袁术个数&gt;8 &amp;&amp; 总容量&gt;64 将其转换为红黑树</strong></p><p><font color="red">碰撞元素个数</font>：一个数组元素上所挂载的（链表）元素个数。</p><p><font color="red">JDK7是数组-&gt;链表</font>：一个数组元素上所挂载的（链表）元素个数。</p><p><font color="red">JDK8是数组-链表</font>： 当转变为红黑树时，添加的效率变低。其他效率都高了。平衡二叉树（比当前值与节点值的大小）</p><p>扩容是：原来表会计算hashcode值进行元素的再次填充。</p><p>现在只需要找原来表的总长度+当前所在的位置，就是当前扩容后的位置。（不需要再次进行哈希计算）。</p><p><strong>ConcurrentHashMap：效率提高</strong></p><p>JDK7: ConcurrentLevel = 16<br>JDK8：CAS算法</p><p><img src="/2020/02/08/Java8%E6%96%B0%E7%89%B9%E6%80%A7/7d750713-3d72-48e3-b512-d11dc1900f92.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;2014年，Oracle发布了Java8新版本后，愈来愈多的公司开始尝试使用Java8新特性来摆脱繁琐的语法，在使用Java8代码编写公司项目后，尝到了“语法糖”的妙处，由此开始了系统学习Java8的一些新特性。&lt;br&gt;疫情在家，闲来无事，收集整理网上各种Java8学习笔记后，汇成一篇，以便诸君参考，亦是个人Java8学习的小结。&lt;/p&gt;
&lt;h3 id=&quot;特性&quot;&gt;&lt;a href=&quot;#特性&quot; class=&quot;headerlink&quot; title=&quot;特性&quot;&gt;&lt;/a&gt;特性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;速度更块&lt;/li&gt;
&lt;li&gt;代码更少（Lambda表达式）&lt;/li&gt;
&lt;li&gt;强大的Stream API&lt;/li&gt;
&lt;li&gt;便于并行&lt;/li&gt;
&lt;li&gt;最大化减少空指针异常 Optional&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;font color=&quot;red&quot;&gt;核心为：Lambda表达式与Stream API&lt;/font&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://JavaSsun.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://JavaSsun.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>LinkedHashMap实现原理_探险</title>
    <link href="http://javassun.github.io/2019/11/28/LinkedHashMap%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86-%E6%8E%A2%E9%99%A9/"/>
    <id>http://javassun.github.io/2019/11/28/LinkedHashMap%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86-%E6%8E%A2%E9%99%A9/</id>
    <published>2019-11-28T10:30:10.000Z</published>
    <updated>2020-04-16T10:05:57.494Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-概述"><a href="#一-概述" class="headerlink" title="一 概述"></a>一 概述</h1><p>深入理解Java集合中的源代码，可以帮助我们更好地了解大佬的意图，规避不必要的bug。</p><p>源码中的一段注释，提取关键信息<br>Hash table and linked list implementation of the Map interface, with predictable iteration order. This implementation differs from HashMap in that it maintains a doubly-linked list running through all of its entries. This linked list defines the iteration ordering, which is normally the order in which keys were inserted into the map (insertion-order). Note that insertion order is not affected if a key is re-inserted into the map. (A key k is reinserted into a map m if m.put(k, v) is invoked when m.containsKey(k) would return true immediately prior to the invocation.)</p><p>从注释中，我们可以先了解到 LinkedHashMap 是通过哈希表和链表实现的，它通过 维护一个链表来保证对哈希表迭代时的有序性，而这个有序是指键值对插入的顺序。 <a id="more"></a>另外，当向哈希表中重复插入某个键的时候，不会影响到原来的有序性。也就是说， 假设你插入的键的顺序为 1、2、3、4，后来再次插入 2，迭代时的顺序还是 1、2、 3、4，而不会因为后来插入的 2 变成 1、3、4、2。（但其实我们可以改变它的规则， 使它变成 1、3、4、2）</p><p>LinkedHashMap 的实现主要分两部分，一部分是哈希表，另外一部分是链表。哈希 表部分继承了 HashMap，拥有了 HashMap 那一套高效的操作，所以我们要看的就是 LinkedHashMap 中链表的部分，了解它是如何来维护有序性的。</p><p>LinkedHashMap 的大致实现如下图所示，当然链表和哈希表中相同的键值对都是指 向同一个对象，这里把它们分开来画只是为了呈现出比较清晰的结构。</p><p><img src="/2019/11/28/LinkedHashMap%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86-%E6%8E%A2%E9%99%A9/123e5c16-da83-4e2b-99ca-ac014847a73a.jpg" alt></p><h1 id="二-属性"><a href="#二-属性" class="headerlink" title="二 属性"></a>二 属性</h1><p>在看属性之前，我们先来看一下 LinkedHashMap 的声明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class LinkedHashMap&lt;K,V&gt; extends HashMap&lt;K,V&gt; imple ments Map&lt;K,V&gt;</span><br></pre></td></tr></table></figure><p>从上面的声明中，我们可以看见 LinkedHashMap 是继承自 HashMap 的，所以它已 经从 HashMap 那里继承了与哈希表相关的操作了，那么在 LinkedHashMap 中，它 可以专注于链表实现的那部分，所以与链表实现相关的属性如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;LinkedHashMap 的链表节点继承了 HashMap 的节点，而且每个节点都包含</span><br><span class="line">了前指针和后指针，所以这里可以看出它是一个双向链表</span><br><span class="line">static class Entry&lt;K,V&gt; extends HashMap.Node&lt;K,V&gt; &#123;</span><br><span class="line">    Entry&lt;K,V&gt; before, after;</span><br><span class="line">    Entry(int hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">        super(hash, key, value, next);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;头指针</span><br><span class="line">transient LinkedHashMap.Entry&lt;K,V&gt; head;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;尾指针</span><br><span class="line">transient LinkedHashMap.Entry&lt;K,V&gt; tail;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;默认为 false。当为 true 时，表示链表中键值对的顺序与每个键的插入顺</span><br><span class="line">序一致，也就是说重复插入键，也会更新顺序</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;简单来说，为 false 时，就是上面所指的 1、2、3、4 的情况；为 true 时，</span><br><span class="line">就是 1、3、4、2 的情况</span><br><span class="line"></span><br><span class="line">final boolean accessOrder;</span><br></pre></td></tr></table></figure><h1 id="三-方法"><a href="#三-方法" class="headerlink" title="三 方法"></a>三 方法</h1><p>如果仔细看过 HashMap 源码的话，会发现 HashMap 中有如下三个方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Callbacks to allow LinkedHashMap post-actions</span><br><span class="line"></span><br><span class="line">void afterNodeAccess(Node&lt;K,V&gt; p) &#123; &#125;</span><br><span class="line"></span><br><span class="line">void afterNodeInsertion(boolean evict) &#123; &#125;</span><br><span class="line"></span><br><span class="line">void afterNodeRemoval(Node&lt;K,V&gt; p) &#123; &#125;</span><br></pre></td></tr></table></figure><p>如果没有注意到注释的解释的话，可能会很奇怪为什么会有三个空方法，而且 有不少地方还调用过它们。其实这三个方法表示的是在访问、插入、删除某个节点 之后，进行一些处理，它们在 LinkedHashMap 都有各自的实现。LinkedHashMap 正 是通过重写这三个方法来保证链表的插入、删除的有序性。</p><h2 id="1-afterNodeAccess方法"><a href="#1-afterNodeAccess方法" class="headerlink" title="1 afterNodeAccess方法"></a>1 afterNodeAccess方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">void afterNodeAccess(Node&lt;K,V&gt; e) &#123; &#x2F;&#x2F; move node to last</span><br><span class="line">    LinkedHashMap.Entry&lt;K,V&gt; last;</span><br><span class="line">    &#x2F;&#x2F;当 accessOrder 的值为 true，且 e 不是尾节点</span><br><span class="line">    if (accessOrder &amp;&amp; (last &#x3D; tail) !&#x3D; e) &#123;</span><br><span class="line">        LinkedHashMap.Entry&lt;K,V&gt; p &#x3D;</span><br><span class="line">            (LinkedHashMap.Entry&lt;K,V&gt;)e, b &#x3D; p.before, a &#x3D; p.after;</span><br><span class="line">        p.after &#x3D; null;</span><br><span class="line">        if (b &#x3D;&#x3D; null)</span><br><span class="line">            head &#x3D; a;</span><br><span class="line">        else</span><br><span class="line">            b.after &#x3D; a;</span><br><span class="line">        if (a !&#x3D; null)</span><br><span class="line">            a.before &#x3D; b;</span><br><span class="line">        else</span><br><span class="line">            last &#x3D; b;</span><br><span class="line">        if (last &#x3D;&#x3D; null)</span><br><span class="line">            head &#x3D; p;</span><br><span class="line">        else &#123;</span><br><span class="line">            p.before &#x3D; last;</span><br><span class="line">            last.after &#x3D; p;</span><br><span class="line">        &#125;</span><br><span class="line">        tail &#x3D; p;</span><br><span class="line">        ++modCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码的意思简洁明了，就是把当前节点 e 移至链表的尾部。因为使用的是双向 链表，所以在尾部插入可以以 O（1）的时间复杂度来完成。并且只有当accessOrder<br>设置为 true 时，才会执行这个操作。在 HashMap 的 putVal 方法中，就调用了这个 方法。</p><h2 id="2-afterNodeInsertion方法"><a href="#2-afterNodeInsertion方法" class="headerlink" title="2 afterNodeInsertion方法"></a>2 afterNodeInsertion方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void afterNodeInsertion(boolean evict) &#123; &#x2F;&#x2F; possibly remov e eldest</span><br><span class="line">    LinkedHashMap.Entry&lt;K,V&gt; first;</span><br><span class="line">    if (evict &amp;&amp; (first &#x3D; head) !&#x3D; null &amp;&amp; removeEldestEntr y(first)) &#123;</span><br><span class="line">        K key &#x3D; first.key;</span><br><span class="line">        removeNode(hash(key), key, null, false, true);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>afterNodeInsertion 方法是在哈希表中插入了一个新节点时调用的，它会把链表的头 节点删除掉，删除的方式是通过调用 HashMap 的 removeNode 方法。想一想，通过 afterNodeInsertion 方法和 afterNodeAccess 方法，是不是就可以简单的实现一个基于 最近最少使用（LRU）的淘汰策略了？当然，我们还要重写 removeEldestEntry 方法， 因为它默认返回的是 false。</p><h2 id="3-afterNodeRemoval方法"><a href="#3-afterNodeRemoval方法" class="headerlink" title="3 afterNodeRemoval方法"></a>3 afterNodeRemoval方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">void afterNodeRemoval(Node&lt;K,V&gt; e) &#123; &#x2F;&#x2F; unlink</span><br><span class="line">    LinkedHashMap.Entry&lt;K,V&gt; p &#x3D;</span><br><span class="line">        (LinkedHashMap.Entry&lt;K,V&gt;)e, b &#x3D; p.before, a &#x3D; p.aft er;</span><br><span class="line">    p.before &#x3D; p.after &#x3D; null;</span><br><span class="line">    if (b &#x3D;&#x3D; null)</span><br><span class="line">        head &#x3D; a;</span><br><span class="line">    else</span><br><span class="line">        b.after &#x3D; a;</span><br><span class="line">    if (a &#x3D;&#x3D; null)</span><br><span class="line">        tail &#x3D; b;</span><br><span class="line">    else</span><br><span class="line">        a.before &#x3D; b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法是当 HashMap 删除一个键值对时调用的，它会把在 HashMap 中删除的那 个键值对一并从链表中删除，保证了哈希表和链表的一致性。 </p><h2 id="4-get方法"><a href="#4-get方法" class="headerlink" title="4 get方法"></a>4 get方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public V get(Object key) &#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    if ((e &#x3D; getNode(hash(key), key)) &#x3D;&#x3D; null)</span><br><span class="line">        return null;</span><br><span class="line">    if (accessOrder)</span><br><span class="line">        afterNodeAccess(e);</span><br><span class="line">    return e.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>，LinkedHashMap 的 get 方法就是这么简单，因为它调用的是 HashMap 的 getNode 方法来获取结果的。并且，如果你把 accessOrder 设置为 true，那么在获取到值之后，还会调用 afterNodeAccess 方法。这样是不是就能保证一个 LRU 的算法了.</p><h2 id="5-put和remove方法"><a href="#5-put和remove方法" class="headerlink" title="5 put和remove方法"></a>5 put和remove方法</h2><p>在 LinkedHashMap 的源码中没有找到 put 方法，这就说明了它并没有重写 put 方 法，所以我们调用的 put 方法其实是 HashMap 的 put 方法。因为 HashMap 的 put 方 法中调用了 afterNodeAccess 方法和 afterNodeInsertion 方法，已经足够保证链表的有 序性了，所以它也就没有重写 put 方法了。remove 方法也是如此。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一-概述&quot;&gt;&lt;a href=&quot;#一-概述&quot; class=&quot;headerlink&quot; title=&quot;一 概述&quot;&gt;&lt;/a&gt;一 概述&lt;/h1&gt;&lt;p&gt;深入理解Java集合中的源代码，可以帮助我们更好地了解大佬的意图，规避不必要的bug。&lt;/p&gt;
&lt;p&gt;源码中的一段注释，提取关键信息&lt;br&gt;Hash table and linked list implementation of the Map interface, with predictable iteration order. This implementation differs from HashMap in that it maintains a doubly-linked list running through all of its entries. This linked list defines the iteration ordering, which is normally the order in which keys were inserted into the map (insertion-order). Note that insertion order is not affected if a key is re-inserted into the map. (A key k is reinserted into a map m if m.put(k, v) is invoked when m.containsKey(k) would return true immediately prior to the invocation.)&lt;/p&gt;
&lt;p&gt;从注释中，我们可以先了解到 LinkedHashMap 是通过哈希表和链表实现的，它通过 维护一个链表来保证对哈希表迭代时的有序性，而这个有序是指键值对插入的顺序。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://JavaSsun.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://JavaSsun.github.io/tags/Java/"/>
    
      <category term="源码解析" scheme="http://JavaSsun.github.io/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>HashTable实现原理_探险</title>
    <link href="http://javassun.github.io/2019/11/22/HashTable%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86-%E6%8E%A2%E9%99%A9/"/>
    <id>http://javassun.github.io/2019/11/22/HashTable%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86-%E6%8E%A2%E9%99%A9/</id>
    <published>2019-11-22T05:28:10.000Z</published>
    <updated>2020-04-16T10:05:42.840Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-概述"><a href="#一-概述" class="headerlink" title="一 概述"></a>一 概述</h1><p>深入理解Java集合中的源代码，可以帮助我们更好地了解大佬的意图，规避不必要的bug。</p><p>Hashtable 可以说已经具有一定的历史了，现在也很少使用到 Hashtable 了，更多的是使 用 HashMap 或 ConcurrentHashMap。HashTable 是一个线程安全的哈希表，它通过使用 synchronized 关键字来对方法进行加锁，从而保证了线程安全。但这也导致了在单线程 环境中效率低下等问题。Hashtable 与 HashMap 不同，它不允许插入 null 值和 null 键。</p><a id="more"></a><h1 id="二-属性"><a href="#二-属性" class="headerlink" title="二 属性"></a>二 属性</h1><p>Hashtable 并没有像 HashMap 那样定义了很多的常量，而是直接写死在了方法里（看下 去就知道了），所以它的属性相比 HashMap 来说，可以获取的信息还是比较少的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;哈希表</span><br><span class="line">private transient Entry&lt;?,?&gt;[] table;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;记录哈希表中键值对的个数</span><br><span class="line">private transient int count;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;扩容的阈值</span><br><span class="line">private int threshold;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;负载因子</span><br><span class="line">private float loadFactor;</span><br></pre></td></tr></table></figure><h1 id="三-方法"><a href="#三-方法" class="headerlink" title="三 方法"></a>三 方法</h1><h2 id="1-构造方法"><a href="#1-构造方法" class="headerlink" title="1 构造方法"></a>1 构造方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public Hashtable(int initialCapacity, float loadFactor) &#123;</span><br><span class="line">    if (initialCapacity &lt; 0)</span><br><span class="line">            throw new IllegalArgumentException(&quot;Illegal Capacity: &quot;+</span><br><span class="line">                                               initialCapacity);</span><br><span class="line">    if (loadFactor &lt;&#x3D; 0 || Float.isNaN(loadFactor))</span><br><span class="line">            throw new IllegalArgumentException(&quot;Illegal Load: &quot;+l oadFactor);</span><br><span class="line"></span><br><span class="line">    if (initialCapacity&#x3D;&#x3D;0)</span><br><span class="line">        initialCapacity &#x3D; 1;</span><br><span class="line">    this.loadFactor &#x3D; loadFactor;</span><br><span class="line">    table &#x3D; new Entry&lt;?,?&gt;[initialCapacity];</span><br><span class="line">    threshold &#x3D; (int)Math.min(initialCapacity * loadFactor, MAX_ARRAY_SIZE + 1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Hashtable(int initialCapacity) &#123;</span><br><span class="line">    this(initialCapacity, 0.75f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Hashtable() &#123;</span><br><span class="line">    this(11, 0.75f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二话不说，上来先丢了三个构造函数。从构造函数中，我们可以获取到这些信息： Hashtable默认的初始化容量为11（与HashMap不同），负载因子默认为0.75（与HashMap 相同）。而正因为默认初始化容量的不同，同时也没有对容量做调整的策略，所以可以 先推断出，Hashtable 使用的哈希函数跟 HashMap 是不一样的（事实也确实如此）。</p><h2 id="2-get方法"><a href="#2-get方法" class="headerlink" title="2 get方法"></a>2 get方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public synchronized V get(Object key) &#123;</span><br><span class="line">    Entry&lt;?,?&gt; tab[] &#x3D; table;</span><br><span class="line">    int hash &#x3D; key.hashCode();</span><br><span class="line">    &#x2F;&#x2F;通过哈希函数，计算出 key 对应的桶的位置</span><br><span class="line">    int index &#x3D; (hash &amp; 0x7FFFFFFF) % tab.length;</span><br><span class="line">    &#x2F;&#x2F;遍历该桶的所有元素，寻找该 key</span><br><span class="line">    for (Entry&lt;?,?&gt; e &#x3D; tab[index] ; e !&#x3D; null ; e &#x3D; e.next) &#123;</span><br><span class="line">        if ((e.hash &#x3D;&#x3D; hash) &amp;&amp; e.key.equals(key)) &#123;</span><br><span class="line">            return (V)e.value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟 HashMap 相比，Hashtable 的 get 方法非常简单。我们首先可以看见 get 方法使用了 synchronized 来修饰，所以它能保证线程安全。并且它是通过链表的方式来处理冲突的。 另外，我们还可以看见 HashTable 并没有像 HashMap 那样封装一个哈希函数，而是直接 把哈希函数写在了方法中。而哈希函数也是比较简单的，它仅对哈希表的长度进行了取模。</p><h2 id="3-put方法"><a href="#3-put方法" class="headerlink" title="3 put方法"></a>3 put方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">public synchronized V put(K key, V value) &#123;</span><br><span class="line">    &#x2F;&#x2F; Make sure the value is not null</span><br><span class="line">    if (value &#x3D;&#x3D; null) &#123;</span><br><span class="line">        throw new NullPointerException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Makes sure the key is not already in the hashtable.</span><br><span class="line">    Entry&lt;?,?&gt; tab[] &#x3D; table;</span><br><span class="line">    int hash &#x3D; key.hashCode();</span><br><span class="line">    &#x2F;&#x2F;计算桶的位置</span><br><span class="line">    int index &#x3D; (hash &amp; 0x7FFFFFFF) % tab.length;</span><br><span class="line">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">    Entry&lt;K,V&gt; entry &#x3D; (Entry&lt;K,V&gt;)tab[index];</span><br><span class="line">    &#x2F;&#x2F;遍历桶中的元素，判断是否存在相同的 key</span><br><span class="line">    for(; entry !&#x3D; null ; entry &#x3D; entry.next) &#123;</span><br><span class="line">        if ((entry.hash &#x3D;&#x3D; hash) &amp;&amp; entry.key.equals(key)) &#123;</span><br><span class="line">            V old &#x3D; entry.value;</span><br><span class="line">            entry.value &#x3D; value;</span><br><span class="line">            return old;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;不存在相同的 key，则把该 key 插入到桶中</span><br><span class="line">    addEntry(hash, key, value, index);</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">private void addEntry(int hash, K key, V value, int index) &#123;</span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">    Entry&lt;?,?&gt; tab[] &#x3D; table;</span><br><span class="line">    &#x2F;&#x2F;哈希表的键值对个数达到了阈值，则进行扩容</span><br><span class="line">    if (count &gt;&#x3D; threshold) &#123;</span><br><span class="line">        &#x2F;&#x2F; Rehash the table if the threshold is exceeded</span><br><span class="line">        rehash();</span><br><span class="line"></span><br><span class="line">        tab &#x3D; table;</span><br><span class="line">        hash &#x3D; key.hashCode();</span><br><span class="line">        index &#x3D; (hash &amp; 0x7FFFFFFF) % tab.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Creates the new entry.</span><br><span class="line">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">    Entry&lt;K,V&gt; e &#x3D; (Entry&lt;K,V&gt;) tab[index];</span><br><span class="line">    &#x2F;&#x2F;把新节点插入桶中（头插法）</span><br><span class="line">    tab[index] &#x3D; new Entry&lt;&gt;(hash, key, value, e);</span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>put 方法一开始就表明了不能有 null 值，否则就会向你抛出一个空指针异常。Hashtable 的 put 方法也是使用 synchronized 来修饰。你可以发现，在 Hashtable 中，几乎所有的方 法都使用了 synchronized 来保证线程安全。</p><h2 id="4-remove方法"><a href="#4-remove方法" class="headerlink" title="4 remove方法"></a>4 remove方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public synchronized V remove(Object key) &#123;</span><br><span class="line">    Entry&lt;?,?&gt; tab[] &#x3D; table;</span><br><span class="line">    int hash &#x3D; key.hashCode();</span><br><span class="line">    int index &#x3D; (hash &amp; 0x7FFFFFFF) % tab.length;</span><br><span class="line">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">    Entry&lt;K,V&gt; e &#x3D; (Entry&lt;K,V&gt;)tab[index];</span><br><span class="line">    for(Entry&lt;K,V&gt; prev &#x3D; null ; e !&#x3D; null ; prev &#x3D; e, e &#x3D; e.nex t) &#123;</span><br><span class="line">        if ((e.hash &#x3D;&#x3D; hash) &amp;&amp; e.key.equals(key)) &#123;</span><br><span class="line">            modCount++;</span><br><span class="line">            if (prev !&#x3D; null) &#123;</span><br><span class="line">                prev.next &#x3D; e.next;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                tab[index] &#x3D; e.next;</span><br><span class="line">            &#125;</span><br><span class="line">            count--;</span><br><span class="line">            V oldValue &#x3D; e.value;</span><br><span class="line">            e.value &#x3D; null;</span><br><span class="line">            return oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="rehash方法"><a href="#rehash方法" class="headerlink" title="rehash方法"></a>rehash方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">protected void rehash() &#123;</span><br><span class="line">    int oldCapacity &#x3D; table.length;</span><br><span class="line">    Entry&lt;?,?&gt;[] oldMap &#x3D; table;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;扩容扩为原来的两倍+1</span><br><span class="line">    int newCapacity &#x3D; (oldCapacity &lt;&lt; 1) + 1;</span><br><span class="line">    &#x2F;&#x2F;判断是否超过最大容量</span><br><span class="line">    if (newCapacity - MAX_ARRAY_SIZE &gt; 0) &#123;</span><br><span class="line">        if (oldCapacity &#x3D;&#x3D; MAX_ARRAY_SIZE)</span><br><span class="line">            &#x2F;&#x2F; Keep running with MAX_ARRAY_SIZE buckets</span><br><span class="line">            return;</span><br><span class="line">        newCapacity &#x3D; MAX_ARRAY_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line">    Entry&lt;?,?&gt;[] newMap &#x3D; new Entry&lt;?,?&gt;[newCapacity];</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line">    &#x2F;&#x2F;计算下一次 rehash 的阈值</span><br><span class="line">    threshold &#x3D; (int)Math.min(newCapacity * loadFactor, MAX_ARRA Y_SIZE + 1);</span><br><span class="line">    table &#x3D; newMap;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;把旧哈希表的键值对重新哈希到新哈希表中去</span><br><span class="line">    for (int i &#x3D; oldCapacity ; i-- &gt; 0 ;) &#123;</span><br><span class="line">        for (Entry&lt;K,V&gt; old &#x3D; (Entry&lt;K,V&gt;)oldMap[i] ; old !&#x3D; null ; ) &#123;</span><br><span class="line">            Entry&lt;K,V&gt; e &#x3D; old;</span><br><span class="line">            old &#x3D; old.next;</span><br><span class="line"></span><br><span class="line">            int index &#x3D; (e.hash &amp; 0x7FFFFFFF) % newCapacity;</span><br><span class="line">            e.next &#x3D; (Entry&lt;K,V&gt;)newMap[index];</span><br><span class="line">            newMap[index] &#x3D; e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Hashtable 的 rehash 方法相当于 HashMap 的 resize 方法。跟 HashMap 那种巧妙的 rehash 方式相比，Hashtable 的 rehash 过程需要对每个键值对都重新计算哈希值，而比起异或 和与操作，取模是一个非常耗时的操作，所以这也是导致效率较低的原因之一。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一-概述&quot;&gt;&lt;a href=&quot;#一-概述&quot; class=&quot;headerlink&quot; title=&quot;一 概述&quot;&gt;&lt;/a&gt;一 概述&lt;/h1&gt;&lt;p&gt;深入理解Java集合中的源代码，可以帮助我们更好地了解大佬的意图，规避不必要的bug。&lt;/p&gt;
&lt;p&gt;Hashtable 可以说已经具有一定的历史了，现在也很少使用到 Hashtable 了，更多的是使 用 HashMap 或 ConcurrentHashMap。HashTable 是一个线程安全的哈希表，它通过使用 synchronized 关键字来对方法进行加锁，从而保证了线程安全。但这也导致了在单线程 环境中效率低下等问题。Hashtable 与 HashMap 不同，它不允许插入 null 值和 null 键。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://JavaSsun.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://JavaSsun.github.io/tags/Java/"/>
    
      <category term="源码解析" scheme="http://JavaSsun.github.io/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>6-GoAccess实现可视化并实时监控access日志</title>
    <link href="http://javassun.github.io/2019/11/21/6-GoAccess%E5%AE%9E%E7%8E%B0%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B9%B6%E5%AE%9E%E6%97%B6%E7%9B%91%E6%8E%A7access%E6%97%A5%E5%BF%97/"/>
    <id>http://javassun.github.io/2019/11/21/6-GoAccess%E5%AE%9E%E7%8E%B0%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B9%B6%E5%AE%9E%E6%97%B6%E7%9B%91%E6%8E%A7access%E6%97%A5%E5%BF%97/</id>
    <published>2019-11-21T12:00:25.000Z</published>
    <updated>2020-04-16T07:00:20.413Z</updated>
    
    <content type="html"><![CDATA[<p>Author: haoransun<br>Wechat: SHR—97<br><font color="red">学习来源：极客时间-Nginx核心知识100讲，本人购买课程后依据视频讲解汇总成个人见解。</font></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>access日志</strong> 记录了用户非常重要的信息，可用它来分析、定位问题，也可用它来分析用户的运营数据，但是如果想要实时分析access 日志，相对比较困难。</p><p><strong>GoAccess</strong> 这款工具以图形化的方式通过<strong>web socket</strong>协议，实时的将access日志的变迁反应到浏览器中。方便我们分析问题。</p><a id="more"></a><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p><a href="https://goaccess.io/" target="_blank" rel="noopener">GoAccess</a> 是这个工具的站点。如图所示：<br><img src="/2019/11/21/6-GoAccess%E5%AE%9E%E7%8E%B0%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B9%B6%E5%AE%9E%E6%97%B6%E7%9B%91%E6%8E%A7access%E6%97%A5%E5%BF%97/629f3358-d5c5-4889-b24f-bc4e6a87c46b.png" alt></p><p>现在先看一下之前静态web资源服务器所产生的access log日志格式<br><img src="/2019/11/21/6-GoAccess%E5%AE%9E%E7%8E%B0%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B9%B6%E5%AE%9E%E6%97%B6%E7%9B%91%E6%8E%A7access%E6%97%A5%E5%BF%97/9f36080a-71ba-4c59-82e8-226d730d87a1.png" alt></p><p>现在打开 GoAccess中的 <strong>Get started</strong>快速开始页面，依据文档下载安装。</p><p><img src="/2019/11/21/6-GoAccess%E5%AE%9E%E7%8E%B0%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B9%B6%E5%AE%9E%E6%97%B6%E7%9B%91%E6%8E%A7access%E6%97%A5%E5%BF%97/615f6899-491f-4f74-a245-feb5f3a9c0b3.png" alt></p><p>出现此错误</p><p>下载依赖包即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y GeoIP-devel</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;github.com&#x2F;maxmind&#x2F;geoip-api-c&#x2F;releases&#x2F;download&#x2F;v1.6.11&#x2F;GeoIP-1.6.11.tar.gz</span><br><span class="line">tar -zxvf GeoIP-1.16.11.tar.gz</span><br><span class="line">cd GeoIP-1.16.11</span><br><span class="line">.&#x2F;configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>出现错误：<br>configure: error: *** Missing development libraries for ncursesw</p><p>解决方法：<br>要使用–enable-utf8，你需要安装ncursesw，下面是安装命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@haoransun goaccess]# sudo yum install ncurses-devel</span><br></pre></td></tr></table></figure><p>安装成功后：<br><img src="/2019/11/21/6-GoAccess%E5%AE%9E%E7%8E%B0%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B9%B6%E5%AE%9E%E6%97%B6%E7%9B%91%E6%8E%A7access%E6%97%A5%E5%BF%97/dae8664f-26c8-45d9-b7ae-957833eae1fa.png" alt></p><p>当Nginx所用的access log 的配置没有发生变化时，我们可以使用这种方法：</p><p><img src="/2019/11/21/6-GoAccess%E5%AE%9E%E7%8E%B0%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B9%B6%E5%AE%9E%E6%97%B6%E7%9B%91%E6%8E%A7access%E6%97%A5%E5%BF%97/64b3542d-a4d5-41d4-b8bb-718265f77c69.png" alt></p><p>也就是说，Nginx的 access log非常灵活，我们可以天添加各种不同的各模块的内置变量，</p><p>goaccess 会使用 -o 这个参数去生成一个新的report.html文件，将当前的access.log日志文件内容以 html图表的形式展示出来。</p><p>当 accss.log 变迁的时候，goaccess 会新启一个 web socket进程 通过端口的方式将新的 access.log中的内容推送到我们的客户端。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@haoransun logs]# pwd</span><br><span class="line">&#x2F;home&#x2F;geek&#x2F;nginx&#x2F;logs</span><br><span class="line">[root@haoransun logs]# goaccess host.access.log -o ..&#x2F;html&#x2F;report.html --real-time-html --time-format&#x3D;&#39; %H:%M:%S&#39; --date-format&#x3D;&#39;%d%b%Y&#39; --log-format&#x3D;COMBINED</span><br><span class="line">WebSocket服务器已准备接收来自客户的连接</span><br></pre></td></tr></table></figure><p>首先制定了 access.log的名字 ， 然后会把它输出到 report.html这个文件中，–real-time-html 即实时更新这个HTML页面，时间、日期、日志格式都已经指定好了。</p><p><img src="/2019/11/21/6-GoAccess%E5%AE%9E%E7%8E%B0%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B9%B6%E5%AE%9E%E6%97%B6%E7%9B%91%E6%8E%A7access%E6%97%A5%E5%BF%97/4bfbe716-0e7f-4e7b-b1c6-dcc2ca97c202.png" alt></p><p>就是说已经打开了一个新的 web socket</p><p>当我们访问这个report.html页面时，会向这个进程发起连接，由这个进程向我们推送日志的最新变更。</p><p>接下来我们要在 nginx配置文件中搭载如下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">       listen      8080;</span><br><span class="line">       # server_name  localhost;</span><br><span class="line"></span><br><span class="line">       #charset koi8-r;</span><br><span class="line"></span><br><span class="line">       access_log  logs&#x2F;host.access.log  main;</span><br><span class="line">       # 当我们访问 &#x2F;report.html时，需要用 alias 把它重定向到 我们刚刚访问的 report.html中。</span><br><span class="line">       location &#x2F;report.html&#123;</span><br><span class="line">           alias &#x2F;home&#x2F;geek&#x2F;nginx&#x2F;html&#x2F;report.html;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Author: haoransun&lt;br&gt;Wechat: SHR—97&lt;br&gt;&lt;font color=&quot;red&quot;&gt;学习来源：极客时间-Nginx核心知识100讲，本人购买课程后依据视频讲解汇总成个人见解。&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;access日志&lt;/strong&gt; 记录了用户非常重要的信息，可用它来分析、定位问题，也可用它来分析用户的运营数据，但是如果想要实时分析access 日志，相对比较困难。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GoAccess&lt;/strong&gt; 这款工具以图形化的方式通过&lt;strong&gt;web socket&lt;/strong&gt;协议，实时的将access日志的变迁反应到浏览器中。方便我们分析问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Nginx" scheme="http://JavaSsun.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="http://JavaSsun.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>HashMap实现原理_探险</title>
    <link href="http://javassun.github.io/2019/11/20/HashMap%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86-%E6%8E%A2%E9%99%A9/"/>
    <id>http://javassun.github.io/2019/11/20/HashMap%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86-%E6%8E%A2%E9%99%A9/</id>
    <published>2019-11-20T12:05:10.000Z</published>
    <updated>2020-04-16T10:05:36.418Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-概述"><a href="#一-概述" class="headerlink" title="一 概述"></a>一 概述</h1><p>深入理解Java集合中的源代码，可以帮助我们更好地了解大佬的意图，规避不必要的bug。</p><p>源码中的一段注释，提取关键信息<br>Hash table based implementation of the Map interface. This implementation provides all of the optional map operations, and permits null values and the null key. (The HashMap class is roughly equivalent to Hashtable, except that it is unsynchronized and permits nulls.) This class makes no guarantees as to the order of the map; in particular, it does not guarantee that the order will remain constant over time.</p><p>大致意思是：这个哈希表是基于 Map 接口的实现的，它允许 null 值和 null 键，它不是线程同步的，同时也不保证有序。</p><a id="more"></a><p>This implementation provides constant-time performance for the basic operations (get and put), assuming the hash function disperses the elements properly among the buckets. Iteration over collection views requires time proportional to the “capacity” of the HashMap instance (the number of buckets) plus its size (the number of key-value mappings). Thus, it’s very important not to set the initial capacity too high (or the load factor too low) if iteration performance is important.  An instance of HashMap has two parameters that affect its performance: initial capacity and load factor. The capacity is the number of buckets in the hash table, and the initial capacity is simply the capacity at the time the hash table is created. The load factor is a measure of how full the hash table is allowed to get before its capacity is automatically increased. When the number of entries in the hash table exceeds the product of the load factor and the current capacity, the hash table is rehashed (that is, internal data structures are rebuilt) so that the hash table has approximately twice the number of buckets.</p><p>大意：讲的是 Map 的这种实现方式为 get （取）和 put（存）带来了比较好的性能。但是如果涉及到大量的遍历操作的话，就 尽量不要把 capacity 设置得太高（或 load factor 设置得太低），否则会严重降低遍历的效率。</p><p>影响 HashMap 性能的两个重要参数：“initial capacity”（初始化容量）和”load factor“（负载因子）。简单来说，容量就是哈希表桶的个数，负载因子就是键值对 个数与哈希表长度的一个比值，当比值超过负载因子之后，HashMap 就会进行 rehash 操作来进行扩容。</p><p>HashMap 的大致结构如下图所示，其中哈希表是一个数组，我们经常把数组中的每 一个节点称为一个桶，哈希表中的每个节点都用来存储一个键值对。在插入元素时， 如果发生冲突（即多个键值对映射到同一个桶上）的话，就会通过链表的形式来解 决冲突。因为一个桶上可能存在多个键值对，所以在查找的时候，会先通过 key 的<br>哈希值先定位到桶，再遍历桶上的所有键值对，找出 key 相等的键值对，从而来获 取 value。</p><p><img src="/2019/11/20/HashMap%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86-%E6%8E%A2%E9%99%A9/0f32057b-e876-449b-99ec-fbcf3b3bbcce.png" alt></p><h1 id="二-属性"><a href="#二-属性" class="headerlink" title="二 属性"></a>二 属性</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;默认的初始容量为 16</span><br><span class="line">static final int DEFAULT_INITIAL_CAPACITY &#x3D; 1 &lt;&lt; 4;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;最大的容量上限为 2^30</span><br><span class="line">static final int MAXIMUM_CAPACITY &#x3D; 1 &lt;&lt; 30;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;默认的负载因子为 0.75 </span><br><span class="line">static final float DEFAULT_LOAD_FACTOR &#x3D; 0.75f;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;变成树型结构的临界值为 8</span><br><span class="line">static final int TREEIFY_THRESHOLD &#x3D; 8;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;恢复链式结构的临界值为 6</span><br><span class="line">static final int UNTREEIFY_THRESHOLD &#x3D; 6;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;哈希表</span><br><span class="line">transient Node&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;哈希表中键值对的个数</span><br><span class="line">transient int size;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;哈希表被修改的次数</span><br><span class="line">transient int modCount;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;它是通过 capacity*load factor 计算出来的，当 size 到达这个值时，</span><br><span class="line">就会进行扩容操作</span><br><span class="line">int threshold;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;负载因子</span><br><span class="line">final float loadFactor;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;当哈希表的大小超过这个阈值，才会把链式结构转化成树型结构，否则仅采</span><br><span class="line">取扩容来尝试减少冲突</span><br><span class="line">static final int MIN_TREEIFY_CAPACITY &#x3D; 64;</span><br></pre></td></tr></table></figure><p>Node 类的定义，它是 HashMap 中的一个静态内部类，哈希表中的每一个 节点都是 Node 类型。我们可以看到，Node 类中有 4 个属性，其中除了 key 和 value 之外，还有 hash 和 next 两个属性。hash 是用来存储 key 的哈希值的，next 是在构建链表时用来指向后继节点的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;</span><br><span class="line">    final int hash;</span><br><span class="line">    final K key;</span><br><span class="line">    V value;</span><br><span class="line">    Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">    Node(int hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">        this.hash &#x3D; hash;</span><br><span class="line">        this.key &#x3D; key;</span><br><span class="line">        this.value &#x3D; value;</span><br><span class="line">        this.next &#x3D; next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public final K getKey()        &#123; return key; &#125;</span><br><span class="line">    public final V getValue()      &#123; return value; &#125;</span><br><span class="line">    public final String toString() &#123; return key + &quot;&#x3D;&quot; + valu e; &#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public final int hashCode() &#123;</span><br><span class="line">        return Objects.hashCode(key) ^ Objects.hashCode(val ue); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public final V setValue(V newValue) &#123;</span><br><span class="line">        V oldValue &#x3D; value;</span><br><span class="line">        value &#x3D; newValue;</span><br><span class="line">        return oldValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public final boolean equals(Object o) &#123;</span><br><span class="line">        if (o &#x3D;&#x3D; this)</span><br><span class="line">            return true;</span><br><span class="line">        if (o instanceof Map.Entry) &#123;</span><br><span class="line">            Map.Entry&lt;?,?&gt; e &#x3D; (Map.Entry&lt;?,?&gt;)o;</span><br><span class="line">            if (Objects.equals(key, e.getKey()) &amp;&amp;</span><br><span class="line">                Objects.equals(value, e.getValue()))</span><br><span class="line">                return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三方法"><a href="#三方法" class="headerlink" title="三方法"></a>三方法</h1><h2 id="1-get方法"><a href="#1-get方法" class="headerlink" title="1 get方法"></a>1 get方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;get 方法主要调用的是 getNode 方法，所以重点要看 getNode 方法的</span><br><span class="line">实现</span><br><span class="line">    public V get(Object key) &#123;</span><br><span class="line">        Node&lt;K,V&gt; e;</span><br><span class="line">        return (e &#x3D; getNode(hash(key), key)) &#x3D;&#x3D; null ? null : e.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    final Node&lt;K,V&gt; getNode(int hash, Object key) &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; int n; K k;</span><br><span class="line">        &#x2F;&#x2F;如果哈希表不为空 &amp;&amp; key 对应的桶上不为空</span><br><span class="line">        if ((tab &#x3D; table) !&#x3D; null &amp;&amp; (n &#x3D; tab.length) &gt; 0 &amp;&amp;</span><br><span class="line">            (first &#x3D; tab[(n - 1) &amp; hash]) !&#x3D; null) &#123;</span><br><span class="line">            &#x2F;&#x2F;是否直接命中</span><br><span class="line">            if (first.hash &#x3D;&#x3D; hash &amp;&amp; &#x2F;&#x2F; always check first n ode </span><br><span class="line">                ((k &#x3D; first.key) &#x3D;&#x3D; key || (key !&#x3D; null &amp;&amp; ke y.equals(k))))</span><br><span class="line">                return first;</span><br><span class="line">            &#x2F;&#x2F;判断是否有后续节点 </span><br><span class="line">            if ((e &#x3D; first.next) !&#x3D; null) &#123;</span><br><span class="line">                &#x2F;&#x2F;如果当前的桶是采用红黑树处理冲突，则调用红黑树的 get 方法去获取节点</span><br><span class="line">                if (first instanceof TreeNode)</span><br><span class="line">                    return ((TreeNode&lt;K,V&gt;)first).getTreeNode (hash, key);</span><br><span class="line">                &#x2F;&#x2F;不是红黑树的话，那就是传统的链式结构了，通过循环的方法判断链中是否存在该 key</span><br><span class="line">                do &#123;</span><br><span class="line">                    if (e.hash &#x3D;&#x3D; hash &amp;&amp;</span><br><span class="line">                        ((k &#x3D; e.key) &#x3D;&#x3D; key || (key !&#x3D; null &amp;&amp; key.equals(k))))</span><br><span class="line">                        return e;</span><br><span class="line">                &#125; while ((e &#x3D; e.next) !&#x3D; null);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>实现步骤大致如下： </p><ol><li>通过 hash 值获取该 key 映射到的桶。</li><li>桶上的 key 就是要查找的 key，则直接命中。</li><li>桶上的 key 不是要查找的 key，则查看后续节点：<br>（1）如果后续节点是树节点，通过调用树的方法查找该 key。<br>（2）如果后续节点是链式节点，则通过循环遍历链查找该 key。</li></ol><h2 id="2-put方法"><a href="#2-put方法" class="headerlink" title="2 put方法"></a>2 put方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;put 方法的具体实现也是在 putVal 方法中，所以我们重点看下面的 putVal 方法</span><br><span class="line">   public V put(K key, V value) &#123;</span><br><span class="line">       return putVal(hash(key), key, value, false, true);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   final V putVal(int hash, K key, V value, boolean onlyIf Absent,boolean evict) &#123;</span><br><span class="line">       Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i;</span><br><span class="line">       &#x2F;&#x2F;如果哈希表为空，则先创建一个哈希表</span><br><span class="line">       if ((tab &#x3D; table) &#x3D;&#x3D; null || (n &#x3D; tab.length) &#x3D;&#x3D; 0)</span><br><span class="line">           n &#x3D; (tab &#x3D; resize()).length;</span><br><span class="line">       &#x2F;&#x2F;如果当前桶没有碰撞冲突，则直接把键值对插入，完事</span><br><span class="line">       if ((p &#x3D; tab[i &#x3D; (n - 1) &amp; hash]) &#x3D;&#x3D; null)</span><br><span class="line">           tab[i] &#x3D; newNode(hash, key, value, null);</span><br><span class="line">       else &#123;</span><br><span class="line">           Node&lt;K,V&gt; e; K k;</span><br><span class="line">           &#x2F;&#x2F;如果桶上节点的 key 与当前 key 重复，那你就是我要找的节点了</span><br><span class="line">           if (p.hash &#x3D;&#x3D; hash &amp;&amp;((k &#x3D; p.key) &#x3D;&#x3D; key || (key !&#x3D; null &amp;&amp; key.equ als(k))))</span><br><span class="line">               e &#x3D; p;</span><br><span class="line">           &#x2F;&#x2F;如果是采用红黑树的方式处理冲突，则通过红黑树的 putTreeVal 方法去插入这个键值对</span><br><span class="line">           else if (p instanceof TreeNode)</span><br><span class="line">               e &#x3D; ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);</span><br><span class="line">           &#x2F;&#x2F;否则就是传统的链式结构</span><br><span class="line">           else &#123;</span><br><span class="line">               &#x2F;&#x2F;采用循环遍历的方式，判断链中是否有重复的 key</span><br><span class="line">               for (int binCount &#x3D; 0; ; ++binCount) &#123;</span><br><span class="line">                   &#x2F;&#x2F;到了链尾还没找到重复的 key，则说明 HashMap 没有包含该键</span><br><span class="line">                   if ((e &#x3D; p.next) &#x3D;&#x3D; null) &#123;</span><br><span class="line">                       &#x2F;&#x2F;创建一个新节点插入到尾部</span><br><span class="line">                       p.next &#x3D; newNode(hash, key, value, nul l);</span><br><span class="line"></span><br><span class="line">                       &#x2F;&#x2F;如果链的长度大于 TREEIFY_THRESHOLD 这个临界值，则把链变为红黑树</span><br><span class="line">                       if (binCount &gt;&#x3D; TREEIFY_THRESHOLD - 1) &#x2F;&#x2F; -1 for 1st</span><br><span class="line">                           treeifyBin(tab, hash);</span><br><span class="line">                       break;</span><br><span class="line">                   &#125;</span><br><span class="line">                   &#x2F;&#x2F;找到了重复的 key</span><br><span class="line">                   if (e.hash &#x3D;&#x3D; hash</span><br><span class="line">                       ((k &#x3D; e.key) &#x3D;&#x3D; key || (key !&#x3D; null &amp;&amp; key.equals(k))))</span><br><span class="line">                       break;</span><br><span class="line">                   p &#x3D; e;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           &#x2F;&#x2F;这里表示在上面的操作中找到了重复的键，所以这里把该键的值替换为新值</span><br><span class="line">           if (e !&#x3D; null) &#123; &#x2F;&#x2F; existing mapping for key</span><br><span class="line">               V oldValue &#x3D; e.value;</span><br><span class="line">               if (!onlyIfAbsent || oldValue &#x3D;&#x3D; null)</span><br><span class="line">                   e.value &#x3D; value;</span><br><span class="line">               afterNodeAccess(e);</span><br><span class="line">               return oldValue;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       ++modCount;</span><br><span class="line">       &#x2F;&#x2F;判断是否需要进行扩容</span><br><span class="line">       if (++size &gt; threshold)</span><br><span class="line">           resize();</span><br><span class="line">       afterNodeInsertion(evict);</span><br><span class="line">       return null;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>put 方法比较复杂，实现步骤大致如下：</p><ol><li>先通过 hash 值计算出 key 映射到哪个桶。</li><li>如果桶上没有碰撞冲突，则直接插入。</li><li>如果出现碰撞冲突了，则需要处理冲突：<br>（1）如果该桶使用红黑树处理冲突，则调用红黑树的方法插入。<br>（2）否则采用传统的链式方法插入。如果链的长度到达临界值，则把链转变为红 黑树。</li><li>如果桶中存在重复的键，则为该键替换新值。</li><li>如果 size 大于阈值，则进行扩容。</li></ol><h2 id="3-remove方法"><a href="#3-remove方法" class="headerlink" title="3  remove方法"></a>3  remove方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;remove 方法的具体实现在 removeNode 方法中，所以我们重点看下面的 removeNode 方法</span><br><span class="line">public V remove(Object key) &#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    return (e &#x3D; removeNode(hash(key), key, null, false, tru e)) &#x3D;&#x3D; null ?</span><br><span class="line">        null : e.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">final Node&lt;K,V&gt; removeNode(int hash, Object key, Object va lue,</span><br><span class="line">                           boolean matchValue, boolean movabl e) &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, index;</span><br><span class="line">    &#x2F;&#x2F;如果当前 key 映射到的桶不为空</span><br><span class="line">    if ((tab &#x3D; table) !&#x3D; null &amp;&amp; (n &#x3D; tab.length) &gt; 0 &amp;&amp;</span><br><span class="line">        (p &#x3D; tab[index &#x3D; (n - 1) &amp; hash]) !&#x3D; null) &#123;</span><br><span class="line">        Node&lt;K,V&gt; node &#x3D; null, e; K k; V v;</span><br><span class="line">        &#x2F;&#x2F;如果桶上的节点就是要找的 key，则直接命中</span><br><span class="line">        if (p.hash &#x3D;&#x3D; hash &amp;&amp; ((k &#x3D; p.key) &#x3D;&#x3D; key || (key !&#x3D; null &amp;&amp; key.equals(k))))</span><br><span class="line">            node &#x3D; p;</span><br><span class="line">        else if ((e &#x3D; p.next) !&#x3D; null) &#123;</span><br><span class="line">            &#x2F;&#x2F;如果是以红黑树处理冲突，则构建一个树节点</span><br><span class="line">            if (p instanceof TreeNode)</span><br><span class="line">                node &#x3D; ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key);</span><br><span class="line">            &#x2F;&#x2F;如果是以链式的方式处理冲突，则通过遍历链表来寻找节点</span><br><span class="line">            else &#123;</span><br><span class="line">                do &#123;</span><br><span class="line">                    if (e.hash &#x3D;&#x3D; hash &amp;&amp; ((k &#x3D; e.key) &#x3D;&#x3D; key || (key !&#x3D; null &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">                        node &#x3D; e;</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                    p &#x3D; e;</span><br><span class="line">                &#125; while ((e &#x3D; e.next) !&#x3D; null);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;比对找到的 key 的 value 跟要删除的是否匹配</span><br><span class="line">        if (node !&#x3D; null &amp;&amp; (!matchValue || (v &#x3D; node.value) &#x3D;&#x3D; value ||</span><br><span class="line">                             (value !&#x3D; null &amp;&amp; value.equals (v)))) &#123;</span><br><span class="line">            &#x2F;&#x2F;通过调用红黑树的方法来删除节点</span><br><span class="line">            if (node instanceof TreeNode)</span><br><span class="line">                ((TreeNode&lt;K,V&gt;)node).removeTreeNode(this, t ab, movable);</span><br><span class="line">            &#x2F;&#x2F;使用链表的操作来删除节点</span><br><span class="line">            else if (node &#x3D;&#x3D; p)</span><br><span class="line">                tab[index] &#x3D; node.next;</span><br><span class="line">            else</span><br><span class="line">                p.next &#x3D; node.next;</span><br><span class="line">            ++modCount;</span><br><span class="line">            --size;</span><br><span class="line">            afterNodeRemoval(node);</span><br><span class="line">            return node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-Hash方法"><a href="#5-Hash方法" class="headerlink" title="5 Hash方法"></a>5 Hash方法</h2><p>在get方法和put方法中都需要先计算key映射到哪个桶上，然后才进行之后的操作， 计算的主要代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(n - 1) &amp; hash</span><br></pre></td></tr></table></figure><p>上面代码中的 n 指的是哈希表的大小，hash 指的是 key 的哈希值，hash 是通过下面 这个方法计算出来的，采用了二次哈希的方式，其中 key 的 hashCode 方法是一个 native 方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">static final int hash(Object key) &#123;</span><br><span class="line">    int h;</span><br><span class="line">    return (key &#x3D;&#x3D; null) ? 0 : (h &#x3D; key.hashCode()) ^ (h &gt;&gt;&gt; 16);</span><br></pre></td></tr></table></figure><p>这个 hash 方法先通过 key 的 hashCode 方法获取一个哈希值，再拿这个哈希值与它 的高 16 位的哈希值做一个异或操作来得到最后的哈希值，计算过程可以参考下图。 为啥要这样做呢？注释中是这样解释的：如果当 n 很小，假设为 64 的话，那么 n-1 即为 63（0x111111），这样的值跟 hashCode()直接做与操作，实际上只使用了哈希 值的后 6 位。如果当哈希值的高位变化很大，低位变化很小，这样就很容易造成冲 突了，所以这里把高低位都利用起来，从而解决了这个问题。</p><p><img src="/2019/11/20/HashMap%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86-%E6%8E%A2%E9%99%A9/0dfe17b4-be06-48e2-90e1-0383e587a440.jpg" alt></p><p>正是因为与的这个操作，决定了 HashMap 的大小只能是 2 的幂次方，想一想，如果 不是2的幂次方，会发生什么事情？即使你在创建HashMap的时候指定了初始大小， HashMap 在构建的时候也会调用下面这个方法来调整大小：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">static final int tableSizeFor(int cap) &#123;</span><br><span class="line">    int n &#x3D; cap - 1;</span><br><span class="line">    n |&#x3D; n &gt;&gt;&gt; 1;</span><br><span class="line">    n |&#x3D; n &gt;&gt;&gt; 2;</span><br><span class="line">    n |&#x3D; n &gt;&gt;&gt; 4;</span><br><span class="line">    n |&#x3D; n &gt;&gt;&gt; 8;</span><br><span class="line">    n |&#x3D; n &gt;&gt;&gt; 16;</span><br><span class="line">    return (n &lt; 0) ? 1 : (n &gt;&#x3D; MAXIMUM_CAPACITY) ? MAXIMUM_C APACITY : n + 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法的作用看起来可能不是很直观，它的实际作用就是把 cap 变成第一个大于 等于 2 的幂次方的数。例如，16 还是 16，13 就会调整为 16，17 就会调整为 32。</p><h2 id="5-resize方法"><a href="#5-resize方法" class="headerlink" title="5 resize方法"></a>5 resize方法</h2><p>HashMap 在进行扩容时，使用的 rehash 方式非常巧妙，因为每次扩容都是翻倍，与 原来计算（n-1）&amp;hash 的结果相比，只是多了一个 bit 位，所以节点要么就在原来 的位置，要么就被分配到“原位置+旧容量”这个位置。</p><p>例如，原来的容量为 32，那么应该拿 hash 跟 31（0x11111）做与操作；在扩容扩到 了 64 的容量之后，应该拿 hash 跟 63（0x111111）做与操作。新容量跟原来相比只 是多了一个 bit 位，假设原来的位置在 23，那么当新增的那个 bit 位的计算结果为 0 时，那么该节点还是在 23；相反，计算结果为 1 时，则该节点会被分配到 23+31 的 桶上。</p><p>正是因为这样巧妙的 rehash 方式，保证了 rehash 之后每个桶上的节点数必定小于等 于原来桶上的节点数，即保证了 rehash 之后不会出现更严重的冲突。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">final Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] oldTab &#x3D; table;</span><br><span class="line">    int oldCap &#x3D; (oldTab &#x3D;&#x3D; null) ? 0 : oldTab.length;</span><br><span class="line">    int oldThr &#x3D; threshold;</span><br><span class="line">    int newCap, newThr &#x3D; 0;</span><br><span class="line">    &#x2F;&#x2F;计算扩容后的大小</span><br><span class="line">    if (oldCap &gt; 0) &#123;</span><br><span class="line">        &#x2F;&#x2F;如果当前容量超过最大容量，则无法进行扩容</span><br><span class="line">        if (oldCap &gt;&#x3D; MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold &#x3D; Integer.MAX_VALUE;</span><br><span class="line">            return oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;没超过最大值则扩为原来的两倍</span><br><span class="line">        else if ((newCap &#x3D; oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY &amp; &amp;</span><br><span class="line">                 oldCap &gt;&#x3D; DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            newThr &#x3D; oldThr &lt;&lt; 1; &#x2F;&#x2F; double threshold</span><br><span class="line">     &#125;</span><br><span class="line">    else if (oldThr &gt; 0) &#x2F;&#x2F; initial capacity was placed in t hreshold</span><br><span class="line">        newCap &#x3D; oldThr;</span><br><span class="line">    else &#123;               &#x2F;&#x2F; zero initial threshold signifies using defaults</span><br><span class="line">        newCap &#x3D; DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        newThr &#x3D; (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIA L_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    if (newThr &#x3D;&#x3D; 0) &#123;</span><br><span class="line">        float ft &#x3D; (float)newCap * loadFactor;</span><br><span class="line">        newThr &#x3D; (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (float)M AXIMUM_CAPACITY ?</span><br><span class="line">                  (int)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;新的 resize 阈值</span><br><span class="line">    threshold &#x3D; newThr;</span><br><span class="line">    &#x2F;&#x2F;创建新的哈希表</span><br><span class="line">    @SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span><br><span class="line">        Node&lt;K,V&gt;[] newTab &#x3D; (Node&lt;K,V&gt;[])new Node[newCap];</span><br><span class="line">    table &#x3D; newTab;</span><br><span class="line">    if (oldTab !&#x3D; null) &#123;</span><br><span class="line">    &#x2F;&#x2F;遍历旧哈希表的每个桶，重新计算桶里元素的新位置</span><br><span class="line">        for (int j &#x3D; 0; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            if ((e &#x3D; oldTab[j]) !&#x3D; null) &#123;</span><br><span class="line">                oldTab[j] &#x3D; null;</span><br><span class="line">                &#x2F;&#x2F;如果桶上只有一个键值对，则直接插入</span><br><span class="line">                if (e.next &#x3D;&#x3D; null)</span><br><span class="line">                    newTab[e.hash &amp; (newCap - 1)] &#x3D; e;</span><br><span class="line">                &#x2F;&#x2F;如果是通过红黑树来处理冲突的，则调用相关方法把树分</span><br><span class="line">离开</span><br><span class="line">                else if (e instanceof TreeNode)</span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(this, newTab, j, oldCap);</span><br><span class="line">                &#x2F;&#x2F;如果采用链式处理冲突 </span><br><span class="line">                else &#123; &#x2F;&#x2F; preserve order</span><br><span class="line">                    Node&lt;K,V&gt; loHead &#x3D; null, loTail &#x3D; null;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead &#x3D; null, hiTail &#x3D; null;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    &#x2F;&#x2F;通过上面讲的方法来计算节点的新位置</span><br><span class="line">                    do &#123;</span><br><span class="line">                        next &#x3D; e.next;</span><br><span class="line">                        if ((e.hash &amp; oldCap) &#x3D;&#x3D; 0) &#123;</span><br><span class="line">                            if (loTail &#x3D;&#x3D; null)</span><br><span class="line">                                loHead &#x3D; e;</span><br><span class="line">                            else</span><br><span class="line">                                loTail.next &#x3D; e;</span><br><span class="line">                            loTail &#x3D; e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        else &#123;</span><br><span class="line">                            if (hiTail &#x3D;&#x3D; null)</span><br><span class="line">                                hiHead &#x3D; e;</span><br><span class="line">                            else</span><br><span class="line">                                hiTail.next &#x3D; e;</span><br><span class="line">                            hiTail &#x3D; e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; while ((e &#x3D; next) !&#x3D; null);</span><br><span class="line">                    if (loTail !&#x3D; null) &#123;</span><br><span class="line">                        loTail.next &#x3D; null;</span><br><span class="line">                        newTab[j] &#x3D; loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (hiTail !&#x3D; null) &#123;</span><br><span class="line">                        hiTail.next &#x3D; null;</span><br><span class="line">                        newTab[j + oldCap] &#x3D; hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里有一个需要注意的地方，有些文章指出当哈希表的桶占用超过阈值时就进行 扩容，这是不对的；实际上是当哈希表中的<strong>键值对个数超过阈值</strong>时，才进行扩容的.</p><h1 id="四-总结"><a href="#四-总结" class="headerlink" title="四 总结"></a>四 总结</h1><p>通过红黑树的方式来处理哈希冲突是我第一次看见！学过哈希，学过红黑树，从来没有想过两个可以结合到一起这么用，或许这就是大佬吧！！！</p><p>按照原来的拉链法来解决冲突，如果一个桶上的冲突很严重的话，是会导致哈希表 的效率降低至 O（n），而通过红黑树的方式，可以把效率改进至 O（logn）。相比 链式结构的节点，树型结构的节点会占用比较多的空间，所以这是一种以空间换时间的改进方式。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一-概述&quot;&gt;&lt;a href=&quot;#一-概述&quot; class=&quot;headerlink&quot; title=&quot;一 概述&quot;&gt;&lt;/a&gt;一 概述&lt;/h1&gt;&lt;p&gt;深入理解Java集合中的源代码，可以帮助我们更好地了解大佬的意图，规避不必要的bug。&lt;/p&gt;
&lt;p&gt;源码中的一段注释，提取关键信息&lt;br&gt;Hash table based implementation of the Map interface. This implementation provides all of the optional map operations, and permits null values and the null key. (The HashMap class is roughly equivalent to Hashtable, except that it is unsynchronized and permits nulls.) This class makes no guarantees as to the order of the map; in particular, it does not guarantee that the order will remain constant over time.&lt;/p&gt;
&lt;p&gt;大致意思是：这个哈希表是基于 Map 接口的实现的，它允许 null 值和 null 键，它不是线程同步的，同时也不保证有序。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://JavaSsun.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://JavaSsun.github.io/tags/Java/"/>
    
      <category term="源码解析" scheme="http://JavaSsun.github.io/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>8-Nginx配置文件简易解析</title>
    <link href="http://javassun.github.io/2019/11/20/8-Nginx%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%AE%80%E6%98%93%E8%A7%A3%E6%9E%90/"/>
    <id>http://javassun.github.io/2019/11/20/8-Nginx%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%AE%80%E6%98%93%E8%A7%A3%E6%9E%90/</id>
    <published>2019-11-20T10:03:05.000Z</published>
    <updated>2020-04-16T06:40:32.855Z</updated>
    
    <content type="html"><![CDATA[<p>Author: haoransun<br>Wechat: SHR—97<br><font color="red">学习来源：极客时间-Nginx核心知识100讲，本人购买课程后依据视频讲解汇总成个人见解。</font></p><p><img src="/2019/11/20/8-Nginx%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%AE%80%E6%98%93%E8%A7%A3%E6%9E%90/0ad1a503df198bdb026ce7e8d83f53b9.png" alt>)<img src="/2019/11/20/8-Nginx%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%AE%80%E6%98%93%E8%A7%A3%E6%9E%90/d1820db3ef58dac396c152bf3d460f27.png" alt>)<img src="/2019/11/20/8-Nginx%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%AE%80%E6%98%93%E8%A7%A3%E6%9E%90/6432890dbc992690f2068620d9ee7951.png" alt></p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line">#运行用户</span><br><span class="line">user nobody;</span><br><span class="line">#启动进程,通常设置成和cpu的数量相等</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#全局错误日志及PID文件</span><br><span class="line">#error_log  logs&#x2F;error.log;</span><br><span class="line">#error_log  logs&#x2F;error.log  notice;</span><br><span class="line">#error_log  logs&#x2F;error.log  info;</span><br><span class="line"></span><br><span class="line">#pid        logs&#x2F;nginx.pid;</span><br><span class="line"></span><br><span class="line">#工作模式及连接数上限</span><br><span class="line">events &#123;</span><br><span class="line">    #epoll是多路复用IO(I&#x2F;O Multiplexing)中的一种方式,</span><br><span class="line">    #仅用于linux2.6以上内核,可以大大提高nginx的性能</span><br><span class="line">    use   epoll; </span><br><span class="line"></span><br><span class="line">    #单个后台worker process进程的最大并发链接数    </span><br><span class="line">    worker_connections  1024;</span><br><span class="line"></span><br><span class="line">    # 并发总数是 worker_processes 和 worker_connections 的乘积</span><br><span class="line">    # nginx作为http服务器的时候</span><br><span class="line"># max_clients &#x3D; worker_processes * worker_connections</span><br><span class="line">    # nginx作为反向代理服务器的时候：</span><br><span class="line">#max_clients &#x3D; worker_processes * worker_connections &#x2F; 4  </span><br><span class="line">    # 为什么上面反向代理要除以4，应该说是一个经验值</span><br><span class="line">    # 根据以上条件，正常情况下的Nginx Server可以应付的最大连接数为：4 * 8000 &#x3D; 32000</span><br><span class="line">    # worker_connections 值的设置跟物理内存大小有关</span><br><span class="line">    # 因为并发受IO约束，max_clients的值须小于系统可以打开的最大文件数</span><br><span class="line">    # 而系统可以打开的最大文件数和内存大小成正比，一般1GB内存的机器上可以打开的文件数大约是10万左右</span><br><span class="line">    # 我们来看看360M内存的VPS可以打开的文件句柄数是多少：</span><br><span class="line">    # $ cat &#x2F;proc&#x2F;sys&#x2F;fs&#x2F;file-max</span><br><span class="line">    # 输出 34336</span><br><span class="line">    # 32000 &lt; 34336，即并发连接总数小于系统可以打开的文件句柄总数，这样就在操作系统可以承受的范围之内</span><br><span class="line">    # 所以，worker_connections 的值需根据 worker_processes 进程数目和系统可以打开的最大文件总数进行适当地进行设置</span><br><span class="line">    # 使得并发总数小于操作系统可以打开的最大文件数目</span><br><span class="line">    # 其实质也就是根据主机的物理CPU和内存进行配置</span><br><span class="line">    # 当然，理论上的并发总数可能会和实际有所偏差，因为主机还有其他的工作进程需要消耗系统资源。</span><br><span class="line">    # ulimit -SHn 65535</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    #设定mime类型,类型由mime.type文件定义</span><br><span class="line">    include    mime.types;</span><br><span class="line">    default_type  application&#x2F;octet-stream;</span><br><span class="line">    #设定日志格式</span><br><span class="line">    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span><br><span class="line">                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span><br><span class="line">                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;</span><br><span class="line"></span><br><span class="line">    access_log  logs&#x2F;access.log  main;</span><br><span class="line"></span><br><span class="line">    #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，</span><br><span class="line">    #对于普通应用，必须设为 on,</span><br><span class="line">    #如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，</span><br><span class="line">    #以平衡磁盘与网络I&#x2F;O处理速度，降低系统的uptime.</span><br><span class="line">    sendfile     on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #连接超时时间</span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    tcp_nodelay     on;</span><br><span class="line"></span><br><span class="line">    #开启gzip压缩</span><br><span class="line">    gzip  on;</span><br><span class="line">    gzip_disable &quot;MSIE [1-6].&quot;;</span><br><span class="line"></span><br><span class="line">    #设定请求缓冲</span><br><span class="line">    client_header_buffer_size    128k;</span><br><span class="line">    large_client_header_buffers  4 128k;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #设定虚拟主机配置</span><br><span class="line">    server &#123;</span><br><span class="line">        #侦听80端口</span><br><span class="line">        listen    80;</span><br><span class="line">        #定义使用 www.nginx.cn访问</span><br><span class="line">        server_name  www.nginx.cn;</span><br><span class="line"></span><br><span class="line">        #定义服务器的默认网站根目录位置</span><br><span class="line">        root html;</span><br><span class="line"></span><br><span class="line">        #设定本虚拟主机的访问日志</span><br><span class="line">        access_log  logs&#x2F;nginx.access.log  main;</span><br><span class="line"></span><br><span class="line">        #默认请求</span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            </span><br><span class="line">            #定义首页索引文件的名称</span><br><span class="line">            index index.php index.html index.htm;   </span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # 定义错误提示页面</span><br><span class="line">        error_page   500 502 503 504 &#x2F;50x.html;</span><br><span class="line">        location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #静态文件，nginx自己处理</span><br><span class="line">        location ~ ^&#x2F;(images|javascript|js|css|flash|media|static)&#x2F; &#123;</span><br><span class="line">            </span><br><span class="line">            #过期30天，静态文件不怎么更新，过期可以设大一点，</span><br><span class="line">            #如果频繁更新，则可以设置得小一点。</span><br><span class="line">            expires 30d;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #PHP 脚本请求全部转发到 FastCGI处理. 使用FastCGI默认配置.</span><br><span class="line">        location ~ .php$ &#123;</span><br><span class="line">            fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">            fastcgi_index index.php;</span><br><span class="line">            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class="line">            include fastcgi_params;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #禁止访问 .htxxx 文件</span><br><span class="line">            location ~ &#x2F;.ht &#123;</span><br><span class="line">            deny all;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Author: haoransun&lt;br&gt;Wechat: SHR—97&lt;br&gt;&lt;font color=&quot;red&quot;&gt;学习来源：极客时间-Nginx核心知识100讲，本人购买课程后依据视频讲解汇总成个人见解。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/11/20/8-Nginx%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%AE%80%E6%98%93%E8%A7%A3%E6%9E%90/0ad1a503df198bdb026ce7e8d83f53b9.png&quot; alt&gt;)&lt;img src=&quot;/2019/11/20/8-Nginx%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%AE%80%E6%98%93%E8%A7%A3%E6%9E%90/d1820db3ef58dac396c152bf3d460f27.png&quot; alt&gt;)&lt;img src=&quot;/2019/11/20/8-Nginx%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%AE%80%E6%98%93%E8%A7%A3%E6%9E%90/6432890dbc992690f2068620d9ee7951.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Nginx" scheme="http://JavaSsun.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="http://JavaSsun.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>LinkList实现原理_探险</title>
    <link href="http://javassun.github.io/2019/11/17/LinkList%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86-%E6%8E%A2%E9%99%A9/"/>
    <id>http://javassun.github.io/2019/11/17/LinkList%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86-%E6%8E%A2%E9%99%A9/</id>
    <published>2019-11-17T11:10:10.000Z</published>
    <updated>2020-04-16T10:05:32.917Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-概述"><a href="#一-概述" class="headerlink" title="一 概述"></a>一 概述</h1><p>深入理解Java集合中的源代码，可以帮助我们更好地了解大佬的意图，规避不必要的bug。</p><p>源码中的一段注释，提取关键信息</p><p>Doubly-linked list implementation of the List and Deque interfaces. Implements all optional list operations, and permits all elements (including null).</p><p>All of the operations perform as could be expected for a doubly-linked list. Operations that index into the list will traverse the list from the beginning or the end, whichever is closer to the specified index.</p><p>Note that this implementation is not synchronized. If multiple threads access a linked list concurrently, and at least one of the threads modifies the list structurally, it must be synchronized externally. (A structural modification is any operation that adds or deletes one or more elements; merely setting the value of an element is not a structural modification.) This is typically accomplished by synchronizing on some object that naturally encapsulates the list</p><p>由上述注释中可以大概得知： LinkedList 是由一个双向链表来实现的，它允许插入所有元素，包括 null，同时，它是线程不同步的。</p><a id="more"></a><p>双向链表结构示意图：</p><p><img src="/2019/11/17/LinkList%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86-%E6%8E%A2%E9%99%A9/01a8426b-2594-400f-8475-71d402cb4550.png" alt><br>双向链表每个结点除了数据域之外，还有一个前指针和后指针，分别指向前驱结点 和后继结点（如果有前驱/后继的话）。另外，双向链表还有一个 first 指针，指向头 节点，和 last 指针，指向尾节点。</p><h1 id="二-属性"><a href="#二-属性" class="headerlink" title="二 属性"></a>二 属性</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;链表的节点个数</span><br><span class="line">transient int size &#x3D; 0;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;指向头节点的指针</span><br><span class="line">transient Node&lt;E&gt; first;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;指向尾节点的指针</span><br><span class="line">transient Node&lt;E&gt; last;</span><br></pre></td></tr></table></figure><p>LinkedList属性非常少，由上述三个属性基本可以知道他是怎么实现的。</p><h1 id="三-方法"><a href="#三-方法" class="headerlink" title="三 方法"></a>三 方法</h1><h2 id="1-节点结构"><a href="#1-节点结构" class="headerlink" title="1 节点结构"></a>1 节点结构</h2><p>Node 是在 LinkedList 里定义的一个静态内部类，它表示链表每个节点的结构，包括一个数据域 item，一个后置指针 next，一个前置指针 prev。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">private static class Node&lt;E&gt; &#123;</span><br><span class="line">    E item;</span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line">    Node&lt;E&gt; prev;</span><br><span class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">        this.item &#x3D; element;</span><br><span class="line">        this.next &#x3D; next;</span><br><span class="line">        this.prev &#x3D; prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-添加元素"><a href="#2-添加元素" class="headerlink" title="2 添加元素"></a>2 添加元素</h2><p>对于链表这种数据结构来说，添加元素的操作无非就是在表头/表尾插入元素，又或 者在指定位置插入元素。因为 LinkedList 有头指针和尾指针，所以在表头或表尾进 行插入元素只需要 O(1) 的时间，而在指定位置插入元素则需要先遍历一下链表， 所以复杂度为 O(n)。</p><p>在表头添加元素的过程如下：</p><p><img src="/2019/11/17/LinkList%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86-%E6%8E%A2%E9%99%A9/04a15498-61a8-41a2-933e-f1da8796db53.png" alt></p><p>当向表头插入一个节点时，很显然当前节点的前驱一定为 null，而后继结点是 first 指针指向的节点，当然还要修改 first 指针指向新的头节点。除此之外，原来的头节<br>点变成了第二个节点，所以还要修改原来头节点的前驱指针，使它指向表头节点， 源码的实现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">private void linkFirst(E e) &#123;</span><br><span class="line">    final Node&lt;E&gt; f &#x3D; first;</span><br><span class="line">    &#x2F;&#x2F;当前节点的前驱指向 null，后继指针原来的头节点</span><br><span class="line">    final Node&lt;E&gt; newNode &#x3D; new Node&lt;&gt;(null, e, f);</span><br><span class="line">    &#x2F;&#x2F;头指针指向新的头节点</span><br><span class="line">    first &#x3D; newNode;</span><br><span class="line">    &#x2F;&#x2F;如果原来有头节点，则更新原来节点的前驱指针，否则更新尾指针</span><br><span class="line">    if (f &#x3D;&#x3D; null)</span><br><span class="line">        last &#x3D; newNode;</span><br><span class="line">    else</span><br><span class="line">        f.prev &#x3D; newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在表尾添加元素跟在表头添加元素大同小异，如图所示：</p><p><img src="/2019/11/17/LinkList%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86-%E6%8E%A2%E9%99%A9/241772bf-9089-4aa3-9636-5d5e59215f01.png" alt></p><p>当向表尾插入一个节点时，很显然当前节点的后继一定为 null，而前驱结点是 last 指针指向的节点，然后还要修改 last 指针指向新的尾节点。此外，还要修改原来尾 节点的后继指针，使它指向新的尾节点，源码的实现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">void linkLast(E e) &#123;</span><br><span class="line">    final Node&lt;E&gt; l &#x3D; last;</span><br><span class="line">    &#x2F;&#x2F;当前节点的前驱指向尾节点，后继指向 null</span><br><span class="line">    final Node&lt;E&gt; newNode &#x3D; new Node&lt;&gt;(l, e, null);</span><br><span class="line">    &#x2F;&#x2F;尾指针指向新的尾节点</span><br><span class="line">    last &#x3D; newNode;</span><br><span class="line">    &#x2F;&#x2F;如果原来有尾节点，则更新原来节点的后继指针，否则更新头指针</span><br><span class="line">    if (l &#x3D;&#x3D; null)</span><br><span class="line">        first &#x3D; newNode;</span><br><span class="line">    else</span><br><span class="line">        l.next &#x3D; newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，在指定节点之前插入，如图所示：</p><p><img src="/2019/11/17/LinkList%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86-%E6%8E%A2%E9%99%A9/ee88f767-33ee-4e11-ba24-bdfb1413ad86.png" alt></p><p>当向指定节点之前插入一个节点时，当前节点的后继为指定节点，而前驱结点为指 定节点的前驱节点。此外，还要修改前驱节点的后继为当前节点，以及后继节点的 前驱为当前节点，源码的实现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">void linkBefore(E e, Node&lt;E&gt; succ) &#123;</span><br><span class="line">    &#x2F;&#x2F; assert succ !&#x3D; null;</span><br><span class="line">    &#x2F;&#x2F;指定节点的前驱</span><br><span class="line">    final Node&lt;E&gt; pred &#x3D; succ.prev;</span><br><span class="line">    &#x2F;&#x2F;当前节点的前驱为指点节点的前驱，后继为指定的节点</span><br><span class="line">    final Node&lt;E&gt; newNode &#x3D; new Node&lt;&gt;(pred, e, succ);</span><br><span class="line">    &#x2F;&#x2F;更新指定节点的前驱为当前节点</span><br><span class="line">    succ.prev &#x3D; newNode;</span><br><span class="line">    &#x2F;&#x2F;更新前驱节点的后继</span><br><span class="line">    if (pred &#x3D;&#x3D; null)</span><br><span class="line">        first &#x3D; newNode;</span><br><span class="line">    else</span><br><span class="line">        pred.next &#x3D; newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-删除元素"><a href="#3-删除元素" class="headerlink" title="3 删除元素"></a>3 删除元素</h2><p>删除操作与添加操作大同小异，例如删除指定节点的过程如下图所示，需要把当前 节点的前驱节点的后继修改为当前节点的后继，以及当前节点的后继结点的前驱修 改为当前节点的前驱</p><p><img src="/2019/11/17/LinkList%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86-%E6%8E%A2%E9%99%A9/571734ca-b358-465a-8bba-0c785301a2c7.png" alt></p><p>删除头节点和尾节点跟删除指定节点非常类似</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;删除表头节点，返回表头元素的值</span><br><span class="line">private E unlinkFirst(Node&lt;E&gt; f) &#123;</span><br><span class="line">    &#x2F;&#x2F; assert f &#x3D;&#x3D; first &amp;&amp; f !&#x3D; null;</span><br><span class="line">    final E element &#x3D; f.item;</span><br><span class="line">    final Node&lt;E&gt; next &#x3D; f.next;</span><br><span class="line">    f.item &#x3D; null;</span><br><span class="line">    f.next &#x3D; null; &#x2F;&#x2F; help GC</span><br><span class="line">    first &#x3D; next; &#x2F;&#x2F;头指针指向后一个节点</span><br><span class="line">    if (next &#x3D;&#x3D; null)</span><br><span class="line">        last &#x3D; null;</span><br><span class="line">    else</span><br><span class="line">        next.prev &#x3D; null; &#x2F;&#x2F;新头节点的前驱为 null</span><br><span class="line">    size--;</span><br><span class="line">    modCount++;</span><br><span class="line">    return element;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;删除表尾节点，返回表尾元素的值</span><br><span class="line">private E unlinkLast(Node&lt;E&gt; l) &#123;</span><br><span class="line">    &#x2F;&#x2F; assert l &#x3D;&#x3D; last &amp;&amp; l !&#x3D; null;</span><br><span class="line">    final E element &#x3D; l.item;</span><br><span class="line">    final Node&lt;E&gt; prev &#x3D; l.prev;</span><br><span class="line">    l.item &#x3D; null;</span><br><span class="line">    l.prev &#x3D; null; &#x2F;&#x2F; help GC</span><br><span class="line">    last &#x3D; prev; &#x2F;&#x2F;尾指针指向前一个节点</span><br><span class="line">    if (prev &#x3D;&#x3D; null)</span><br><span class="line">        first &#x3D; null;</span><br><span class="line">    else</span><br><span class="line">        prev.next &#x3D; null; &#x2F;&#x2F;新尾节点的后继为 null</span><br><span class="line">    size--;</span><br><span class="line">    modCount++;</span><br><span class="line">    return element;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;删除指定节点，返回指定元素的值 </span><br><span class="line">E unlink(Node&lt;E&gt; x) &#123;</span><br><span class="line">    &#x2F;&#x2F; assert x !&#x3D; null;</span><br><span class="line">    final E element &#x3D; x.item;</span><br><span class="line">    final Node&lt;E&gt; next &#x3D; x.next; &#x2F;&#x2F;当前节点的后继</span><br><span class="line">    final Node&lt;E&gt; prev &#x3D; x.prev; &#x2F;&#x2F;当前节点的前驱</span><br><span class="line"></span><br><span class="line">    if (prev &#x3D;&#x3D; null) &#123;</span><br><span class="line">        first &#x3D; next;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        prev.next &#x3D; next; &#x2F;&#x2F;更新前驱节点的后继为当前节点的后继</span><br><span class="line">        x.prev &#x3D; null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (next &#x3D;&#x3D; null) &#123;</span><br><span class="line">        last &#x3D; prev;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        next.prev &#x3D; prev; &#x2F;&#x2F;更新后继节点的前驱为当前节点的前驱</span><br><span class="line">        x.next &#x3D; null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    x.item &#x3D; null;</span><br><span class="line">    size--;</span><br><span class="line">    modCount++;</span><br><span class="line">    return element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-获取元素"><a href="#4-获取元素" class="headerlink" title="4 获取元素"></a>4 获取元素</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;获取表头元素</span><br><span class="line">public E getFirst() &#123;</span><br><span class="line">    final Node&lt;E&gt; f &#x3D; first;</span><br><span class="line">    if (f &#x3D;&#x3D; null)</span><br><span class="line">        throw new NoSuchElementException();</span><br><span class="line">    return f.item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;获取表尾元素 </span><br><span class="line">public E getLast() &#123;</span><br><span class="line">    final Node&lt;E&gt; l &#x3D; last;</span><br><span class="line">    if (l &#x3D;&#x3D; null)</span><br><span class="line">        throw new NoSuchElementException();</span><br><span class="line">    return l.item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;获取指定下标的元素</span><br><span class="line">Node&lt;E&gt; node(int index) &#123;</span><br><span class="line">    &#x2F;&#x2F; assert isElementIndex(index);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;根据下标是否超过链表长度的一半，来选择从头部开始遍历还是从尾部</span><br><span class="line">开始遍历</span><br><span class="line">    if (index &lt; (size &gt;&gt; 1)) &#123;</span><br><span class="line">        Node&lt;E&gt; x &#x3D; first;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; index; i++)</span><br><span class="line">            x &#x3D; x.next;</span><br><span class="line">        return x;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        Node&lt;E&gt; x &#x3D; last;</span><br><span class="line">        for (int i &#x3D; size - 1; i &gt; index; i--)</span><br><span class="line">            x &#x3D; x.prev;</span><br><span class="line">        return x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-常用方法"><a href="#5-常用方法" class="headerlink" title="5 常用方法"></a>5 常用方法</h2><p>上述方法都不是 public 的，LinkedList 是在这些基础的方法进行操作的，下面就来看看可以调用的方法有哪些</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;删除表头元素 </span><br><span class="line">public E removeFirst() &#123;</span><br><span class="line">    final Node&lt;E&gt; f &#x3D; first;</span><br><span class="line">    if (f &#x3D;&#x3D; null)</span><br><span class="line">        throw new NoSuchElementException();</span><br><span class="line">    return unlinkFirst(f);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;删除表尾元素</span><br><span class="line">public E removeLast() &#123;</span><br><span class="line">    final Node&lt;E&gt; l &#x3D; last;</span><br><span class="line">    if (l &#x3D;&#x3D; null)</span><br><span class="line">        throw new NoSuchElementException();</span><br><span class="line">    return unlinkLast(l);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;插入新的表头节点</span><br><span class="line">public void addFirst(E e) &#123;</span><br><span class="line">    linkFirst(e);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;插入新的表尾节点</span><br><span class="line">public void addLast(E e) &#123;</span><br><span class="line">    linkLast(e);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;链表的大小</span><br><span class="line">public int size() &#123;</span><br><span class="line">    return size;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;添加元素到表尾</span><br><span class="line">public boolean add(E e) &#123;</span><br><span class="line">    linkLast(e);</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;删除指定元素</span><br><span class="line">public boolean remove(Object o) &#123;</span><br><span class="line">    if (o &#x3D;&#x3D; null) &#123;</span><br><span class="line">        for (Node&lt;E&gt; x &#x3D; first; x !&#x3D; null; x &#x3D; x.next) &#123;</span><br><span class="line">            if (x.item &#x3D;&#x3D; null) &#123;</span><br><span class="line">                unlink(x);</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        for (Node&lt;E&gt; x &#x3D; first; x !&#x3D; null; x &#x3D; x.next) &#123;</span><br><span class="line">            if (o.equals(x.item)) &#123;</span><br><span class="line">                unlink(x);</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;获取指定下标的元素</span><br><span class="line">public E get(int index) &#123;</span><br><span class="line">    checkElementIndex(index); &#x2F;&#x2F;先检查是否越界</span><br><span class="line">    return node(index).item;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;替换指定下标的值</span><br><span class="line">public E set(int index, E element) &#123;</span><br><span class="line">    checkElementIndex(index);</span><br><span class="line">    Node&lt;E&gt; x &#x3D; node(index);</span><br><span class="line">    E oldVal &#x3D; x.item;</span><br><span class="line">    x.item &#x3D; element;</span><br><span class="line">    return oldVal;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;在指定位置插入节点</span><br><span class="line">public void add(int index, E element) &#123;</span><br><span class="line">    checkPositionIndex(index);</span><br><span class="line">    if (index &#x3D;&#x3D; size)</span><br><span class="line">        linkLast(element);</span><br><span class="line">    else</span><br><span class="line">        linkBefore(element, node(index));</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;删除指定下标的节点</span><br><span class="line">public E remove(int index) &#123;</span><br><span class="line">    checkElementIndex(index);</span><br><span class="line">    return unlink(node(index));</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;获取表头节点的值，表头为空返回 null</span><br><span class="line">public E peek() &#123;</span><br><span class="line">    final Node&lt;E&gt; f &#x3D; first;</span><br><span class="line">    return (f &#x3D;&#x3D; null) ? null : f.item;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;获取表头节点的值，表头为空抛出异常</span><br><span class="line">public E element() &#123;</span><br><span class="line">    return getFirst();</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;获取表头节点的值，并删除表头节点，表头为空返回 null</span><br><span class="line">public E poll() &#123;</span><br><span class="line">    final Node&lt;E&gt; f &#x3D; first;</span><br><span class="line">    return (f &#x3D;&#x3D; null) ? null : unlinkFirst(f);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;添加元素到表头</span><br><span class="line">public void push(E e) &#123;</span><br><span class="line">    addFirst(e);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;删除表头元素</span><br><span class="line">public E pop() &#123;</span><br><span class="line">    return removeFirst();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四-总结"><a href="#四-总结" class="headerlink" title="四 总结"></a>四 总结</h1><p>1、LinkedList 的底层结构是一个带头/尾指针的双向链表，可以快速的对头/尾节点 进行操作。</p><p>2、相比数组，链表的特点就是在指定位置插入和删除元素的效率较高，但是查找的 效率就不如数组那么高了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一-概述&quot;&gt;&lt;a href=&quot;#一-概述&quot; class=&quot;headerlink&quot; title=&quot;一 概述&quot;&gt;&lt;/a&gt;一 概述&lt;/h1&gt;&lt;p&gt;深入理解Java集合中的源代码，可以帮助我们更好地了解大佬的意图，规避不必要的bug。&lt;/p&gt;
&lt;p&gt;源码中的一段注释，提取关键信息&lt;/p&gt;
&lt;p&gt;Doubly-linked list implementation of the List and Deque interfaces. Implements all optional list operations, and permits all elements (including null).&lt;/p&gt;
&lt;p&gt;All of the operations perform as could be expected for a doubly-linked list. Operations that index into the list will traverse the list from the beginning or the end, whichever is closer to the specified index.&lt;/p&gt;
&lt;p&gt;Note that this implementation is not synchronized. If multiple threads access a linked list concurrently, and at least one of the threads modifies the list structurally, it must be synchronized externally. (A structural modification is any operation that adds or deletes one or more elements; merely setting the value of an element is not a structural modification.) This is typically accomplished by synchronizing on some object that naturally encapsulates the list&lt;/p&gt;
&lt;p&gt;由上述注释中可以大概得知： LinkedList 是由一个双向链表来实现的，它允许插入所有元素，包括 null，同时，它是线程不同步的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://JavaSsun.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://JavaSsun.github.io/tags/Java/"/>
    
      <category term="源码解析" scheme="http://JavaSsun.github.io/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>ArrayList实现原理_探险</title>
    <link href="http://javassun.github.io/2019/11/16/ArrayList%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86-%E6%8E%A2%E9%99%A9/"/>
    <id>http://javassun.github.io/2019/11/16/ArrayList%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86-%E6%8E%A2%E9%99%A9/</id>
    <published>2019-11-16T09:58:10.000Z</published>
    <updated>2020-04-16T10:05:19.287Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-概述"><a href="#一-概述" class="headerlink" title="一 概述"></a>一 概述</h1><p>深入理解Java集合中的源代码，可以帮助我们更好地了解大佬的意图，规避不必要的bug。</p><p>源码中的一段注释，提取关键信息</p><p>Resizable-array implementation of the List interface. Implements all optional list operations, and permits all elements, including null. In addition to implementing the List interface, this class provides methods to manipulate the size of the array that is used internally to store the list. (This class is roughly equivalent to Vector, except that it is unsynchronized.)</p><p>由上文注释可以大概得知：ArrayList是一个动态数组，实现了List接口以及list相关的所有方法，它允许所有元素的插入，包括null。另外，ArrayList和Vector除了线程不同步之外，大致相等。</p><a id="more"></a><h1 id="二-属性"><a href="#二-属性" class="headerlink" title="二 属性"></a>二 属性</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;默认容量的大小</span><br><span class="line">private static final int DEFAULT_CAPACITY &#x3D; 10;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;空数组常量</span><br><span class="line">private static final Object[] EMPTY_ELEMENTDATA &#x3D; &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;默认的空数组常量</span><br><span class="line">private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA &#x3D; &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;存放元素的数组，可以发现 ArrayList 的底层实现就是一个 Object数组</span><br><span class="line">transient Object[] elementData;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;数组中包含的元素个数</span><br><span class="line">private int size;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;数组的最大上限 </span><br><span class="line">private static final int MAX_ARRAY_SIZE &#x3D; Integer.MAX_VALU E - 8;</span><br></pre></td></tr></table></figure><p>ArrayList 的属性非常少，就只有这些。其中最重要的莫过于 elementData 了，ArrayList 所有的方法都是建立在 elementData 之上。</p><h1 id="三-方法"><a href="#三-方法" class="headerlink" title="三 方法"></a>三 方法</h1><h2 id="1-构造方法"><a href="#1-构造方法" class="headerlink" title="1 构造方法"></a>1 构造方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public ArrayList(int initialCapacity) &#123;</span><br><span class="line">    if (initialCapacity &gt; 0) &#123;</span><br><span class="line">        this.elementData &#x3D; new Object[initialCapacity]; </span><br><span class="line">    &#125; else if (initialCapacity &#x3D;&#x3D; 0) &#123;</span><br><span class="line">        this.elementData &#x3D; EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;Illegal Capacit y: &quot;+initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public ArrayList() &#123;</span><br><span class="line">    this.elementData &#x3D; DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从构造方法中可以看出，默认情况下，elementData 是一个大小为 0 的空数组，当我们指定了初始大小的时候，elementData 的初始大小就变成了我们所指定的初始大小了。</p><h2 id="2-get方法"><a href="#2-get方法" class="headerlink" title="2 get方法"></a>2 get方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public E get(int index) &#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line">    return elementData(index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void rangeCheck(int index) &#123;</span><br><span class="line">    if (index &gt;&#x3D; size)</span><br><span class="line">        throw new IndexOutOfBoundsException(outOfBoundsMsg (index));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">E elementData(int index) &#123;</span><br><span class="line">    return (E) elementData[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为 ArrayList 是采用数组结构来存储的，所以它的 get 方法非常简单，先是判断一下有没有越界，之后就可以直接通过数组下标来获取元素了，所以 get 的时间复杂 度是 O(1)。</p><h2 id="3-add方法"><a href="#3-add方法" class="headerlink" title="3 add方法"></a>3 add方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public boolean add(E e) &#123;</span><br><span class="line">    ensureCapacityInternal(size + 1);  &#x2F;&#x2F; Increments modCou nt!!</span><br><span class="line">    elementData[size++] &#x3D; e;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void add(int index, E element) &#123;</span><br><span class="line">    rangeCheckForAdd(index);</span><br><span class="line">    ensureCapacityInternal(size + 1);  &#x2F;&#x2F; Increments modCou nt!!</span><br><span class="line">    &#x2F;&#x2F;调用一个 native 的复制方法，把 index 位置开始的元素都往后挪一位</span><br><span class="line">    System.arraycopy(elementData, index, elementData, inde x + 1, size - index);</span><br><span class="line">    elementData[index] &#x3D; element;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void ensureCapacityInternal(int minCapacity) &#123;</span><br><span class="line">    if (elementData &#x3D;&#x3D; DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        minCapacity &#x3D; Math.max(DEFAULT_CAPACITY, minCapacit y);</span><br><span class="line">    &#125;</span><br><span class="line">    ensureExplicitCapacity(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void ensureExplicitCapacity(int minCapacity) &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    if (minCapacity - elementData.length &gt; 0)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ArrayList 的 add 方法也很好理解，在插入元素之前，它会先检查是否需要扩容，然 后再把元素添加到数组中最后一个元素的后面。在 ensureCapacityInternal 方法中， 可以看见，如果当 elementData 为空数组时，它会使用默认的大小去扩容。所以 说，通过无参构造方法来创建 ArrayList 时，它的大小其实是为 0 的，只有在使用到 的时候，才会通过 grow 方法去创建一个大小为 10 的数组。<br>第一个 add 方法的复杂度为 O(1)，虽然有时候会涉及到扩容的操作，但是扩容的次 数是非常少的，所以这一部分的时间可以忽略不计。如果使用的是带指定下标的 add 方法，则复杂度为 O(n)，因为涉及到对数组中元素的移动，这一操作是非常耗时的。</p><h2 id="4-set方法"><a href="#4-set方法" class="headerlink" title="4 set方法"></a>4 set方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public E set(int index, E element) &#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line">    E oldValue &#x3D; elementData(index);</span><br><span class="line">    elementData[index] &#x3D; element;</span><br><span class="line">    return oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>set 方法的作用是把下标为 index 的元素替换成 element，跟 get 非常类似，时间复杂度度为 O(1)。</p><h2 id="5-remove方法"><a href="#5-remove方法" class="headerlink" title="5 remove方法"></a>5 remove方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public E remove(int index) &#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line">    modCount++;</span><br><span class="line">    E oldValue &#x3D; elementData(inderemove 方法与 add 带指定下标的方法非常类似，也是调用系统的 arraycopy 方法来 移动元素，时间复杂度为 O(n)。x);</span><br><span class="line">    int numMoved &#x3D; size - index - 1;</span><br><span class="line">    if (numMoved &gt; 0)</span><br><span class="line">        System.arraycopy(elementData, index+1, elementData, index, numMoved);</span><br><span class="line">    elementData[--size] &#x3D; null; &#x2F;&#x2F; clear to let GC do its wo rk</span><br><span class="line">    return oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>remove 方法与 add 带指定下标的方法非常类似，也是调用系统的 arraycopy 方法来 移动元素，时间复杂度为 O(n)。</p><h2 id="6-grow方法"><a href="#6-grow方法" class="headerlink" title="6 grow方法"></a>6 grow方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">private void grow(int minCapacity) &#123;</span><br><span class="line">    &#x2F;&#x2F; overflow-conscious code</span><br><span class="line">    int oldCapacity &#x3D; elementData.length;</span><br><span class="line">    int newCapacity &#x3D; oldCapacity + (oldCapacity &gt;&gt; 1);</span><br><span class="line">    if (newCapacity - minCapacity &lt; 0)</span><br><span class="line">        newCapacity &#x3D; minCapacity;</span><br><span class="line">    if (newCapacity - MAX_ARRAY_SIZE &gt; 0)</span><br><span class="line">        newCapacity &#x3D; hugeCapacity(minCapacity);</span><br><span class="line">    &#x2F;&#x2F; minCapacity is usually close to size, so this is a wi n:</span><br><span class="line">    elementData &#x3D; Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>grow 方法是在数组进行扩容的时候用到的，从中可以看见，ArrayList 每次扩容 都是扩 1.5 倍，然后调用 Arrays 类的 copyOf 方法，把元素重新拷贝到一个新的数组 中去。</p><h2 id="7-ize方法"><a href="#7-ize方法" class="headerlink" title="7 ize方法"></a>7 ize方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public int size() &#123;</span><br><span class="line">    return size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>size 方法非常简单，它是直接返回 size 的值，也就是<strong>数组中元素的个数</strong>间 复杂度为 O(1)。这里要注意一下，返回的并不是数组的实际大小。</p><h2 id="8-indexOf-amp-lastIndexOf"><a href="#8-indexOf-amp-lastIndexOf" class="headerlink" title="8 indexOf &amp; lastIndexOf"></a>8 indexOf &amp; lastIndexOf</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public int indexOf(Object o) &#123;</span><br><span class="line">    if (o &#x3D;&#x3D; null) &#123;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; size; i++)</span><br><span class="line">            if (elementData[i]&#x3D;&#x3D;null)</span><br><span class="line">                return i;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; size; i++)</span><br><span class="line">            if (o.equals(elementData[i]))</span><br><span class="line">                return i;</span><br><span class="line">    &#125;</span><br><span class="line">    return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public int lastIndexOf(Object o) &#123;</span><br><span class="line">    if (o &#x3D;&#x3D; null) &#123;</span><br><span class="line">        for (int i &#x3D; size-1; i &gt;&#x3D; 0; i--)</span><br><span class="line">            if (elementData[i]&#x3D;&#x3D;null)</span><br><span class="line">                return i;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        for (int i &#x3D; size-1; i &gt;&#x3D; 0; i--)</span><br><span class="line">            if (o.equals(elementData[i]))</span><br><span class="line">                return i;</span><br><span class="line">    &#125;</span><br><span class="line">    return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>indexOf 方法的作用是返回第一个等于给定元素的值的下标。它是通过遍历比较数组 中每个元素的值来查找的，所以它的时间复杂度是 O(n)。</p><p>lastIndexOf 的原理跟 indexOf 一样，而它仅仅是从后往前找起罢了。</p><h1 id="四-Vector"><a href="#四-Vector" class="headerlink" title="四 Vector"></a>四 Vector</h1><p>很多方法都跟 ArrayList 一样，只是多加了个 synchronized 来保证线程安全,主要汇总二者不同点</p><p>Vector 比 ArrayList 多了一个属性:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protected int capacityIncrement;</span><br></pre></td></tr></table></figure><p>这个属性是在扩容的时候用到的，它表示每次扩容只扩 capacityIncrement 个空间就 足够了。该属性可以通过构造方法给它赋值。先来看一下构造方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public Vector(int initialCapacity, int capacityIncrement) &#123;</span><br><span class="line">    super();</span><br><span class="line">    if (initialCapacity &lt; 0)</span><br><span class="line">        throw new IllegalArgumentException(&quot;Illegal Capacit y: &quot;+initialCapacity);</span><br><span class="line">    this.elementData &#x3D; new Object[initialCapacity];</span><br><span class="line">    this.capacityIncrement &#x3D; capacityIncrement;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Vector(int initialCapacity) &#123;</span><br><span class="line">    this(initialCapacity, 0);</span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">public Vector() &#123;</span><br><span class="line">    this(10);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从构造方法中，可以看出 Vector 的默认大小也是 10，而且它在初始化的时候就 已经创建了数组了，这点跟 ArrayList 不一样。再来看一下 grow 方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">private void grow(int minCapacity) &#123;</span><br><span class="line">    &#x2F;&#x2F; overflow-conscious code</span><br><span class="line">    int oldCapacity &#x3D; elementData.length;</span><br><span class="line">    int newCapacity &#x3D; oldCapacity + ((capacityIncrement &gt; 0) ? capacityIncrement : oldCapacity);</span><br><span class="line">    if (newCapacity - minCapacity &lt; 0)</span><br><span class="line">        newCapacity &#x3D; minCapacity;</span><br><span class="line">    if (newCapacity - MAX_ARRAY_SIZE &gt; 0)</span><br><span class="line">        newCapacity &#x3D; hugeCapacity(minCapacity);</span><br><span class="line">    elementData &#x3D; Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从 grow 方法中可以发现，newCapacity 默认情况下是两倍的 oldCapacity，而当 指定了 capacityIncrement 的值之后，newCapacity 变成了 oldCapacity+capacityIncrement。</p><h1 id="五-总结"><a href="#五-总结" class="headerlink" title="五 总结"></a>五 总结</h1><p>1、ArrayList 创建时的大小为 0；当加入第一个元素时，进行第一次扩容时，默认容量大小为10</p><p>2、ArrayList 每次扩容都以当前数组大小的 1.5 倍去扩容。  3、Vector 创建时的默认大小为 10</p><p>4、Vector 每次扩容都以当前数组大小的 2 倍去扩容。当指定了 capacityIncrement 之 后，每次扩容仅在原先基础上增加 capacityIncrement 个单位空间。</p><p>5、ArrayList 和 Vector 的 add、get、size 方法的复杂度都为 O(1)，remove 方法的复 杂度为 O(n)。</p><p>6、ArrayList 是非线程安全的，Vector 是线程安全的。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一-概述&quot;&gt;&lt;a href=&quot;#一-概述&quot; class=&quot;headerlink&quot; title=&quot;一 概述&quot;&gt;&lt;/a&gt;一 概述&lt;/h1&gt;&lt;p&gt;深入理解Java集合中的源代码，可以帮助我们更好地了解大佬的意图，规避不必要的bug。&lt;/p&gt;
&lt;p&gt;源码中的一段注释，提取关键信息&lt;/p&gt;
&lt;p&gt;Resizable-array implementation of the List interface. Implements all optional list operations, and permits all elements, including null. In addition to implementing the List interface, this class provides methods to manipulate the size of the array that is used internally to store the list. (This class is roughly equivalent to Vector, except that it is unsynchronized.)&lt;/p&gt;
&lt;p&gt;由上文注释可以大概得知：ArrayList是一个动态数组，实现了List接口以及list相关的所有方法，它允许所有元素的插入，包括null。另外，ArrayList和Vector除了线程不同步之外，大致相等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://JavaSsun.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://JavaSsun.github.io/tags/Java/"/>
    
      <category term="源码解析" scheme="http://JavaSsun.github.io/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>7-Nginx安装详解</title>
    <link href="http://javassun.github.io/2019/11/09/7-Nginx%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/"/>
    <id>http://javassun.github.io/2019/11/09/7-Nginx%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/</id>
    <published>2019-11-09T11:01:02.000Z</published>
    <updated>2020-04-16T06:39:32.512Z</updated>
    
    <content type="html"><![CDATA[<p>Author: haoransun<br>Wechat: SHR—97<br><font color="red">学习来源：极客时间-Nginx核心知识100讲，本人购买课程后依据视频讲解汇总成个人见解。</font></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Nginx是一款轻量级高性能的Web服务器/反向代理服务器，</p><p>并在一个BSD-like 协议下发行。其特点是占有内存少，并发能力强，<br>中国大陆使用nginx网站用户有：百度、京东、新浪、网易、腾讯、淘宝等。</p><a id="more"></a><h1 id="1-新方法安装"><a href="#1-新方法安装" class="headerlink" title="1 新方法安装"></a>1 新方法安装</h1><p><strong>Nginx是C语言开发，</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1. gcc安装</span><br><span class="line">yum install gcc-c++</span><br><span class="line">2. PCRE pcre-devel安装</span><br><span class="line">PCRE（Perl Compatible Regular Expressions）是一个Perl库，包括perl兼容的正则表达式。Nginx的http模块使用pcre来解析正则表达式。所以需要在linux安装pcre库。pcre-devel是pcre开发的一个二次开发库，nginx也需要此命令。</span><br><span class="line">yun install -y pcre pcre-devel</span><br><span class="line">3. zlib安装</span><br><span class="line">zlib库提供了很多种压缩和解压额方式，Nginx使用zlib对http包的内容进行gzip，所以需要</span><br><span class="line">yum install -y zlib zlib-devel</span><br><span class="line">4. Open-SSL安装</span><br><span class="line">OpenSSL是一个强大的安全套接字层密码库，囊括主要的密码算法，常用的密钥和证书封装管理功能以及SSL协议，并提供丰富的应用程序供测试或其他目的。</span><br><span class="line">Nginx不仅支持http协议，还支持https（在ssl协议上传输http）,所以需要安装OpenSSL库</span><br><span class="line">yum install -y openssl openssl-devel</span><br></pre></td></tr></table></figure><h1 id="2-老方法安装"><a href="#2-老方法安装" class="headerlink" title="2 老方法安装"></a>2 老方法安装</h1><ol><li><p>安装gcc</p><p> rpm -Uvh glibc-2.12-1.209.el6_9.2.x86_64.rpm glibc-common-2.12-1.209.el6_9.2.x86_64.rpm libgcc-4.4.7-18.el6_9.2.x86_64.rpm tzdata-2018e-3.el6.noarch.rpm </p><p> rpm -ivh cloog-ppl-0.15.7-1.2.el6.x86_64.rpm cpp-4.4.7-18.el6_9.2.x86_64.rpm glibc-devel-2.12-1.209.el6_9.2.x86_64.rpm glibc-headers-2.12-1.209.el6_9.2.x86_64.rpm     kernel-headers-2.6.32-696.30.1.el6.x86_64.rpm libgomp-4.4.7-18.el6_9.2.x86_64.rpm mpfr-2.4.1-6.el6.x86_64.rpm ppl-0.10.2-11.el6.x86_64.rpm </p><p> rpm -ivh gcc-4.4.7-18.el6_9.2.x86_64.rpm</p></li><li><p>安装gcc-c++<br> rpm -Uvh libstdc++-4.4.7-18.el6_9.2.x86_64.rpm<br> rpm -ivh libstdc++-devel-4.4.7-18.el6_9.2.x86_64.rpm  gcc-c++-4.4.7-18.el6_9.2.x86_64.rpm</p></li><li><p>安装pcre<br> tar -zxvf pcre-8.40.tar.gz<br> cd pcre-8.40<br> ./configure<br> make &amp;&amp; make install</p></li><li><p>安装zlib</p><p> tar -zxvf zlib-1.2.11.tar.gz<br> cd zlib-1.2.11<br> ./configure<br> make &amp;&amp; make install</p></li><li><p>安装启动</p><p> ./configure –prefix=/usr/local/nginx  配置nginx 并且指定nginx的安装目录</p><p> make &amp;&amp; make install</p><p> cd /usr/local/nginx/sbin</p><p> netstat -ano | grep 80     //检查80端口是否占用</p><p> ./nginx -c /usr/local/nginx/conf/nginx.conf</p><p> 注意：</p><pre><code>启动nginx时，服务无法启动，出现./nginx: error while loading shared libraries: libpcre.so.1: cannot open shared object file: No such file or directory的错误，解决方法如下：ln -s /usr/local/lib/libpcre.so.1 /lib64/</code></pre></li></ol><hr><p>Nginx运行和控制<br>    /usr/local/nginx/sbin/nginx 命令</p><pre><code>nginx命令参数：不像许多其他软件系统，Nginx 仅有几个命令行参数，完全通过配置文件来配置。参数如下：-s reload | reopen | stop 进程相关（重新载入配置文件 | 重启Nginx | 停止Nginx）-c &lt;/path/to/config&gt; 为 Nginx 指定一个配置文件，来代替缺省的。-t 不运行，而仅仅测试配置文件。nginx 将检查配置文件的语法的正确性，并尝试打开配置文件中所引用到的文件。-v 显示 nginx 的版本。-V 显示 nginx 的版本，编译器版本和配置参数。</code></pre><hr><p>nginx负载均衡</p><p>1.常用的负载均衡策略<br>    a. 轮询（默认）<br>    每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。<br>    upstream backserver {<br>        server 192.168.0.14;<br>        server 192.168.0.15;<br>    }<br>    b. 指定权重<br>    指定轮询几率（权重默认为1），weight和访问比率成正比，用于后端服务器性能不均的情况。<br>    upstream backserver {<br>        server 192.168.0.14 weight=10;<br>        server 192.168.0.15 weight=10;<br>    }<br>    c. IP绑定 ip_hash<br>    每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。<br>    upstream backserver {<br>        ip_hash;<br>        server 192.168.0.14:88;<br>        server 192.168.0.15:80;<br>    }</p><ol start="2"><li><p>完整配置</p><p> #添加tomcat列表，真实应用服务器都放在这<br> upstream tomcat_pool {</p><pre><code>#server tomcat地址:端口号 weight表示权值，权值越大，被分配的几率越大;</code></pre><p>　　    server 192.168.0.223:8080 weight=4 max_fails=2 fail_timeout=30s;<br> 　　server 192.168.0.224:8080 weight=4 max_fails=2 fail_timeout=30s;<br> }</p><p> server{</p><pre><code>......</code></pre></li></ol><pre><code>    location / {        proxy_pass    http://tomcat_pool;    #转向tomcat处理    }    ......}</code></pre><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Author: haoransun&lt;br&gt;Wechat: SHR—97&lt;br&gt;&lt;font color=&quot;red&quot;&gt;学习来源：极客时间-Nginx核心知识100讲，本人购买课程后依据视频讲解汇总成个人见解。&lt;/font&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Nginx是一款轻量级高性能的Web服务器/反向代理服务器，&lt;/p&gt;
&lt;p&gt;并在一个BSD-like 协议下发行。其特点是占有内存少，并发能力强，&lt;br&gt;中国大陆使用nginx网站用户有：百度、京东、新浪、网易、腾讯、淘宝等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Nginx" scheme="http://JavaSsun.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="http://JavaSsun.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>5-Nginx搭建具备缓存功能的反向代理</title>
    <link href="http://javassun.github.io/2019/11/05/5-Nginx%E6%90%AD%E5%BB%BA%E5%85%B7%E5%A4%87%E7%BC%93%E5%AD%98%E5%8A%9F%E8%83%BD%E7%9A%84%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    <id>http://javassun.github.io/2019/11/05/5-Nginx%E6%90%AD%E5%BB%BA%E5%85%B7%E5%A4%87%E7%BC%93%E5%AD%98%E5%8A%9F%E8%83%BD%E7%9A%84%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</id>
    <published>2019-11-05T11:55:57.000Z</published>
    <updated>2020-04-16T06:38:58.646Z</updated>
    
    <content type="html"><![CDATA[<p>Author: haoransun<br>Wechat: SHR—97<br><font color="red">学习来源：极客时间-Nginx核心知识100讲，本人购买课程后依据视频讲解汇总成个人见解。</font></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前面已经展示了<strong>Nginx</strong>如何作为一个静态资源服务器进行工作，我们以此静态资源服务器作为-<strong>上游服务</strong>，再搭建一个Nginx服务，作为<strong>反向代理</strong>，演示当Nginx作为方向代理时，应该如何使用？</p><p>由于上游服务要处理非常复杂的业务逻辑，而且强调开发效率，因此它的性能并不怎么样，而使用了Nginx作为反向代理之后，可以由一台Nginx将请求用负载均衡算法代理给多台上游服务器工作，这样就实现了水平扩展，在用户无感知的情况下，我们可以添加更多的上游服务器，来提高性能。当上游服务器出现问题时，Nginx可以自动的将请求由有问题、出现灾难的服务器转交给正常的服务器，</p><a id="more"></a><p>现在这个页面仍然是我们刚才搭建的静态资源服务器所展示的页面。<br><img src="/2019/11/05/5-Nginx%E6%90%AD%E5%BB%BA%E5%85%B7%E5%A4%87%E7%BC%93%E5%AD%98%E5%8A%9F%E8%83%BD%E7%9A%84%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/df2a42be-0e03-4eba-b963-00566fe3011b.jpg" alt></p><p>我们需要将此Nginx服务器变更为<strong>上游服务器</strong>，而上游服务器通常对公网是不进行访问的。我们可以做一个非常简单的操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vim conf&#x2F;nginx.conf</span><br><span class="line">   server &#123;</span><br><span class="line">        listen      127.0.0.1:8080;</span><br><span class="line">       # server_name  localhost;</span><br><span class="line"></span><br><span class="line"># 在listen上加入IP地址：127.0.0.1:8080</span><br><span class="line">这表示只能本机的进程来访问我们打开的8080端口，</span><br><span class="line"></span><br><span class="line"># 此时我们需要先将原先的Nginx进程停掉</span><br><span class="line">.&#x2F;nginx -s stop</span><br><span class="line"># 再重新打开Nginx，防止之前的端口仍然可以使用</span><br><span class="line">.&#x2F;nginx</span><br></pre></td></tr></table></figure><p><img src="/2019/11/05/5-Nginx%E6%90%AD%E5%BB%BA%E5%85%B7%E5%A4%87%E7%BC%93%E5%AD%98%E5%8A%9F%E8%83%BD%E7%9A%84%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/ff657493-3010-44aa-8983-412cc49d08b0.png" alt></p><p>再次访问时，会发现无法访问了，因为Nginx拒绝了由浏览器发过去的请求连接。<br><img src="/2019/11/05/5-Nginx%E6%90%AD%E5%BB%BA%E5%85%B7%E5%A4%87%E7%BC%93%E5%AD%98%E5%8A%9F%E8%83%BD%E7%9A%84%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/043e0d0a-61f5-4acc-8730-288adfb9ea29.png" alt></p><p>由此，Nginx静态资源服务器已经变成了一个上游服务器。</p><h1 id="1-开始搭建Nginx反向代理"><a href="#1-开始搭建Nginx反向代理" class="headerlink" title="1 开始搭建Nginx反向代理"></a>1 开始搭建Nginx反向代理</h1><p>之前的 <strong>Nginx</strong> 是1.14版本，而反向代理我们用openrestry的1.16版本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@haoransun sbin]# .&#x2F;nginx -v</span><br><span class="line">nginx version: nginx&#x2F;1.14.2</span><br></pre></td></tr></table></figure><p>我们进入到openresty所在的nginx服务，修改其配置文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"># 在此处添加一个 upstream，即上游服务其中的一台server，它的访问地址是 127.0.0.1:8080</span><br><span class="line"># 如果我有很多上游服务，可以依次放在这里面。（命名为 local,此处可表示一批上游服务器）</span><br><span class="line">  #gzip  on;</span><br><span class="line">    upstream local&#123;</span><br><span class="line">        server 127.0.0.1:8080;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        # 此处设置当前代理服务器的域名，由于没有，就算了</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs&#x2F;host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">            # proxy_set_header：因为有了一台反向代理，所以我们再去拿一些变量或者值的时  候，可能就会出错了，</span><br><span class="line">            # 比如：一个TCP连接，是有对端地址的，而有了方向代理后，我们的              反向代理与客户端是一个TCP连接，而反向代理与上游服务器又是另外一个TCP连接，因此，如果我们取 $remote_addr 这个远端地址的时候，在上游服务那里，取到的实际上师我反向代理服务器的地址，而如果我想拿浏览器的客户端地址，作为限制浏览器访问速度功能的一个依据时，其实是拿不到的。因此，proxy_set_header可以把一些值添加为新的header发送给上游服务器，</span><br><span class="line">            # 比如说 X-Real-IP 将它的值设置为我们从TCP连接中拿到的远端IP地址，Host同样道理，因为用户直接访问的域名，是在他的浏览器中输入的，即可由上游服务器处理此域名，也可由反向代理服务器处理此域名，这些所有的配置特性，都可在官网的 http_proxy_module模块中找到。</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line"></span><br><span class="line">            # http_proxy_module提供了非常丰富的特性+内置变量，而最重要之一特性就是 proxy_cache。</span><br><span class="line">            # 因为当我们的Nginx作为方向代理时，通常只有动态的请求，即不同的用户访问同一个URL时，看到的内容是不同的，此时才会交由上游服务处理。</span><br><span class="line">            # 但是有一些内容可能是一段时间不会发生变化的。此时，为了减轻上游服务的压力，我们就会让Nginx将上游返回来的内容缓存一段时间，如缓存一天等。在一天之内，即使上游服务器对这个内容的响应发生了变化，也不管，只会去拿已缓存的内容向浏览器发出响应。</span><br><span class="line">            # 因为 Nginx的性能远远领先于上游服务器的性能，所以使用此特性后，对我们一些小的站点，会有非常大的性能提升。</span><br><span class="line">            #proxy_cache my_cache;</span><br><span class="line">            #proxy_cache_key $host$uri$is_args$args;</span><br><span class="line">            #proxy_cache_valid 200 304 302 1d;</span><br><span class="line">            # 所有的请求用proxy_pass代理到刚才配置的上游服务中去</span><br><span class="line">            proxy_pass http:&#x2F;&#x2F;local;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ......</span><br></pre></td></tr></table></figure><p><img src="/2019/11/05/5-Nginx%E6%90%AD%E5%BB%BA%E5%85%B7%E5%A4%87%E7%BC%93%E5%AD%98%E5%8A%9F%E8%83%BD%E7%9A%84%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/2ab4b5f1-508b-47c5-af66-188ff2a9c828.png" alt></p><p>此时再去访问我们的代理服务器的IP地址，<strong>如果配置里域名，则用域名访问即可</strong>，因为监听的80端口，所以使用192.168.121.100:80/dangdang/book.html访问即可。<br><img src="/2019/11/05/5-Nginx%E6%90%AD%E5%BB%BA%E5%85%B7%E5%A4%87%E7%BC%93%E5%AD%98%E5%8A%9F%E8%83%BD%E7%9A%84%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/14217284-3db6-4e6e-86ce-c6b7271843ef.jpg" alt></p><p>由下图可看出，我们的请求是由反向代理服务器发给我们的。其中的 <strong>server:nginx/1.16.0</strong>证明了它的身份。</p><p><img src="/2019/11/05/5-Nginx%E6%90%AD%E5%BB%BA%E5%85%B7%E5%A4%87%E7%BC%93%E5%AD%98%E5%8A%9F%E8%83%BD%E7%9A%84%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/06774664-cc31-4dbb-b5f5-bf44b60829d2.png" alt></p><h1 id="2-开始搭建Nginx缓存服务器"><a href="#2-开始搭建Nginx缓存服务器" class="headerlink" title="2 开始搭建Nginx缓存服务器"></a>2 开始搭建Nginx缓存服务器</h1><p>首先，我们需要<strong>proxy_cache_path</strong>来设置我们的缓存 文件写在那个目录下，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application&#x2F;octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span><br><span class="line">                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span><br><span class="line">                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;</span><br><span class="line"></span><br><span class="line">    proxy_cache_path &#x2F;tmp&#x2F;nginxcache levels&#x3D;1:2 keys_zone&#x3D;my_cache:10m max_size&#x3D;10g</span><br><span class="line">            inactive&#x3D;60m use_temp_path&#x3D;off;</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            .....</span><br></pre></td></tr></table></figure><p>此处写在了 <code>/tmp/nginxcache</code>,以及这些文件的命名方式，这些文件的关键字是要放在共享内存中的，此处开了一个10m的共享内存，命名为my_cache，这些参数都在控制我们的缓存。</p><p>缓存如何使用呢？就是在我们需要做缓存的路径下添加<code>proxy_cache</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">       listen       80;</span><br><span class="line">       #server_name  haoraunsun.pub;</span><br><span class="line">       server_name localhost;</span><br><span class="line">       #charset koi8-r;</span><br><span class="line"></span><br><span class="line">       #access_log  logs&#x2F;host.access.log  main;</span><br><span class="line"></span><br><span class="line">       location &#x2F; &#123;</span><br><span class="line">           root   html;</span><br><span class="line">           index  index.html index.htm;</span><br><span class="line">           proxy_set_header Host $host;</span><br><span class="line">           proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">           proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line"></span><br><span class="line">           # 就在此处</span><br><span class="line">           # proxy_cache 后面跟的就是我们刚才开辟的共享内存</span><br><span class="line">           proxy_cache my_cache;</span><br><span class="line">           # 共享内存中的key设置的是 同一个url 访问时 对不同的用户可能展示的内容不一样。因此，用户这样一个变量就要放在共享内存中。</span><br><span class="line">           # 此处只是简单的放置了 host+资源+参数,这些作为一个整体的Key。</span><br><span class="line">           proxy_cache_key $host$uri$is_args$args;</span><br><span class="line">           # 对于哪些响应不返回，这里做了一些简单处理。</span><br><span class="line">           proxy_cache_valid 200 304 302 1d;</span><br><span class="line">           </span><br><span class="line">           # 所有的请求用proxy_pass代理到刚才配置的上游服务中去</span><br><span class="line">           proxy_pass http:&#x2F;&#x2F;local;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/11/05/5-Nginx%E6%90%AD%E5%BB%BA%E5%85%B7%E5%A4%87%E7%BC%93%E5%AD%98%E5%8A%9F%E8%83%BD%E7%9A%84%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/dbb3164a-c86b-45cd-97c4-4d0d228aeb3a.png" alt></p><p>加完这些参数后，需要重载配置文件，重新启用方向代理服务的配置。<br>再次直接访问站点，然后将上游服务停掉，看是否能获得同样的结果。</p><p>首先，我们再次访问，让其响应内容刷到缓存文件中。<br><img src="/2019/11/05/5-Nginx%E6%90%AD%E5%BB%BA%E5%85%B7%E5%A4%87%E7%BC%93%E5%AD%98%E5%8A%9F%E8%83%BD%E7%9A%84%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/f116bae7-d1df-4716-9f3f-a5c461f0eb37.png" alt></p><p>查看进程<br><img src="/2019/11/05/5-Nginx%E6%90%AD%E5%BB%BA%E5%85%B7%E5%A4%87%E7%BC%93%E5%AD%98%E5%8A%9F%E8%83%BD%E7%9A%84%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/9733b5f7-3813-4f02-bf20-eda96a4c0ed0.png" alt></p><p>将上游服务停掉。<br><img src="/2019/11/05/5-Nginx%E6%90%AD%E5%BB%BA%E5%85%B7%E5%A4%87%E7%BC%93%E5%AD%98%E5%8A%9F%E8%83%BD%E7%9A%84%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/dfc0abce-1988-43f5-a4df-ae755de9af93.png" alt></p><p>再次访问，实际上读的是缓存系统中的内容作为响应返回给客户端。</p><p>此时，上游服务已经停掉了<br><img src="/2019/11/05/5-Nginx%E6%90%AD%E5%BB%BA%E5%85%B7%E5%A4%87%E7%BC%93%E5%AD%98%E5%8A%9F%E8%83%BD%E7%9A%84%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/a3d4faab-fcc5-4ce4-956f-7e75e52d8662.png" alt></p><p>再次访问<br><img src="/2019/11/05/5-Nginx%E6%90%AD%E5%BB%BA%E5%85%B7%E5%A4%87%E7%BC%93%E5%AD%98%E5%8A%9F%E8%83%BD%E7%9A%84%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/6f1b4d43-8144-49ac-8676-201d87902b4c.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Author: haoransun&lt;br&gt;Wechat: SHR—97&lt;br&gt;&lt;font color=&quot;red&quot;&gt;学习来源：极客时间-Nginx核心知识100讲，本人购买课程后依据视频讲解汇总成个人见解。&lt;/font&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;前面已经展示了&lt;strong&gt;Nginx&lt;/strong&gt;如何作为一个静态资源服务器进行工作，我们以此静态资源服务器作为-&lt;strong&gt;上游服务&lt;/strong&gt;，再搭建一个Nginx服务，作为&lt;strong&gt;反向代理&lt;/strong&gt;，演示当Nginx作为方向代理时，应该如何使用？&lt;/p&gt;
&lt;p&gt;由于上游服务要处理非常复杂的业务逻辑，而且强调开发效率，因此它的性能并不怎么样，而使用了Nginx作为反向代理之后，可以由一台Nginx将请求用负载均衡算法代理给多台上游服务器工作，这样就实现了水平扩展，在用户无感知的情况下，我们可以添加更多的上游服务器，来提高性能。当上游服务器出现问题时，Nginx可以自动的将请求由有问题、出现灾难的服务器转交给正常的服务器，&lt;/p&gt;
    
    </summary>
    
    
      <category term="Nginx" scheme="http://JavaSsun.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="http://JavaSsun.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>4-Nginx搭建静态资源Web服务器</title>
    <link href="http://javassun.github.io/2019/11/01/4-Nginx%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90Web%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://javassun.github.io/2019/11/01/4-Nginx%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90Web%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2019-11-01T10:53:57.000Z</published>
    <updated>2020-04-16T07:02:29.300Z</updated>
    
    <content type="html"><![CDATA[<p>Author: haoransun<br>Wechat: SHR—97<br><font color="red">学习来源：极客时间-Nginx核心知识100讲，本人购买课程后依据视频讲解汇总成个人见解。</font>`</p><h2 id="1-上传静态资源到Nginx目录中"><a href="#1-上传静态资源到Nginx目录中" class="headerlink" title="1 上传静态资源到Nginx目录中"></a>1 上传静态资源到Nginx目录中</h2><p>如这里新建了一个dlib目录，里面存放静态资源<br><img src="/2019/11/01/4-Nginx%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90Web%E6%9C%8D%E5%8A%A1%E5%99%A8/534bed34-738b-47df-9819-997373f35987.png" alt></p><a id="more"></a><h2 id="2-修改-nginx-conf"><a href="#2-修改-nginx-conf" class="headerlink" title="2 修改 nginx.conf"></a>2 修改 nginx.conf</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       8080;  # 监听端口</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        access_log  logs&#x2F;host.access.log  main;</span><br><span class="line"></span><br><span class="line">        # 现在的请求比较简单，所有的请求都去访问我们 dlib&#x2F; 目录下面的文件，所以此处建立一个location &#x2F;  这个 “斜杠”表示所有的请求，</span><br><span class="line">        # 然后要去指定 url的后缀 要与我文件目录下的后缀一一对应（文件名），此处有两种写法：1.route，有个问题，会将URL中的一些路径，带到我们的文件目录中来。所以通常使用  2 alias：即 Nginx安装目录中的 dlib目录下，后面的路径与我们的URL路径是一一对应的。</span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">           alias   dlib&#x2F;;</span><br><span class="line">           # root   html;</span><br><span class="line">           # index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">做完这些后，再去启动Nginx。</span><br><span class="line">.&#x2F;nginx -c ..&#x2F;conf&#x2F;nginx.conf 会发现找不到这个文件</span><br><span class="line">.&#x2F;nginx -c &#x2F;home&#x2F;geek&#x2F;nginx&#x2F;conf&#x2F;nginx.conf 即可</span><br><span class="line">ps -ef | grep nginx</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="/2019/11/01/4-Nginx%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90Web%E6%9C%8D%E5%8A%A1%E5%99%A8/ec1f7e9f-05a4-41a8-9105-f636ec985a7b.jpg" alt></p><p><strong>192.168.121.100 为Nginx的服务器地址，8080是刚才配置的端口号，/dangdang/book.html是  dlib 目录下的 dangdang/book.html 。</strong></p><p><font color="red"><strong>但是此处有一个问题，打开访问页面的抓包查看</strong></font><br><img src="/2019/11/01/4-Nginx%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90Web%E6%9C%8D%E5%8A%A1%E5%99%A8/324fabe1-d3b4-4f0a-aeae-5fbe99099406.jpg" alt></p><p>*<em>这里的book.html文件大小是3.0kB,与文件本身的大小是一致的。<font color="red">但是所有的文本文件是可以做 gzip 压缩的</font>，做完 gzip 压缩后，传递的字节数会大幅度减少，因此通常是 打开 gzip压缩功能。 *</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 打开 gzip开关</span><br><span class="line">gzip  on;</span><br><span class="line"></span><br><span class="line"># 小于 1字节的内容就不再行压缩了（1是可以配置的，不带单位为字节，可带单位：5K 5M 5G）</span><br><span class="line">因为对于特表小的文本内容。在TCP一个报文中就可以全部发送出来。此时再进行压缩，去消耗CPU资源，意义不大，此处是为了显示 gzip压缩效果，将其设置为1。</span><br><span class="line">gzip_min_length  1;</span><br><span class="line"></span><br><span class="line"># 表示 gzip的压缩级别</span><br><span class="line">gzip_comp_level  2;</span><br><span class="line"></span><br><span class="line"># 表示针对列举的类型才进行gzip压缩。比如 已经做过压缩的文件是没有必要再做gzip压缩的（zip文件等）</span><br><span class="line">gzip_types  text&#x2F;plain application&#x2F;x-javascript test&#x2F;css application&#x2F;xml text&#x2F;javascript application&#x2F;x-httpd-php  image&#x2F;jpeg image&#x2F;gif image&#x2F;png;</span><br><span class="line"></span><br><span class="line">加好这些配置后 reload</span><br><span class="line">sbin&#x2F;nginx -s reload</span><br></pre></td></tr></table></figure><p><img src="/2019/11/01/4-Nginx%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90Web%E6%9C%8D%E5%8A%A1%E5%99%A8/81b273e2-ff17-4686-b7d4-9ff0c3a0e0d8.png" alt></p><p><strong>再次访问此文件：</strong><br><img src="/2019/11/01/4-Nginx%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90Web%E6%9C%8D%E5%8A%A1%E5%99%A8/63cef855-efb9-4663-8018-804306a4f37f.jpg" alt></p><p>此时传输的字节数只有1.6KB了，从响应头中也可看出使用了  gzip压缩。<br><img src="/2019/11/01/4-Nginx%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90Web%E6%9C%8D%E5%8A%A1%E5%99%A8/d5decbbd-d47c-4472-a1ec-96b2d251f146.png" alt></p><p><strong>因此使用了 gzip 压缩后，整个静态资源 WEB服务，传输效率会提升很多。</strong></p><h2 id="3-Nginx常用功能"><a href="#3-Nginx常用功能" class="headerlink" title="3 Nginx常用功能"></a>3 Nginx常用功能</h2><h3 id="3-1-如果想要将-静态资源-服务器上的-文件夹或文件所在的目录分享给用户，由用户去决定使用那些文件，这种常用的应用场景如何实现呢？"><a href="#3-1-如果想要将-静态资源-服务器上的-文件夹或文件所在的目录分享给用户，由用户去决定使用那些文件，这种常用的应用场景如何实现呢？" class="headerlink" title="3.1 如果想要将 静态资源 服务器上的 文件夹或文件所在的目录分享给用户，由用户去决定使用那些文件，这种常用的应用场景如何实现呢？"></a>3.1 如果想要将 静态资源 服务器上的 文件夹或文件所在的目录分享给用户，由用户去决定使用那些文件，这种常用的应用场景如何实现呢？</h3><p><strong>Nginx 提供了 官方模块 <font color="red">auto_index_module</font>在官方网站<a href="http://nginx.org/en/docs/" target="_blank" rel="noopener">http://nginx.org/en/docs/</a> 提供了使用说明</strong>。</p><p>使用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F; &#123;</span><br><span class="line">           alias   dlib&#x2F;;</span><br><span class="line">           autoindex on; # 加入此模块</span><br><span class="line">           # root   html;</span><br><span class="line">           # index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">执行 reload即可。</span><br><span class="line"></span><br><span class="line">192.168.121.100:8080&#x2F;</span><br><span class="line">192.168.121.100:8080&#x2F;dangdang&#x2F;</span><br><span class="line">即可看到如下页面，则成功。</span><br></pre></td></tr></table></figure><p><img src="/2019/11/01/4-Nginx%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90Web%E6%9C%8D%E5%8A%A1%E5%99%A8/6e4bca87-3437-42e4-bef5-df5592e3e6df.png" alt></p><hr><p><img src="/2019/11/01/4-Nginx%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90Web%E6%9C%8D%E5%8A%A1%E5%99%A8/69254aad-1999-4d64-ab86-4c5cae6cacb7.png" alt></p><p>这样会显示 指定层级下 所有的目录及文件。<strong>提供了共享静态资源的功能.</strong></p><h3 id="3-2-常常公网带宽有限，当有很多并发用户使用我们的带宽时，就会形成一种争抢关系，可能会有一种策略：用户访问某些大文件的时候，限制下它的速度，以期望能够分离出足够的带宽，给用户访问要的小文件，如css、js等。"><a href="#3-2-常常公网带宽有限，当有很多并发用户使用我们的带宽时，就会形成一种争抢关系，可能会有一种策略：用户访问某些大文件的时候，限制下它的速度，以期望能够分离出足够的带宽，给用户访问要的小文件，如css、js等。" class="headerlink" title="3.2 常常公网带宽有限，当有很多并发用户使用我们的带宽时，就会形成一种争抢关系，可能会有一种策略：用户访问某些大文件的时候，限制下它的速度，以期望能够分离出足够的带宽，给用户访问要的小文件，如css、js等。"></a>3.2 常常公网带宽有限，当有很多并发用户使用我们的带宽时，就会形成一种争抢关系，可能会有一种策略：用户访问某些大文件的时候，限制下它的速度，以期望能够分离出足够的带宽，给用户访问要的小文件，如css、js等。</h3><p>使用 set命令+内置变量即可达到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">        location &#x2F; &#123;</span><br><span class="line"></span><br><span class="line">           alias   dlib&#x2F;;</span><br><span class="line">           autoindex on;</span><br><span class="line">           set $limit_rate 1k;</span><br><span class="line">          # index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">set $limit_rate 1k; # 限制Nginx向浏览器发送响应的一个速度。</span><br></pre></td></tr></table></figure><p><img src="/2019/11/01/4-Nginx%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90Web%E6%9C%8D%E5%8A%A1%E5%99%A8/396f4ca5-45fe-4926-8719-e22866f50bc2.png" alt></p><p>limit_rate：在 Nginx官网中的 <strong>ngx_http_core_module中 提供了 <a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#variables" target="_blank" rel="noopener">Embedded Variables</a>，在这其中有一个内置的变量，$limit_rate ,来限制我们的访问速度</strong><br><img src="/2019/11/01/4-Nginx%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90Web%E6%9C%8D%E5%8A%A1%E5%99%A8/936fe133-af26-413a-beb9-8555e4b397ce.png" alt></p><p><strong>用法：set $limit_rate N； 是空间单位的；意义是：每秒传输 N 字节到浏览器中。<br>再去访问大页面，发现变得很慢了</strong>。</p><h3 id="3-3-记录access-log日志"><a href="#3-3-记录access-log日志" class="headerlink" title="3.3 记录access.log日志"></a>3.3 记录access.log日志</h3><p><img src="/2019/11/01/4-Nginx%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90Web%E6%9C%8D%E5%8A%A1%E5%99%A8/2339d20c-675f-4197-a127-8dda272a9a06.png" alt></p><p><strong>nginx.conf 中的 log_format指令在定义日志的格式。</strong></p><p>这里的日志格式使用了许多变量，比如 $remote_addr<br>等等，具体见 00-Nginx访问日志详解。</p><p>这样的日志格式给他明明为 main , 因为我们可能对不同的域名下做不同格式的日志记录，或者对一些大文件，做反向代理等不同的用途时，记录不同日志格式。</p><p>配好 <strong>log_format</strong>之后，需要去设定 日志 记录在哪里</p><p><strong>access_log指令：决定日志记录在什么地方。access_log指令的位置决定了它所属的这样一类请求，会被记录到 当前指令所指定的路径中，采用 main这样的一种格式来记录。</strong></p><p>比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name xxx;</span><br><span class="line">    acccess_log logx&#x2F;access.log main；</span><br><span class="line"># 这里access_log放在了 server下，即所有发送我这个域名或者请求端口的都会被记录到这个文件中</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>nginx内置的所有变量都可以被记录到 日志中。</p><p>官方内置变量在上面提过了</p><p>第三方模块变量，如 ngx_http_gzip_module 中的 内置变量 $gzip_ratio：记录了压缩级别</p><p><img src="/2019/11/01/4-Nginx%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90Web%E6%9C%8D%E5%8A%A1%E5%99%A8/88b697fd-76d2-4960-8fe3-0567add181a7.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Author: haoransun&lt;br&gt;Wechat: SHR—97&lt;br&gt;&lt;font color=&quot;red&quot;&gt;学习来源：极客时间-Nginx核心知识100讲，本人购买课程后依据视频讲解汇总成个人见解。&lt;/font&gt;`&lt;/p&gt;
&lt;h2 id=&quot;1-上传静态资源到Nginx目录中&quot;&gt;&lt;a href=&quot;#1-上传静态资源到Nginx目录中&quot; class=&quot;headerlink&quot; title=&quot;1 上传静态资源到Nginx目录中&quot;&gt;&lt;/a&gt;1 上传静态资源到Nginx目录中&lt;/h2&gt;&lt;p&gt;如这里新建了一个dlib目录，里面存放静态资源&lt;br&gt;&lt;img src=&quot;/2019/11/01/4-Nginx%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90Web%E6%9C%8D%E5%8A%A1%E5%99%A8/534bed34-738b-47df-9819-997373f35987.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Nginx" scheme="http://JavaSsun.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="http://JavaSsun.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>3-Nginx命令行演示-重载-热部署-切割</title>
    <link href="http://javassun.github.io/2019/10/20/3-Nginx%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%BC%94%E7%A4%BA-%E9%87%8D%E8%BD%BD-%E7%83%AD%E9%83%A8%E7%BD%B2-%E5%88%87%E5%89%B2/"/>
    <id>http://javassun.github.io/2019/10/20/3-Nginx%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%BC%94%E7%A4%BA-%E9%87%8D%E8%BD%BD-%E7%83%AD%E9%83%A8%E7%BD%B2-%E5%88%87%E5%89%B2/</id>
    <published>2019-10-20T11:00:56.000Z</published>
    <updated>2020-04-16T06:38:20.806Z</updated>
    
    <content type="html"><![CDATA[<p>Author: haoransun<br>Wechat: SHR—97<br><font color="red">学习来源：极客时间-Nginx核心知识100讲，本人购买课程后依据视频讲解汇总成个人见解。</font></p><h1 id="1-检查80端口是否被占用"><a href="#1-检查80端口是否被占用" class="headerlink" title="1 检查80端口是否被占用"></a>1 检查80端口是否被占用</h1><p>yum install net-tools<br>netstat -ano | grep 80</p><h1 id="2-Nginx命令行"><a href="#2-Nginx命令行" class="headerlink" title="2 Nginx命令行"></a>2 Nginx命令行</h1><p><img src="/2019/10/20/3-Nginx%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%BC%94%E7%A4%BA-%E9%87%8D%E8%BD%BD-%E7%83%AD%E9%83%A8%E7%BD%B2-%E5%88%87%E5%89%B2/48cac2e3-d525-4835-88aa-ce13207e19d7.jpg" alt></p><a id="more"></a><h1 id="3-重载配置文件"><a href="#3-重载配置文件" class="headerlink" title="3 重载配置文件"></a>3 重载配置文件</h1><p>此时在 nginx的安装目录下执行了 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;nginx -c &#x2F;home&#x2F;geek&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</span><br><span class="line">将Nginx启动了起来。</span><br></pre></td></tr></table></figure><p><font color="red">注意：<br>启动nginx时，服务无法启动，出现./nginx: error while loading shared libraries: libpcre.so.1: cannot open shared object file: No such file or directory的错误，解决方法如下：<br>ln -s /usr/local/lib/libpcre.so.1 /lib64/</font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">再次修改了 Nginx配置文件中的一些值</span><br><span class="line">[root@haoransun nginx]# vim conf&#x2F;nginx.conf</span><br><span class="line">如需要将 #tcp_nopush这个注释去掉。</span><br></pre></td></tr></table></figure><p><img src="/2019/10/20/3-Nginx%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%BC%94%E7%A4%BA-%E9%87%8D%E8%BD%BD-%E7%83%AD%E9%83%A8%E7%BD%B2-%E5%88%87%E5%89%B2/098162e9-ca47-4da3-a22c-b0e1de51a776.png" alt></p><ul><li><p><strong><font color="red">mac</font>：当修改完成后，保存退出后，可以直接执行 <font color="red"> ./nginx -s reload </font>指令。这样是在Nginx在不停止对客户服务的情况下，使用了 tcp_nopush这个新的配置项，</strong></p></li><li><p>**<font color="red">CentOS</font>：<br>cd sbin<br>[root@haoransun sbin]# ./nginx -s reload即可</p></li><li><p><strong>ps -ef | grep nginx 可以看到正在运行的Nginx</strong></p></li></ul><h1 id="4-热部署"><a href="#4-热部署" class="headerlink" title="4 热部署"></a>4 热部署</h1><p><strong>即对Nginx在不停机的情况下做版本升级</strong>。<br><font color="red">对现有的Nginx的运行目录中的二进制可执行文件做一次备份：<strong>因为我们更换的只是二进制文件，并不会对其他文件做更换。</strong></font><br><img src="/2019/10/20/3-Nginx%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%BC%94%E7%A4%BA-%E9%87%8D%E8%BD%BD-%E7%83%AD%E9%83%A8%E7%BD%B2-%E5%88%87%E5%89%B2/1069c513-57b6-4f14-bf86-e72dc898eacf.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp nginx nginx.old</span><br></pre></td></tr></table></figure><p>先下载一个最新版本的Nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.16.0.tar.gz</span><br><span class="line">tar -zxvf 此版本Nginx</span><br><span class="line">编译生成二进制可执行文件</span><br><span class="line">进入新版本Nginx目录中，</span><br><span class="line">.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;geek&#x2F;openstry&#x2F;nginx</span><br><span class="line"></span><br><span class="line">上述命令会在Nginx最新版本目录中生成objs中间文件。</span><br><span class="line">make</span><br><span class="line">上述命令会生成Makerfile文件</span><br><span class="line">make install</span><br><span class="line">上述命令会在 &#x2F;usr&#x2F;local&#x2F;geek&#x2F;openstry&#x2F;nginx目录下生成最新版本Nginx的运行目录文件，里面包含了最新版本的Nginx二进制可执行文件</span><br></pre></td></tr></table></figure><p>将我们编译好的<strong>最新版本的二进制文件</strong>拷贝到旧版本的二进制那个可执行文件目录中，替换掉当前Nginx进程正在使用的旧版本二进制文件。<br><img src="/2019/10/20/3-Nginx%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%BC%94%E7%A4%BA-%E9%87%8D%E8%BD%BD-%E7%83%AD%E9%83%A8%E7%BD%B2-%E5%88%87%E5%89%B2/daf5c361-5f4f-42c3-a7b0-26c0f1339f06.png" alt><br><font color="red"><strong>复制成功后，看到新版本的Nginx二进制可执行文件的size与旧版本是不一样的。</strong></font></p><p>现在，需要给<strong>正在运行的Nginx的Master进程发送一个信号，告诉它，我们要进行热部署了，做一次版本升级</strong><br><img src="/2019/10/20/3-Nginx%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%BC%94%E7%A4%BA-%E9%87%8D%E8%BD%BD-%E7%83%AD%E9%83%A8%E7%BD%B2-%E5%88%87%E5%89%B2/c1c96e01-89b4-4df0-8302-d5594b0ab572.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kill -USR2 6655 ## master进程号</span><br><span class="line">ps -ef |grep nginx</span><br></pre></td></tr></table></figure><p>接下来会看到，<strong>Nginx Master进程会新起一个Nginx Master进程，新的Nginx Master进程使用了刚刚复制过来的最新的Nginx二级制文件，老的Worker也在运行，新的Master会生成新的Worker，它们会平滑的将所有的请求过渡到新的二进制文件所起的Nginx进程中，由此实现了平滑过度-热部署</strong>，如下所示：<br><img src="/2019/10/20/3-Nginx%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%BC%94%E7%A4%BA-%E9%87%8D%E8%BD%BD-%E7%83%AD%E9%83%A8%E7%BD%B2-%E5%88%87%E5%89%B2/086e0e3b-a68e-4e18-b5ca-2d2e14362e01.png" alt><br>我们看到，新老都存在，且新的Master进程父ID 为老的Master进程ID，由此看出新的是由老的新起的。</p><p>但是老的Master进程已经<strong>不再监听80或者443这样的Web端口</strong>，所以，新的连接，都会进入新的Nginx进程中。</p><p>这是，我们需要向老的Nginx进程发生一个信号，告诉它，优雅的关闭所有的 Worker进程.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -WINCH 6655 ## 老的Master 进程号</span><br></pre></td></tr></table></figure><p><img src="/2019/10/20/3-Nginx%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%BC%94%E7%A4%BA-%E9%87%8D%E8%BD%BD-%E7%83%AD%E9%83%A8%E7%BD%B2-%E5%88%87%E5%89%B2/5a48e9e0-f3dc-410c-89d2-bc7de1124ecd.png" alt></p><p>老的Worker进程已经优雅的退出了，但是老的Master进程 6655 还存在，但是它手下已经没有Worker进程了，这说明了一件事情：所有的请求已经去全部切换到我们新升级好的Nginx中了。</p><p>./nginx -v :已经是最新的版本了</p><p><strong>如果升级过程完成后，没有任何问题，需要关闭老的master进程的话，使用以下命令：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill  -QUIT old_master_pid</span><br></pre></td></tr></table></figure><p><strong>但是 想要版本回退呢？只需要向老的Master进程 6655发送 reload 命令，让它重新拉起Worker进程，再把新的Master进程关掉。<font color="red"> 因此：老的Master进程是不会退出的，保留以允许我们做版本回退</font>。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;nginx -v   # 此时这里是新的nginx版本号</span><br><span class="line"></span><br><span class="line">mv nginx nginx-1.16.0 # 将新的nginx文件命名为它的版本号</span><br><span class="line"></span><br><span class="line">mv nginx.old nginx # 将老的nginx命名为nginx</span><br><span class="line"></span><br><span class="line">ps -ef |grep nginx</span><br><span class="line"></span><br><span class="line">kill -USR1 6728(新的nginx的master的id)</span><br><span class="line"></span><br><span class="line">ps -ef |grep nginx</span><br><span class="line"></span><br><span class="line">.&#x2F;nginx -v # 已经是老版本的nginx了</span><br></pre></td></tr></table></figure><h1 id="5-切割日志文件"><a href="#5-切割日志文件" class="headerlink" title="5 切割日志文件"></a>5 切割日志文件</h1><p><img src="/2019/10/20/3-Nginx%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%BC%94%E7%A4%BA-%E9%87%8D%E8%BD%BD-%E7%83%AD%E9%83%A8%E7%BD%B2-%E5%88%87%E5%89%B2/e7955fcb-062b-424e-8db2-3f4cf82ba1ad.png" alt></p><p><img src="/2019/10/20/3-Nginx%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%BC%94%E7%A4%BA-%E9%87%8D%E8%BD%BD-%E7%83%AD%E9%83%A8%E7%BD%B2-%E5%88%87%E5%89%B2/ce22072b-b74f-4910-a13b-bc1a2407f577.png" alt></p><p>可以看到，haoransun_access.log日志文件已经有接近16M了，假设它此时已经很大了，想要将当前日志备份到另外一个文件中，而当前Nginx仍然正常运行，该如何做呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;nginx -s reopen即可</span><br></pre></td></tr></table></figure><p><img src="/2019/10/20/3-Nginx%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%BC%94%E7%A4%BA-%E9%87%8D%E8%BD%BD-%E7%83%AD%E9%83%A8%E7%BD%B2-%E5%88%87%E5%89%B2/d7da2cf6-25f5-4fc5-b3bd-3618ecaea6a1.png" alt></p><p><strong>./nginx -s  reopen 命令即可做到，但是太麻烦了</strong></p><p><font color="red">具体的便捷做法参考000-Nginx访问日志配置及信息详解.。。。。</font></p><h2 id="5-1-日志切割-bash脚本demo"><a href="#5-1-日志切割-bash脚本demo" class="headerlink" title="5.1 日志切割 bash脚本demo"></a>5.1 日志切割 bash脚本demo</h2><p>往往会每一天或者每一周执行一次日志切割。</p><p>可以先写成一个<strong>bash脚本</strong>，在此脚本中，先将 haoransun.log复制一下，在执行 -s reopen命令。<br>最后将此脚本放在<strong>crontab</strong>中，比如：</p><p>在logs目录下新建 history文件夹：用于存放历史日志文件。</p><p><strong>在logs目录下新建rotate.sh脚本</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">#Rotate the Nginx logs to prevent a single logfile from consuming too much disk space.</span><br><span class="line"># 此处 日志存放目录可以自定义，但一般存放在nginx相关的目录下</span><br><span class="line"># LOGS_PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;geek&#x2F;openstry&#x2F;nginx&#x2F;logs&#x2F;history</span><br><span class="line">LOGS_PATH&#x3D;&#x2F;home&#x2F;geek&#x2F;nginx&#x2F;logs&#x2F;history</span><br><span class="line"># CUR_LOGS_PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;geek&#x2F;openstry&#x2F;nginx&#x2F;logs</span><br><span class="line">CUR_LOGS_PATH&#x3D;&#x2F;home&#x2F;geek&#x2F;nginx&#x2F;logs</span><br><span class="line">YESTERDAY&#x3D;$(date -d &quot;yesterday&quot;+%Y-%m-%d )</span><br><span class="line">mv $(CUR_LOGS_PATH)&#x2F;haoransun_access.log $(LOGS_PATH)&#x2F;haoransun_access_$(YESTERDAY).log</span><br><span class="line"># 此处可以指定多个日志文件到指定目录下</span><br><span class="line">mv $(CUR_LOGS_PATH)&#x2F;error.log $(LOGS_PATH)&#x2F;error_$(YESTERDAY).log</span><br><span class="line">## 向 Nginx 主进程发送 USR1 信号 USR1 信号是重新打开日志文件</span><br><span class="line">kill -USR1 $(cat &#x2F;home&#x2F;geek&#x2F;nginx&#x2F;logs&#x2F;nginx.pid.oldbin)</span><br></pre></td></tr></table></figure><p><strong>查看当前周期任务</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">crontab -l</span><br><span class="line">crontab -e</span><br><span class="line">59 23 * * * root &#x2F;home&#x2F;geek&#x2F;nginx&#x2F;logx&#x2F;rotate.sh</span><br><span class="line">:wq</span><br><span class="line">再次 crontab -l 即可查看该脚本在每天的23点59分执行。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Author: haoransun&lt;br&gt;Wechat: SHR—97&lt;br&gt;&lt;font color=&quot;red&quot;&gt;学习来源：极客时间-Nginx核心知识100讲，本人购买课程后依据视频讲解汇总成个人见解。&lt;/font&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-检查80端口是否被占用&quot;&gt;&lt;a href=&quot;#1-检查80端口是否被占用&quot; class=&quot;headerlink&quot; title=&quot;1 检查80端口是否被占用&quot;&gt;&lt;/a&gt;1 检查80端口是否被占用&lt;/h1&gt;&lt;p&gt;yum install net-tools&lt;br&gt;netstat -ano | grep 80&lt;/p&gt;
&lt;h1 id=&quot;2-Nginx命令行&quot;&gt;&lt;a href=&quot;#2-Nginx命令行&quot; class=&quot;headerlink&quot; title=&quot;2 Nginx命令行&quot;&gt;&lt;/a&gt;2 Nginx命令行&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/10/20/3-Nginx%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%BC%94%E7%A4%BA-%E9%87%8D%E8%BD%BD-%E7%83%AD%E9%83%A8%E7%BD%B2-%E5%88%87%E5%89%B2/48cac2e3-d525-4835-88aa-ce13207e19d7.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Nginx" scheme="http://JavaSsun.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="http://JavaSsun.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>2-Nginx配置语法</title>
    <link href="http://javassun.github.io/2019/10/17/2-Nginx%E9%85%8D%E7%BD%AE%E8%AF%AD%E6%B3%95/"/>
    <id>http://javassun.github.io/2019/10/17/2-Nginx%E9%85%8D%E7%BD%AE%E8%AF%AD%E6%B3%95/</id>
    <published>2019-10-17T11:47:52.000Z</published>
    <updated>2020-04-16T06:37:32.844Z</updated>
    
    <content type="html"><![CDATA[<p>Author: haoransun<br>Wechat: SHR—97<br><font color="red">学习来源：极客时间-Nginx核心知识100讲，本人购买课程后依据视频讲解汇总成个人见解。</font></p><h1 id="1-Nginx-配置语法"><a href="#1-Nginx-配置语法" class="headerlink" title="1 Nginx 配置语法"></a>1 Nginx 配置语法</h1><p><img src="/2019/10/17/2-Nginx%E9%85%8D%E7%BD%AE%E8%AF%AD%E6%B3%95/f6f8a64a-ed92-4f0c-90f7-c498e28692f0.jpg" alt></p><a id="more"></a><h1 id="2-Nginx配置参数：时间单位"><a href="#2-Nginx配置参数：时间单位" class="headerlink" title="2 Nginx配置参数：时间单位"></a>2 Nginx配置参数：时间单位</h1><p><img src="/2019/10/17/2-Nginx%E9%85%8D%E7%BD%AE%E8%AF%AD%E6%B3%95/4440df2c-e938-4f44-9a0e-2a9a1b44b32c.jpg" alt></p><h1 id="3-Nginx配置参数：空间单位"><a href="#3-Nginx配置参数：空间单位" class="headerlink" title="3 Nginx配置参数：空间单位"></a>3 Nginx配置参数：空间单位</h1><p><img src="/2019/10/17/2-Nginx%E9%85%8D%E7%BD%AE%E8%AF%AD%E6%B3%95/2a8c6624-55b3-4554-b84c-8c448dc319b6.jpg" alt></p><h1 id="4-Nginx-语法示例"><a href="#4-Nginx-语法示例" class="headerlink" title="4 Nginx 语法示例"></a>4 Nginx 语法示例</h1><p><img src="/2019/10/17/2-Nginx%E9%85%8D%E7%BD%AE%E8%AF%AD%E6%B3%95/a7a40655-721d-4edb-b990-9d4ef7b60470.jpg" alt></p><ul><li><p><strong>http{} 就是一个指令块</strong></p></li><li><p><strong>include            mime.types; 这是一条指令</strong></p></li><li><p><strong>指令后 可以跟多个参数</strong></p></li><li><p><strong>指令间以;为分隔符，可以将多条指令放在一行</strong></p></li><li><p><strong>指令块可以有名字，如：upstream指令块 thwp,有些指令块是没有名字的，如： http、server等。<font color="red">有名与否是由提供这个指令块的Nginx 模块来决定的</font></strong></p></li><li><p><strong>3m:表示3分钟</strong></p></li><li><p><strong>limit_req_zone 10m 开启10MB大小的共享内存空间，给不同的Worker使用</strong></p></li></ul><hr><h1 id="5-http配置的指令块"><a href="#5-http配置的指令块" class="headerlink" title="5 http配置的指令块"></a>5 http配置的指令块</h1><p><img src="/2019/10/17/2-Nginx%E9%85%8D%E7%BD%AE%E8%AF%AD%E6%B3%95/a7901424-0375-4abf-869b-7a62ddb552b8.jpg" alt></p><ul><li><p><strong>http模块有四个大的指令块：http、server、location、upstream</strong></p></li><li><p><strong>http{}：表示 大括号内的所有指令都是由<font color="red">http模块去解析、执行。一个非 http模块：stream等是没有办法被解析的</font>。</strong></p></li><li><p><strong>upstream：表示<font color="red">上游服务</font> ，当Nginx需要与Tomcat/DJango等企业内网的其他应用服务交互时，可以定义此 upstream.</strong></p></li><li><p><strong>server：对应一个、组域名</strong></p></li><li><p><strong>location：一个URL表达式</strong></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Author: haoransun&lt;br&gt;Wechat: SHR—97&lt;br&gt;&lt;font color=&quot;red&quot;&gt;学习来源：极客时间-Nginx核心知识100讲，本人购买课程后依据视频讲解汇总成个人见解。&lt;/font&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-Nginx-配置语法&quot;&gt;&lt;a href=&quot;#1-Nginx-配置语法&quot; class=&quot;headerlink&quot; title=&quot;1 Nginx 配置语法&quot;&gt;&lt;/a&gt;1 Nginx 配置语法&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/10/17/2-Nginx%E9%85%8D%E7%BD%AE%E8%AF%AD%E6%B3%95/f6f8a64a-ed92-4f0c-90f7-c498e28692f0.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Nginx" scheme="http://JavaSsun.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="http://JavaSsun.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>1-Nginx的前世今生</title>
    <link href="http://javassun.github.io/2019/10/15/1-Nginx%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/"/>
    <id>http://javassun.github.io/2019/10/15/1-Nginx%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/</id>
    <published>2019-10-15T11:00:56.000Z</published>
    <updated>2020-04-16T06:36:53.812Z</updated>
    
    <content type="html"><![CDATA[<p>Author: haoransun<br>Wechat: SHR—97<br><font color="red">学习来源：极客时间-Nginx核心知识100讲，本人购买课程后依据视频讲解汇总成个人见解。</font></p><h1 id="1-Nginx的三个主要应用场景"><a href="#1-Nginx的三个主要应用场景" class="headerlink" title="1 Nginx的三个主要应用场景"></a>1 Nginx的三个主要应用场景</h1><p><img src="/2019/10/15/1-Nginx%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/2a504457-96be-4e0f-b1cf-ea6144ea59f4.jpg" alt></p><p><font color="red">流程解析：</font><br>一个<strong>Web</strong>请求从红色的线走下来后，会先经过<strong>Nginx</strong>,再到<strong>应用服务（Tomcat/Django）</strong>，再去访问<strong>Redis/MySQL</strong>这样的数据库，提供基本的数据功能，由此产生一个问题：应用服务由于要求开发效率高，所以它的运行效率很低，它的QPS/TPS/并发都是受限的，所以把这样的很多应用服务组成集群，向用户提供高可用性。当应用出现集群后，需要Nginx具有<strong>反向代理</strong>功能，将动态请求传导给应用服务，而应用服务构成集群，则又出现了两个需求，A：动态扩容。B：容灾。因此，<strong>反向代理</strong>必须具有负载均衡功能；其次，在这样的一个链路中，Nginx处于<strong>企业内网的边缘节点</strong>，随着网络链路的增长，用户体验的时延会增加，因此，如果能把一些所有用户看起来<strong>在一段时间内不变的动态内容缓存到Nginx</strong>中，由Nginx直接向用户提供访问，这样用户时延就会减少很多。反向代理引申出的另一个概念即是 <strong>缓存，加速我们的访问</strong>。（<strong>反向代理</strong>）</p><p>一些<strong>css/js/png</strong>等静态资源，是没有必要经由应用服务访问的，只需要通过本地文件 系统上放置的静态资源，直接由Nginx进行访问即可。（<strong>静态资源</strong>）</p><p>如果应用服务本身的性能有很多问题，但是数据库服务要比应用服务好的多，因为它的业务场景比较简单，并发性能/TPS都要远高于应用服务，因此可以使用Nginx直接访问数据库/Redis这样的数据库服务，利用Nginx强大的并发性能，实现Web防火墙这样复杂的业务功能（<strong>API服务</strong>）</p><a id="more"></a><h1 id="2-Nginx出现的缘由"><a href="#2-Nginx出现的缘由" class="headerlink" title="2 Nginx出现的缘由"></a>2 Nginx出现的缘由</h1><h2 id="2-1-互联网的数据量急速增长"><a href="#2-1-互联网的数据量急速增长" class="headerlink" title="2.1 互联网的数据量急速增长"></a>2.1 互联网的数据量急速增长</h2><p>互联网的快速普及<br>全球化<br>物联网</p><h2 id="2-2-摩尔定律：性能提升"><a href="#2-2-摩尔定律：性能提升" class="headerlink" title="2.2 摩尔定律：性能提升"></a>2.2 摩尔定律：性能提升</h2><h2 id="2-3-低效的Apache-：一个连接对应一个进程"><a href="#2-3-低效的Apache-：一个连接对应一个进程" class="headerlink" title="2.3 低效的Apache ：一个连接对应一个进程"></a>2.3 低效的Apache ：一个连接对应一个进程</h2><p>当有百万个连接时，Apache并不会建造出百万个进程，就算生成了，进程间的切换会损耗极大的性能。而Nginx可以轻松应对百万级的连接。</p><h1 id="3-Nginx的优点"><a href="#3-Nginx的优点" class="headerlink" title="3 Nginx的优点"></a>3 Nginx的优点</h1><p>高并发、高性能<br><strong>高并发</strong>往往需要我们对每个连接所使用的内存尽量的少即可达到，具有高并发的同时又能达到<strong>高性能</strong>，需要非常好的设计。Nginx可以达到什么样的标准呢？如现在的主流服务器（32核，64G）可以轻松地达到数千万并发连接，如果是处理简单的静态资源请求，可以达到100W的RPS(REQUEST PER SECOND)<br>可扩展性好<br>主要体现在<strong>模块化设计</strong>，非常的稳定。使其的第三方模块-生态圈非常稳定、丰富。甚至是有Tengene（淘宝修改了Nginx的源源码，做了定制化开发）/OpenResty（Lua语言开发）这样的第三方插件在他们浙之上，又生成了一套生态圈。<br>高可靠性<br>Nginx可以在服务器上持续不间断的运行数年。对于Nginx这样的一个高并发、高性能的反向代理服务器而言，往往运行在企业内网的边缘节点上，此时，若企业想提供<strong>5个9</strong>或更高的服务时，Nginx的宕机可能1年就1s的时间间隙。<br>热部署<br>在不停止服务的情况下，升级Nginx,此功能<strong>非常重要</strong>，因为在Nginx上可能跑了数百万的并发连接。如果是普通服务，则直接kill掉进程再重启即可。但对于Nginx而言，kill掉Nginx进程，会导致操作系统为所有的已建立连接的客户端发送<strong>TCP中的reset复位包</strong>，然而很多客户端是没有办法，很好的处理复位请求的，<strong>在大并发场景下，一些偶然事件就会导致非常恶劣的结果，因此热部署极其重要</strong><br>BSD许可证<br>开源且可商用</p><h1 id="4-Nginx的组成"><a href="#4-Nginx的组成" class="headerlink" title="4 Nginx的组成"></a>4 Nginx的组成</h1><p><img src="/2019/10/15/1-Nginx%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/e604a666-da3c-4a91-9866-53e81c4ff90f.jpg" alt></p><h2 id="4-1-Nginx二进制可执行文件"><a href="#4-1-Nginx二进制可执行文件" class="headerlink" title="4.1 Nginx二进制可执行文件"></a>4.1 Nginx二进制可执行文件</h2><p>由Nginx自身的官方模块+我们编译的第三方模块一起构建的文件，相当于汽车本身（有完整的系统，所有的功能都由它提供）</p><h2 id="4-2-Nginx-conf配置文件"><a href="#4-2-Nginx-conf配置文件" class="headerlink" title="4.2 Nginx.conf配置文件"></a>4.2 Nginx.conf配置文件</h2><p>相当于汽车的驾驶员。</p><h2 id="4-3-access-log访问日志"><a href="#4-3-access-log访问日志" class="headerlink" title="4.3 access.log访问日志"></a>4.3 access.log访问日志</h2><p>汽车经过所形成的GPS轨迹。</p><h2 id="4-4-error-log错误日志"><a href="#4-4-error-log错误日志" class="headerlink" title="4.4 error.log错误日志"></a>4.4 error.log错误日志</h2><p>黑匣子：定位问题。</p><h1 id="5-Nginx的版本（nginx-org-开源-nginx-com-商业）"><a href="#5-Nginx的版本（nginx-org-开源-nginx-com-商业）" class="headerlink" title="5 Nginx的版本（nginx.org:开源 nginx.com:商业）"></a>5 Nginx的版本（nginx.org:开源 nginx.com:商业）</h1><p>单数号：最新按本（新功能有待考验）<br>偶数号：稳定版本（一般选择此版本）<br>版本号-feature-bugfix-change<br>openresty.com openresty.org</p><h1 id="6-编译出适合自己的Nginx"><a href="#6-编译出适合自己的Nginx" class="headerlink" title="6 编译出适合自己的Nginx"></a>6 编译出适合自己的Nginx</h1><p>nginx.org网址 —–&gt; 选择download<br>在选中的版本上 —–&gt; 右键选择复制链接地址<br>在linux系统中  —–&gt; wget 下载地址即可<br><font color="red">ps:Nginx依赖一些第三方软件包，如gcc、gcc-c++、openssl、pcre、zlib,详细见0-Nginx安装过程</font></p><h1 id="7-目录解析"><a href="#7-目录解析" class="headerlink" title="7 目录解析"></a>7 目录解析</h1><p>解压压缩包： tar -zxvf nginx-xxx.tar.gz<br>进入解压源码包： cd nginx-xxx<br><img src="/2019/10/15/1-Nginx%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/f08f5668-a4bd-4fe4-a790-c25c437b69e3.png" alt></p><p><strong>auto：</strong> 其中主要有四个子目录（cc:用于编译，lib库、os库对操作系统的判断，types），其他的文件是为了辅助<strong>config</strong>脚本执行时判定 当前的Nginx支持哪些模块、当前的操作系统有哪些特性供Nginx使用。</p><p><strong>CHANGES：</strong> Nginx每一个版本提供了哪些 Features、BugFix、Changes这三类特性。</p><p><strong>CHANGES.ru：</strong> 因为作者是 俄罗斯人，所以提供了一个俄罗斯语言的变更说明书。</p><p><strong>conf：</strong> 示例文件，将Nginx安装好后，为了方便运维去配置，会将此目录中的示例文件拷贝到安装目录。</p><p><strong>configure：</strong>这个脚本是用来生成中间文件、执行编译前的一个必备动作。</p><p><strong>contrib：</strong>提供了两个pl脚本和vim的工具，在没有使用vim工具时去打开nginx配置文件，会发现色彩没有什么变化（nginx语法没有在vim），此时，需要将contrib文件夹下的所有文件拷贝到我们自己的vim目录中，即：</p><p><strong>（mac:cp -r contrib/vim/* ~/.vim/ ）</strong></p><p>（ <font color="red">centos:自定义安装vim的话，使用 whereis vim查看vim的安装路径，vimfiles就在 /usr/share/vim/下<br>所以：cp -r contrib/vim/* /usr/share/vim/vimfiles/<br>此时再次打开nginx.conf文件，发现语法高亮显示</font>）<br><img src="/2019/10/15/1-Nginx%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/a11a6806-0bf0-4908-9f46-2dcb2b590271.png" alt></p><p><strong>html：</strong> 提供了两个标准的html文件。如图：<img src="/2019/10/15/1-Nginx%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/ae1df995-18a4-4490-97e6-93aa397516f7.png" alt><br>一个是发现500错误的时候重定向到当前指定文件。<br>一个是默认的Nginx的欢迎页面。</p><p><strong>man：</strong>Nginx的帮助文件<img src="/2019/10/15/1-Nginx%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/f5e50c6d-0b16-4494-9580-169a0fe8e3c3.png" alt></p><p><strong>src：</strong>Nginx的源代码。<img src="/2019/10/15/1-Nginx%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/5d35e8e4-1b4c-482c-ad22-1b7af2a3d92f.png" alt>。即Nginx的框架都在这些源代码中。</p><h1 id="8开始编译"><a href="#8开始编译" class="headerlink" title="8开始编译"></a>8开始编译</h1><h2 id="8-1-编译前首先观察configure都支持哪些参数？"><a href="#8-1-编译前首先观察configure都支持哪些参数？" class="headerlink" title="8.1 编译前首先观察configure都支持哪些参数？"></a>8.1 编译前首先观察configure都支持哪些参数？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;configure --help | more</span><br></pre></td></tr></table></figure><p><img src="/2019/10/15/1-Nginx%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/b42567c1-87be-482a-86b1-b3779ec76e2c.png" alt><br><img src="/2019/10/15/1-Nginx%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/727a8526-4163-4ed7-9c65-72dcaf6cf2ce.png" alt><br><img src="/2019/10/15/1-Nginx%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/bdf16353-460a-49e4-9991-85b84e615d49.png" alt><br><strong>此处主要分为3大块参数内容</strong>：</p><ul><li><p>确定Nginx执行中会去找哪些目录下的文件作为它的辅助文件；如：使用动态模块，则 –modules-path=PATH 就会起作用；确定Nginx.log文件放在那里，则 –lock-path=PATH会起作用；然而，<font color="red">如果没有任何变动的话，只需要指定 –prefix=PATH即可,所有的其他的文件会在prefix目录下建立相应的文件夹</font>。</p></li><li><p>确定使用那些模块，而不使用那些模块。如 –with 与 –without, –with ：需要显示指定的时候，意味着Nginx默认是不会加载此模块的。 –without: 意味着默认会编译到Nginx中，如果加上了，则是显示取消编译的，移出默认的Nginx模块中。</p></li><li><p>确定Nginx编译时所需要的一些特殊参数。如 –with-cc=Path –with-cpp=Path 就是使用gcc编译时需要加一些什么样的优化参数；–with-debug 打印debug级别的日志，–with-pcre –with-zlib 这是需要加一些第三方的模块等等。</p></li></ul><h2 id="8-2-编译前的依赖包的安装"><a href="#8-2-编译前的依赖包的安装" class="headerlink" title="8.2 编译前的依赖包的安装"></a>8.2 编译前的依赖包的安装</h2><p>参看 附件 + 0篇内容，此处省略。。。。</p><h2 id="8-3-生成指定目录下的-Makefile，为下一步编译做准备"><a href="#8-3-生成指定目录下的-Makefile，为下一步编译做准备" class="headerlink" title="8.3 生成指定目录下的 Makefile，为下一步编译做准备"></a>8.3 生成指定目录下的 Makefile，为下一步编译做准备</h2><p>配置 Nginx的安装目录   /home/geek/nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">目标目录不存在，会自动创建</span><br><span class="line">.&#x2F;configure --prefix&#x3D;&#x2F;home&#x2F;geek&#x2F;nginx</span><br><span class="line">如果没有任何报错，则Nginx编译成功，如下图</span><br></pre></td></tr></table></figure><p><img src="/2019/10/15/1-Nginx%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/30d9368f-43a9-4413-bef9-08f8311a1657.png" alt></p><p>在 ./configure 成功后，会生成一些中间文件，存储在 /objs 文件夹下。<br><img src="/2019/10/15/1-Nginx%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/14168daf-02ec-4203-812a-efc660721862.png" alt><br><strong>最重要的是会生成<font color="red"> ngx_modules.c：它决定了我们执行编译时有哪些模块，会被编译到Nginx中</font></strong>。</p><p><strong>所有被编译的模块都会列出来，最后形成一份 ngx_modules[] 数组</strong> <img src="/2019/10/15/1-Nginx%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/20212437-7463-4e77-9fc2-de2c6a5b5700.png" alt></p><h2 id="8-4-编译"><a href="#8-4-编译" class="headerlink" title="8.4 编译"></a>8.4 编译</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@haoransun nginx-1.14.2]# make</span><br><span class="line">编译完成后，如果没有错误，就可以看到生成了大量的中间文件，如下图，他们都在 objs文件夹下。</span><br></pre></td></tr></table></figure><p><img src="/2019/10/15/1-Nginx%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/afa43e4b-c314-4481-a329-a1515a83f24b.jpg" alt></p><h2 id="8-5-为什么要知道Nginx的目标文件是放在objs下呢？"><a href="#8-5-为什么要知道Nginx的目标文件是放在objs下呢？" class="headerlink" title="8.5 为什么要知道Nginx的目标文件是放在objs下呢？"></a>8.5 为什么要知道Nginx的目标文件是放在objs下呢？</h2><p>如果是做<font color="red">Nginx版本升级</font>，此时不能执行** make install** ，而是需要从这里将目标文件 Nginx<br>拷贝到安装目录中，</p><p>C语言编译时生成的所有重要文件，都会存放在 *<em>objs/src目录 *</em>中。</p><p>如果使用了动态模块，则动态模块编译生成的<strong>so</strong>动态文件，也会放在<strong>objs 目录</strong>中。</p><h1 id="9-安装（首次安装时，可以使用此命令）"><a href="#9-安装（首次安装时，可以使用此命令）" class="headerlink" title="9 安装（首次安装时，可以使用此命令）"></a>9 安装（首次安装时，可以使用此命令）</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@haoransun nginx-1.14.2]# make install</span><br></pre></td></tr></table></figure><h1 id="10-安装目录下的目录解析"><a href="#10-安装目录下的目录解析" class="headerlink" title="10 安装目录下的目录解析"></a>10 安装目录下的目录解析</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@haoransun nginx-1.14.2]# cd &#x2F;home&#x2F;geek&#x2F;nginx&#x2F;</span><br><span class="line">ll</span><br><span class="line">drwxr-xr-x. 2 root root 4096 5月  30 07:43 conf</span><br><span class="line">drwxr-xr-x. 2 root root 4096 5月  30 07:43 html</span><br><span class="line">drwxr-xr-x. 2 root root 4096 5月  30 07:43 logs</span><br><span class="line">drwxr-xr-x. 2 root root 4096 5月  30 07:43 sbin</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Author: haoransun&lt;br&gt;Wechat: SHR—97&lt;br&gt;&lt;font color=&quot;red&quot;&gt;学习来源：极客时间-Nginx核心知识100讲，本人购买课程后依据视频讲解汇总成个人见解。&lt;/font&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-Nginx的三个主要应用场景&quot;&gt;&lt;a href=&quot;#1-Nginx的三个主要应用场景&quot; class=&quot;headerlink&quot; title=&quot;1 Nginx的三个主要应用场景&quot;&gt;&lt;/a&gt;1 Nginx的三个主要应用场景&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2019/10/15/1-Nginx%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/2a504457-96be-4e0f-b1cf-ea6144ea59f4.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;red&quot;&gt;流程解析：&lt;/font&gt;&lt;br&gt;一个&lt;strong&gt;Web&lt;/strong&gt;请求从红色的线走下来后，会先经过&lt;strong&gt;Nginx&lt;/strong&gt;,再到&lt;strong&gt;应用服务（Tomcat/Django）&lt;/strong&gt;，再去访问&lt;strong&gt;Redis/MySQL&lt;/strong&gt;这样的数据库，提供基本的数据功能，由此产生一个问题：应用服务由于要求开发效率高，所以它的运行效率很低，它的QPS/TPS/并发都是受限的，所以把这样的很多应用服务组成集群，向用户提供高可用性。当应用出现集群后，需要Nginx具有&lt;strong&gt;反向代理&lt;/strong&gt;功能，将动态请求传导给应用服务，而应用服务构成集群，则又出现了两个需求，A：动态扩容。B：容灾。因此，&lt;strong&gt;反向代理&lt;/strong&gt;必须具有负载均衡功能；其次，在这样的一个链路中，Nginx处于&lt;strong&gt;企业内网的边缘节点&lt;/strong&gt;，随着网络链路的增长，用户体验的时延会增加，因此，如果能把一些所有用户看起来&lt;strong&gt;在一段时间内不变的动态内容缓存到Nginx&lt;/strong&gt;中，由Nginx直接向用户提供访问，这样用户时延就会减少很多。反向代理引申出的另一个概念即是 &lt;strong&gt;缓存，加速我们的访问&lt;/strong&gt;。（&lt;strong&gt;反向代理&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;一些&lt;strong&gt;css/js/png&lt;/strong&gt;等静态资源，是没有必要经由应用服务访问的，只需要通过本地文件 系统上放置的静态资源，直接由Nginx进行访问即可。（&lt;strong&gt;静态资源&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;如果应用服务本身的性能有很多问题，但是数据库服务要比应用服务好的多，因为它的业务场景比较简单，并发性能/TPS都要远高于应用服务，因此可以使用Nginx直接访问数据库/Redis这样的数据库服务，利用Nginx强大的并发性能，实现Web防火墙这样复杂的业务功能（&lt;strong&gt;API服务&lt;/strong&gt;）&lt;/p&gt;
    
    </summary>
    
    
      <category term="Nginx" scheme="http://JavaSsun.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="http://JavaSsun.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>0-Nginx访问日志配置及信息详解</title>
    <link href="http://javassun.github.io/2019/10/11/0-Nginx%E8%AE%BF%E9%97%AE%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BF%A1%E6%81%AF%E8%AF%A6%E8%A7%A3/"/>
    <id>http://javassun.github.io/2019/10/11/0-Nginx%E8%AE%BF%E9%97%AE%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BF%A1%E6%81%AF%E8%AF%A6%E8%A7%A3/</id>
    <published>2019-10-11T10:39:56.000Z</published>
    <updated>2020-04-16T06:34:12.143Z</updated>
    
    <content type="html"><![CDATA[<p>Author: haoransun<br>Wechat: SHR—97<br><font color="red">学习来源：极客时间-Nginx核心知识100讲，本人购买课程后依据视频讲解汇总成个人见解。</font></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>通过访问日志，可以知晓用户的地址，网站的哪些部分最受欢迎。用户的浏览时间，对大多数用户的浏览器做出针对性优化。</p><p>Nginx会把每个用户访问的日志信息记录到指定的日志文件里，供网站管理员分析用户浏览行为等，此功能又ngx_http_log_module 模块负责。</p><a id="more"></a><h2 id="1-访问日志参数"><a href="#1-访问日志参数" class="headerlink" title="1 访问日志参数"></a>1 访问日志参数</h2><p>Nginx访问日志主要有两个参数控制</p><ul><li><strong><font color="red">log_format</font></strong>：用来定义记录日志的格式（可以定义多种日志格式，取不同名字即可）。</li><li><strong><font color="red">access_log</font></strong>：用来指定日至文件的路径及使用的何种日志格式记录日志。</li></ul><h3 id="1-1-log-format与-access-log的默认值"><a href="#1-1-log-format与-access-log的默认值" class="headerlink" title="1.1 log_format与 access_log的默认值"></a>1.1 log_format与 access_log的默认值</h3><p><img src="/2019/10/11/0-Nginx%E8%AE%BF%E9%97%AE%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BF%A1%E6%81%AF%E8%AF%A6%E8%A7%A3/10c95625-1ad9-4c6a-b66e-30822bc362a3.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">access_log logs&#x2F;access.log main;</span><br></pre></td></tr></table></figure><p><strong>logs/access.log:这个为日志文件的存放路径，从安装目录开始，意思绝对路径为：/home/geek/nginx/logs/access.log</strong></p><p><strong>main：日志格式，通常为 combined</strong><br>若不想记录Nginx的日志：access_log off;</p><h3 id="1-2-log-format语法格式及参数语法说明"><a href="#1-2-log-format语法格式及参数语法说明" class="headerlink" title="1.2 log_format语法格式及参数语法说明"></a>1.2 log_format语法格式及参数语法说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">    log_format    &lt;NAME&gt;    &lt;Strin­­­g&gt;;</span><br><span class="line"></span><br><span class="line">    关键字         格式标签   日志格式</span><br><span class="line"></span><br><span class="line">    关键字：其中关键字error_log不能改变</span><br><span class="line"></span><br><span class="line">    格式标签：格式标签是给一套日志格式设置一个独特的名字</span><br><span class="line"></span><br><span class="line">    日志格式：给日志设置格式</span><br><span class="line"></span><br><span class="line">log_format格式变量：</span><br><span class="line"></span><br><span class="line">    $remote_addr  #记录访问网站的客户端地址</span><br><span class="line"></span><br><span class="line">    $remote_user  #远程客户端用户名</span><br><span class="line"></span><br><span class="line">    $time_local  #记录访问时间与时区</span><br><span class="line"></span><br><span class="line">    $request  #用户的http请求起始行信息</span><br><span class="line"></span><br><span class="line">    $status  #http状态码，记录请求返回的状态码，例如：200、301、404等</span><br><span class="line"></span><br><span class="line">    $body_bytes_sent  #服务器发送给客户端的响应body字节数</span><br><span class="line"></span><br><span class="line">    $http_referer  #记录此次请求是从哪个连接访问过来的，可以根据该参数进行防盗链设置。</span><br><span class="line"></span><br><span class="line">    $http_user_agent  #记录客户端访问信息，例如：浏览器、手机客户端等</span><br><span class="line"></span><br><span class="line">    $http_x_forwarded_for  #当前端有代理服务器时，设置web节点记录客户端地址的配置，此参数生效的前提是代理服务器也要进行相关的x_forwarded_for设置</span><br></pre></td></tr></table></figure><p><img src="/2019/10/11/0-Nginx%E8%AE%BF%E9%97%AE%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BF%A1%E6%81%AF%E8%AF%A6%E8%A7%A3/4b4b4565ebf3424cb0c325dbd6bbcfd1.png" alt></p><h3 id="1-3-x-forwarded-for"><a href="#1-3-x-forwarded-for" class="headerlink" title="1.3 x_forwarded_for"></a>1.3 x_forwarded_for</h3><p>通常web服务器放在反向代理的后面，这样就不能获取到客户的IP地址了，通过$remote_addr拿到的IP地址是反向代理服务器的iP地址。反向代理服务器在转发请求的http头信息中，可以增加x_forwarded_for信息，用以记录原有客户端的IP地址和原来客户端请求的服务器地址。</p><p>注意：<br>在定义日志目录中要注意的是，nginx进程设置的用户和组必须有对该路径创建文件的权限，<br>假设nginx的usr指令设置的用户名 和用户组都是www，而logs 目录的用户名和组是root，那么日志文件将无法被创建。</p><p>用nginx做前端代理后，我们发HTTP_X_FORWARDED_FOR 无法获取到客户端真实的IP地址了。</p><p>原因 nginx 默认并不会增加 X_FORWARDED_FOR 头信息，我们给他加上就好了。简单配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F; &#123;</span><br><span class="line">    proxy_pass          http:&#x2F;&#x2F;www.xxx.com;</span><br><span class="line">    proxy_set_header    Host             $host;</span><br><span class="line">    proxy_set_header    X-Real-IP        $remote_addr;</span><br><span class="line">    proxy_set_header    X-Forwarded-For  $proxy_add_x_forwarded_for;    &#x2F;&#x2F;别忘了这一句</span><br><span class="line">    proxy_set_header    HTTP_X_FORWARDED_FOR $remote_addr;              &#x2F;&#x2F;或是加上这一句</span><br><span class="line">    proxy_redirect      default;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启nginx 加载新的配置文件，就可以获取客户端真实的IP地址了。</p><p><strong>通常情况下用以上配置即可，可以将main换成combined(默认的日志格式)，其他不变即可。</strong></p><h3 id="1-4-access-log语法格式及参数语法说明"><a href="#1-4-access-log语法格式及参数语法说明" class="headerlink" title="1.4 access_log语法格式及参数语法说明"></a>1.4 access_log语法格式及参数语法说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">  access_log    &lt;FILE&gt;    &lt;NAME&gt;;</span><br><span class="line"></span><br><span class="line">    关键字         日志文件   格式标签</span><br><span class="line"></span><br><span class="line">    关键字：其中关键字error_log不能改变</span><br><span class="line"></span><br><span class="line">    日志文件：可以指定任意存放日志的目录</span><br><span class="line"></span><br><span class="line">    格式标签：给日志文件套用指定的日志格式</span><br><span class="line"></span><br><span class="line">其他语法：</span><br><span class="line"></span><br><span class="line">    access_log    off;  #关闭access_log，即不记录访问日志</span><br><span class="line"></span><br><span class="line">    access_log path [format [buffer&#x3D;size [flush&#x3D;time]] [if&#x3D;condition]];</span><br><span class="line"></span><br><span class="line">    access_log path format gzip[&#x3D;level] [buffer&#x3D;size] [flush&#x3D;time] [if&#x3D;condition];</span><br><span class="line"></span><br><span class="line">    access_log syslog:server&#x3D;address[,parameter&#x3D;value] [format [if&#x3D;condition]];</span><br><span class="line"></span><br><span class="line">    说明：</span><br><span class="line"></span><br><span class="line">    buffer&#x3D;size  #为存放访问日志的缓冲区大小</span><br><span class="line"></span><br><span class="line">    flush&#x3D;time  #为缓冲区的日志刷到磁盘的时间</span><br><span class="line"></span><br><span class="line">    gzip[&#x3D;level]  #表示压缩级别</span><br><span class="line"></span><br><span class="line">    [if &#x3D; condition]  #表示其他条件</span><br></pre></td></tr></table></figure><p><strong>一般场景这些参数都无需配置，极端优化才有可能会<br>考虑这些参数</strong>。</p><h4 id="1-5-设置刷盘策略："><a href="#1-5-设置刷盘策略：" class="headerlink" title="1.5 设置刷盘策略："></a>1.5 设置刷盘策略：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">access_log &#x2F;home&#x2F;geek&#x2F;nginx&#x2F;logs&#x2F;access.log buffer&#x3D;32k flush&#x3D;5s;</span><br></pre></td></tr></table></figure><p><strong>buffer 满32k才刷盘；假如buffer不满5s强制刷盘。</strong></p><h3 id="1-6-其他："><a href="#1-6-其他：" class="headerlink" title="1.6 其他："></a>1.6 其他：</h3><p>error_log：配置错误日志，例如上例。</p><p>open_log_file_cache：<br>对于每一条日志记录，都将是先打开文件，再写入日志，然后关闭。可以使用open_log_file_cache来设置日志文件缓存(默认是off)。语法:</p><p>open_log_file_cache max=N [inactive= time] [min_uses=N] [valid= time];</p><p>参数注释如下：</p><ul><li>max:设置缓存中的最大文件描述符数量，如果缓存被占满，采用LRU算法将描述符关闭。</li><li>inactive:设置存活时间，默认是10s</li><li>min_uses:设置在inactive时间段内，日志文件最少使用多少次后，该日志文件描述符记入缓存中，默认是1次</li><li>valid:设置检查频率，默认60s</li><li>open_log_file_cache max=1000 inactive=20s valid=1m min_uses=2;</li></ul><h2 id="2-日志分析："><a href="#2-日志分析：" class="headerlink" title="2 日志分析："></a>2 日志分析：</h2><p>通过对日志格式的定义，就可以使用常见的 Linux 命令行工具进行分析了：</p><p>查找访问频率最高的 URL 和次数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat access.log | awk -F ‘^A’ ‘&#123; print $10&#125;’ | sort | uniq -c</span><br></pre></td></tr></table></figure><p>查找当前日志文件 500 错误的访问：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat access.log | awk -F ‘^A’ ‘&#123; if( $5 &#x3D;&#x3D; 500) print $0&#125;’</span><br></pre></td></tr></table></figure><p>查找当前日志文件 500 错误的数量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat access.log | awk -F ‘^A’ ‘&#123; if( $5 &#x3D;&#x3D; 500) print $0&#125;’ | wc -l</span><br></pre></td></tr></table></figure><p>查找某一分钟内 500 错误访问的数量:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat access.log | awk -F ‘^A’ ‘&#123; if( $5 &#x3D;&#x3D; 500) print $0&#125;’ | grep ’09:00’ | wc -l</span><br></pre></td></tr></table></figure><p>查找耗时超过 1s 的慢请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f access.log | awk -F ‘^A’ ‘&#123; if( $6&gt;1) print $0&#125;’</span><br></pre></td></tr></table></figure><h2 id="3-日志切割"><a href="#3-日志切割" class="headerlink" title="3 日志切割"></a>3 日志切割</h2><p>为了使Nginx的日志文件存储更合理、有序，我们需要将日志文件进行分开存储。</p><p>可以按时间来分开存储。今天的日志文件存储到一个文件中，明天的日志文件则存储到另一个新的文件中等等。</p><p>有两种方式：</p><ul><li><strong>1 手动切割</strong><br>（1）进入 logs目录，执行命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv access.log xxx(随便起个名).log</span><br></pre></td></tr></table></figure>即将以前的日志文件重命名为一个新的名字的日志文件。<br>（2）执行命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -USR1 主进程号（需要先用 ps -ef| grep nginx命令找到master的进程号）</span><br></pre></td></tr></table></figure>kill -USR1 主进程号 ：</li></ul><p>在logs目录ls一个，会发现又自动多出了一个日志文件(这个日志文件的命名来源于nginx.conf文件里的access_log的路径)，并且里面无内容。这个文件就是切割出来的新文件，再有日志会往这里面写，而不会操作老日志文件。</p><ul><li><strong>2 自动进行切割</strong><br>（1）首先创建个sh文件（称为批处理日志文件），进入nginx的logs目录运行命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch cutlog.sh（文件名自定义，后缀.sh即可）</span><br></pre></td></tr></table></figure>（2）编辑cutlog.sh文件。输入如下内容：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim cutlog.sh</span><br><span class="line"></span><br><span class="line">D&#x3D;$(date +%Y%m%d)</span><br><span class="line">LOGS_PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs</span><br><span class="line">mv &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;access.log &#x2F;$&#123;LOGS_PATH&#125;&#x2F;$&#123;D&#125;.log</span><br><span class="line">kill -USR1 $(cat &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;nginx.pid)</span><br></pre></td></tr></table></figure><p>说明：<br>D=$(date +%Y%m%d)，声明个变量，名为D（自定义）,值为date（Linux自带的，类似于函数，用于获取当前时间，并且格式为年月日）</p><p>${D}：引用上面变量名为D的变量</p><p>$(cat /usr/local/nginx/nginx.pid)：cat命令意思是查看。nginx.pid：存储的是nginx的主进程号。连起来的意思就是查看nginx主进程号，带上$(xx)就是说拿到xx</p><p>（3）定时执行某个文件，输入如下命令：(注意：运行crontab命令需要先用yum进行安装crontab，否则会出现command not found)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br><span class="line">crontab：定时执行某个文件</span><br><span class="line">crontab -e：编辑定时执行的内容</span><br></pre></td></tr></table></figure><p>（4）执行完（3）后会出现编辑器，输入如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">23 59 *** &#x2F;bin&#x2F;bash &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;cutlog.sh</span><br></pre></td></tr></table></figure><p>即：在每天23点59分定时执行cutlog.sh文件，这样就实现了每天定时切割日志文件了。</p><p>原理：只是将手动切割写成个脚本。</p><p>如有需要每隔1个月就备份日志到其他地方并删除原位置的日志等类似需求都可以写个shell脚本，然后用linux的crontab来定时执行。</p><h2 id="4-实例"><a href="#4-实例" class="headerlink" title="4 实例"></a>4 实例</h2><p>往往需要要对access_log、error_log日志进行切割。切割日志一般利用USR1信号让nginx产生新的日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bashlogdir&#x3D;&quot;&#x2F;data&#x2F;logs&#x2F;nginx&quot; pid&#x3D;&#96;cat $logdir&#x2F;nginx.pid&#96; DATE&#x3D;&#96;date -d &quot;1 hours ago&quot; +%Y%m%d%H&#96; DATE_OLD&#x3D;&#96;date -d &quot;7 days ago&quot; +%Y%m%d&#96; for i in &#96;ls $logdir&#x2F;*access.log&#96;; do mv $i $i. $DATE done for i in &#96;ls $logdir&#x2F;*error.log&#96;; do mv $i $i. $DATE done kill -s USR1 $pid rm -v $logdir &quot;&#x2F;access.log.&quot; $DATE_OLD*rm -v $logdir&quot;&#x2F;error.log.&quot; $DATE_OLD*</span><br></pre></td></tr></table></figure><p><strong>1、分析：</strong>将上面的脚本放到crontab中，每小时执行一次（0 ），这样每小时会把当前日志重命名成一个新文件；然后发送USR1这个信号让Nginx 重新生成一个新的日志。（相当于备份日志）将前7天的日志删除；</p><p><strong>2、说明：</strong>在没有执行kill -USR1 $pid之前，即便已经对文件执行了mv命令而改变了文件名称，nginx还是会向新命名的文件”*access.log.2016032623”照常写入日志数据的。原因在于：linux系统中，内核是根据文件描述符来找文件的。</p><p><strong>3、logrotates：</strong>使用系统自带的logrotates，也可以实现nginx的日志分割，查看其bash源码，发现也是发送USR1这个信号。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Author: haoransun&lt;br&gt;Wechat: SHR—97&lt;br&gt;&lt;font color=&quot;red&quot;&gt;学习来源：极客时间-Nginx核心知识100讲，本人购买课程后依据视频讲解汇总成个人见解。&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;通过访问日志，可以知晓用户的地址，网站的哪些部分最受欢迎。用户的浏览时间，对大多数用户的浏览器做出针对性优化。&lt;/p&gt;
&lt;p&gt;Nginx会把每个用户访问的日志信息记录到指定的日志文件里，供网站管理员分析用户浏览行为等，此功能又ngx_http_log_module 模块负责。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Nginx" scheme="http://JavaSsun.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="http://JavaSsun.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Swagger2学习与集成</title>
    <link href="http://javassun.github.io/2019/10/09/Swagger2%E5%AD%A6%E4%B9%A0%E4%B8%8E%E9%9B%86%E6%88%90/"/>
    <id>http://javassun.github.io/2019/10/09/Swagger2%E5%AD%A6%E4%B9%A0%E4%B8%8E%E9%9B%86%E6%88%90/</id>
    <published>2019-10-09T11:32:34.000Z</published>
    <updated>2020-04-16T06:41:52.808Z</updated>
    
    <content type="html"><![CDATA[<p>Author: haoransun<br>Wechat: SHR—97</p><h1 id="1-Swagger2介绍"><a href="#1-Swagger2介绍" class="headerlink" title="1 Swagger2介绍"></a>1 Swagger2介绍</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;现在都奉行<strong>前后端分离</strong>和<strong>微服务</strong>大行其道，分微服务及前后端分离后，前后端开发的沟通成本就增加了。所以一款强大的<strong>RestFul API</strong> 文档则十分重要，而目前在后端领域，基本上就是<font color="red">Swagger</font>的天下了。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>Swagger</strong>是一款RestFul接口的文档在线自动生成、功能测试功能框架。一个规范和完整的框架，用于生成、描述、调用和可视化RestFul风格的Web服务，加上Swagger-ui，可以有很好的呈现。</p><a id="more"></a><h1 id="2-Spring-Boot-集成"><a href="#2-Spring-Boot-集成" class="headerlink" title="2 Spring Boot 集成"></a>2 Spring Boot 集成</h1><p>这里选用的Swagger版本：2.8.0</p><h2 id="2-1-POM依赖"><a href="#2-1-POM依赖" class="headerlink" title="2.1 POM依赖"></a>2.1 POM依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--swagger--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;springfox-swagger2&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.7.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;springfox-swagger-ui&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.7.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="2-2-编写配置文件-Swagger2Config-java"><a href="#2-2-编写配置文件-Swagger2Config-java" class="headerlink" title="2.2 编写配置文件(Swagger2Config.java)"></a>2.2 编写配置文件(Swagger2Config.java)</h2><p>主要是添加注解 <strong>@EnableSwagger2</strong> 和定义 <strong>Docket</strong> 的 <strong>bean</strong>类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">@EnableSwagger2</span><br><span class="line">@Configuration</span><br><span class="line">public class SwaggerConfig&#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;是否开启Swagger,正式环境一般是需要关闭的，可根据SpringBoot的多环境配置进行设置</span><br><span class="line">    @Value(value&#x3D;&quot;$&#123;swagger.enabled&#125;&quot;)</span><br><span class="line">    Boolean swaggerEnabled;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Docket createRestApi()&#123;</span><br><span class="line">              return new Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo())</span><br><span class="line">              &#x2F;&#x2F;是否开启</span><br><span class="line">             .enable(swaggerEnabled).select()</span><br><span class="line">             &#x2F;&#x2F;扫描的路径包</span><br><span class="line">            .apis(RequestHandlerSelectors.basePackage(&quot;com.example.demo.controller&quot;))</span><br><span class="line">            &#x2F;&#x2F;指定路径处理 PathSelectors.any()代表所有的路径</span><br><span class="line">            .paths(PathSelectors.any())</span><br><span class="line">            .build()</span><br><span class="line">            .pathMapping(&quot;&#x2F;&quot;);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     private ApiInfo apiInfo()&#123;</span><br><span class="line">             return new ApiInfoBuilder()</span><br><span class="line">            .title(&quot;SpringBoot-Swagger2集成Demo &quot;)</span><br><span class="line">            .description(&quot;Allen&quot;)</span><br><span class="line">            &#x2F;&#x2F; 作者信息</span><br><span class="line">            .contact(new Contact(&quot;haoransun&quot;,&quot;demo.com&quot;,&quot;Wechat: SHR---97&quot;))</span><br><span class="line">            .version(&quot;1.0.0&quot;)</span><br><span class="line">            .build();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-添加文档内容-一般是在Controller，-请求参数上进行注解"><a href="#2-3-添加文档内容-一般是在Controller，-请求参数上进行注解" class="headerlink" title="2.3 添加文档内容(一般是在Controller， 请求参数上进行注解)"></a>2.3 添加文档内容(一般是在Controller， 请求参数上进行注解)</h2><p><img src="/2019/10/09/Swagger2%E5%AD%A6%E4%B9%A0%E4%B8%8E%E9%9B%86%E6%88%90/ef7d3999287f12ba39cc345681993e8d.png" alt><br><strong>常用的注解<code>@Api</code>、<code>@ApiOperation</code>、<code>@ApiModel</code>、<code>@ApiModelProperty</code>示例中有进行标注，对于其他注解，大家可自动谷歌，毕竟常用的就这几个了。有了<code>swagger</code>之后，原本一些<code>post</code>请求需要<code>postman</code>这样的调试工具来进行发起，而现在直接在页面上就可以进行调试了，是不是很爽！对于服务的调用者而已，有了这份api文档也是一目了然，不需要和后端多少沟通成本，按着api说明进行前端开发即可。</strong></p><p>@ApilmplicatParams(name = “”,value=””,dataType=””,paramType=””)</p><p>paramType:<br>     query—@RequestParam<br>     header—@RequestHeader<br>     path —@PathVariable (RestFul风格)</p><p>ParameterBuilder tokenPar = new ParameterBuilder();<br>List<Parameter> pars = new ArrayList<Parameter>();<br>tokenPar.name(“Authorization”).description(“令牌”)<br>    .modelRef(new ModelRef(“string”)).parameterType(“header”)<br>    //header中的token参数非必填，传空也可以<br>    .required(false).build();<br>//根据每个方法名也知道当前方法在设置什么参数<br>pars.add(tokenPar.build());</Parameter></Parameter></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Author: haoransun&lt;br&gt;Wechat: SHR—97&lt;/p&gt;
&lt;h1 id=&quot;1-Swagger2介绍&quot;&gt;&lt;a href=&quot;#1-Swagger2介绍&quot; class=&quot;headerlink&quot; title=&quot;1 Swagger2介绍&quot;&gt;&lt;/a&gt;1 Swagger2介绍&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;现在都奉行&lt;strong&gt;前后端分离&lt;/strong&gt;和&lt;strong&gt;微服务&lt;/strong&gt;大行其道，分微服务及前后端分离后，前后端开发的沟通成本就增加了。所以一款强大的&lt;strong&gt;RestFul API&lt;/strong&gt; 文档则十分重要，而目前在后端领域，基本上就是&lt;font color=&quot;red&quot;&gt;Swagger&lt;/font&gt;的天下了。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;strong&gt;Swagger&lt;/strong&gt;是一款RestFul接口的文档在线自动生成、功能测试功能框架。一个规范和完整的框架，用于生成、描述、调用和可视化RestFul风格的Web服务，加上Swagger-ui，可以有很好的呈现。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Swagger" scheme="http://JavaSsun.github.io/categories/Swagger/"/>
    
    
      <category term="Swagger2" scheme="http://JavaSsun.github.io/tags/Swagger2/"/>
    
      <category term="SpringBoot" scheme="http://JavaSsun.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>2018-2019工作总结</title>
    <link href="http://javassun.github.io/2019/09/15/2018-2019%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    <id>http://javassun.github.io/2019/09/15/2018-2019%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/</id>
    <published>2019-09-15T11:18:20.000Z</published>
    <updated>2020-04-16T06:32:27.042Z</updated>
    
    <content type="html"><![CDATA[<p>Author: haoransun<br>Wechat: SHR—97</p><h1 id="1-判断一个点是否在不规则多边形内部"><a href="#1-判断一个点是否在不规则多边形内部" class="headerlink" title="1  判断一个点是否在不规则多边形内部"></a>1  判断一个点是否在不规则多边形内部</h1><p>用途：<br>用于判断企业是否落在指定区域内</p><p>以一个点做射线，计算它与多边形边界的交点个数<br>       奇数个：在多边形内部<br>       偶数个：在多边形外部<br>推论：<br>如果点在多边形内部，射线第一次穿越边界一定是穿出多边形。<br>如果点在多边形外部，射线第一次穿越边界一定是进入多边形。</p><a id="more"></a><p>当射线穿越多边形边界的次数为偶数时，所有第偶数次（包括最后一次）穿越都是穿出，<br>因此所有第奇数次（包括第一次）穿越为穿入，由此可推断点在多边形外部。</p><p>当射线穿越多边形边界的次数为奇数时，所有第奇数次（包括第一次和最后一次）穿越都是穿出<br>由此可推断点在多边形内部。</p><p>判断难点：<br>点在多边形边上：                     点在线上，计算点与两个多边形顶点的连线斜率是否相等。<br>点和多边形的顶点重合：           比较坐标。<br>射线经过多边形顶点：              射线经过的点都属于射线以上的一侧<br>射线经过多边形的一条边：       射线连续经过多边形的两个相邻顶点。</p><p>需要客户提前给出待落区域的经纬度。</p><p>射线法： （java）<br>代码位置：com.aliyun.fin.rebengine.manager.job.task.AnalysisRegionOfEntDataTask</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 方法1   射线法：判断某一个点(经纬度)是否在一个多边形内  奇数个交点证明在多边形内部，偶数个交点在多边形外部</span><br><span class="line"> * @param longitude</span><br><span class="line"> * @param latitude</span><br><span class="line"> * @param points</span><br><span class="line"> * @return</span><br><span class="line"> *&#x2F;</span><br><span class="line">public boolean judgeDom(Double longitude,Double latitude,List&lt;AreaPoint&gt; points) &#123;</span><br><span class="line">    int iSum, iCount, iIndex;</span><br><span class="line">    double dLon1 &#x3D; 0, dLon2 &#x3D; 0, dLat1 &#x3D; 0, dLat2 &#x3D; 0, dLon;</span><br><span class="line">    iSum&#x3D;0;</span><br><span class="line">    iCount &#x3D; points.size();</span><br><span class="line">    for(iIndex &#x3D; 0;iIndex&lt;iCount;iIndex++)&#123;</span><br><span class="line">        if(iIndex &#x3D;&#x3D; iCount-1)&#123;</span><br><span class="line">            dLon1 &#x3D; points.get(iIndex).getLongitude();</span><br><span class="line">            dLat1 &#x3D; points.get(iIndex).getLatitude();</span><br><span class="line">            dLon2 &#x3D; points.get(0).getLongitude();</span><br><span class="line">            dLat2 &#x3D; points.get(0).getLatitude();</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            dLon1 &#x3D; points.get(iIndex).getLongitude();</span><br><span class="line">            dLat1 &#x3D; points.get(iIndex).getLatitude();</span><br><span class="line">            dLon2 &#x3D; points.get(iIndex+1).getLongitude();</span><br><span class="line">            dLat2 &#x3D; points.get(iIndex+1).getLatitude();</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;判断给定点的纵坐标 是否在边的两端点的水平平行线之间，在则可能有交点，继续判断交点是否在左射线上</span><br><span class="line">        boolean isInArea &#x3D; ((latitude&gt;&#x3D;dLat1)&amp;&amp;(latitude&lt;dLat2))|| (latitude&gt;&#x3D;dLat2)&amp;&amp;(latitude&lt;dLat1);</span><br><span class="line">        if(isInArea)&#123;</span><br><span class="line">            &#x2F;&#x2F;因为要做分母，所以判断不能为0,</span><br><span class="line">            if(Math.abs(dLat1-dLat2)&gt;0)&#123;</span><br><span class="line">                &#x2F;&#x2F;得到给定点向左射线与边的  交点  的  经度坐标</span><br><span class="line">                dLon &#x3D; dLon1 - ((dLon1-dLon2)*(dLat1-latitude))&#x2F;(dLat1-dLat2);</span><br><span class="line">                &#x2F;&#x2F;比较交点 经度坐标，如果交点在给定点的左侧：则当前交点是射线与边的交点</span><br><span class="line">                if(dLon&lt;longitude)&#123;</span><br><span class="line">                    iSum++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if((iSum%BASE_EVEN)!&#x3D;0)&#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>/**</p><ul><li><p>方法2   判断某一个点(经纬度)是否在一个多边形内  点在线内、线外、线上、面内、面外 来进行多层判断</p></li><li><p>@param longitude</p></li><li><p>@param latitude</p></li><li><p>@param points</p></li><li><p>@return</p></li><li><p>/</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">public boolean judgeDom2(Double longitude,Double latitude,List&lt;AreaPoint&gt; points) &#123;</span><br><span class="line"></span><br><span class="line">    boolean flag &#x3D; false;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    for(int i&#x3D;0, l&#x3D;points.size(),j&#x3D;l-1;i&lt;l;j&#x3D;i,i++)&#123;</span><br><span class="line"></span><br><span class="line">        double sx &#x3D; points.get(i).getLongitude();</span><br><span class="line"></span><br><span class="line">        double sy &#x3D; points.get(i).getLatitude();</span><br><span class="line"></span><br><span class="line">        double tx &#x3D; points.get(j).getLongitude();</span><br><span class="line"></span><br><span class="line">        double ty &#x3D; points.get(j).getLatitude();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;点与多边形顶点重合</span><br><span class="line"></span><br><span class="line">        boolean isCoincide &#x3D; (sx&#x3D;&#x3D;longitude&amp;&amp;sy&#x3D;&#x3D;latitude)||(tx&#x3D;&#x3D;longitude&amp;&amp;ty&#x3D;&#x3D;latitude);</span><br><span class="line"></span><br><span class="line">        if(isCoincide)&#123;</span><br><span class="line"></span><br><span class="line">            return true;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;判断线段两端点是否在射线两侧</span><br><span class="line"></span><br><span class="line">        boolean isTwoSide &#x3D; (sy&lt;latitude&amp;&amp;ty&gt;&#x3D;latitude)||(sy&gt;&#x3D;latitude&amp;&amp;ty&lt;latitude);</span><br><span class="line"></span><br><span class="line">        if(isTwoSide)&#123;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 线段上与坐标 Y 相同的 点 X 的坐标</span><br><span class="line"></span><br><span class="line">            double x &#x3D; sx+(latitude-sy)*(tx-sx)&#x2F;(ty-sy);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F;点在多边形边上</span><br><span class="line"></span><br><span class="line">            if(x&#x3D;&#x3D;longitude)&#123;</span><br><span class="line"></span><br><span class="line">                return true;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F;射线穿过多边形边界</span><br><span class="line"></span><br><span class="line">            if(x&gt;longitude)&#123;</span><br><span class="line"></span><br><span class="line">                flag &#x3D; !flag;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return  flag?true:false;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-聚类经纬度"><a href="#2-聚类经纬度" class="headerlink" title="2 聚类经纬度"></a>2 聚类经纬度</h1><p>聚类经纬度数据（全景洞察-全景概览 五角星、实心圆）<br>从reb_ent_location中取出经纬度、企业信息等数据。</p><p>企业经纬度各分10等份（汇总各个区域的最大最小值）。<br>分别统计出 企业经纬度的最大最小值。</p><p>等分公式：对经纬度的 最大最小值分别计算<br>Quadrant:  (minLongitude,minLatitude)—à  (maxLongitude,maxLatitude)<br>在逻辑上勾画出一个象限经纬系。</p><p>勾画出10等份区域：[(max-min)/10]*i+min  i: 0-10</p><p>投射每一个企业对应的经纬度落在所画区域上<br>min + |(当前企业经度-min)/(max-min)/10|<em>(max-min)/10<br>min + |(当前企业维度-min)/(max-min)/10)|</em>(max-min)/10</p><p>| | ：是对其中的数据向下取整</p><p>返回100个左右的点，每一个点所对应的坐标是它周围点的坐标均值。<br>即：每一个点都可以想象成是一个 “黑洞”，吸收它附近的相近点<br>页面上：每一个点 都有它所对应的企业列表集合。</p><p>代码位置：com.aliyun.fin.rebengine.manager.job.task.ClusterEntLocationDataTask</p><h1 id="3-NLP分词。文章相似度"><a href="#3-NLP分词。文章相似度" class="headerlink" title="3 NLP分词。文章相似度"></a>3 NLP分词。文章相似度</h1><p>NLP分词、政策相似度判断<br>（依托于 hanlp jar包，具体用法靠参考官网 <a href="https://github.com/hankcs/HanLP）" target="_blank" rel="noopener">https://github.com/hankcs/HanLP）</a><br>A：政策关键词 + 政策重合度（onecompany提供政策数据）<br> B：热词云 + 舆情数据[公司品牌+企业高管…]（onecompany提供舆情数据）<br> C：自建停分词词典（需要积累）+ 客户自定义词词典。<br>D：舆情数据需要进行：公司品牌+企业高管+产品品质+服务质量+其他风险 的 摘选。</p><p>舆情分词分模块难点：<br>停分词词典需要积累数据，每天都会有新的舆情数据进来，会有新的热词产生，同时也需要追加新的停分词到词典中。（目前是每次对新舆情数据分词，人工过滤掉无意义词）<br>如何分辨当条舆情数据是当前所属公司的哪一类的舆情：（高管、品牌、产品、质量）（产品品质与服务质量没有明显的区分度）<br>特征词数据表：<br>reb_data_db-àpublic_custom  (舆情分类特征词样本太少，目标区分度不明显)<br>读取舆情正文+标题，只要正文中出现特征词，就将当前舆情分类。<br>政策相似度判断：（即：政策分词后的词列表A 与 词列表B 相似度分值）<br>相似度算法位置： com.aliyun.fin.rebengine.nlp.util.algorithm<br>  两两地区的政策进行相似度判断。需要自己进行阈值的调参。</p><h1 id="4-文章分类"><a href="#4-文章分类" class="headerlink" title="4 文章分类"></a>4 文章分类</h1><p>政策分类、扶持对象<br>临港项目： onecompany 对政策进行分类+扶持对象的判别。</p><p>   非临港项目：可能需要自己训练一个政策分类器。此处写自己的思路：<br>利用分布式爬虫框架 从网上抓取各省市县以往的各项政策，需要抓取的内容包含：<br>政策标题+政策正文+该项政策的分类（金融、农业、工业..等）+政策扶持对象。</p><p>利用已有的这些数据 “喂养” 自己的 分类器，（我个人觉得这不是一个线性问题，不是二分逻辑[0/1的问题]，是一个多分类问题，可能需要算法同学在隐藏层的激活函数设置的极好。[说的话都会说，关键在实现] ）<br>训练好分类器之后，就可以对现有的政策进行判别。</p><p>或者像 舆情分模块一样：生硬的将政策分类的特征词、政策扶持对象的特征词提取到表中：只要待判别的政策正文中出现了这些特征词，就给当前政策打上分类标记、扶持对象标记。</p><h1 id="5-Python脚本（参考）"><a href="#5-Python脚本（参考）" class="headerlink" title="5 Python脚本（参考）"></a>5 Python脚本（参考）</h1><p>python脚本（只是用来作为参考）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#!usr&#x2F;bin&#x2F;env python3</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">import re</span><br><span class="line">import pymysql</span><br><span class="line">import pandas as pd</span><br><span class="line">import numpy as  np</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">#数据库配置</span><br><span class="line">mysql_config &#x3D; &#123;</span><br><span class="line">    # 规则中心</span><br><span class="line">    &#39;rule&#39;: &#123;</span><br><span class="line">        &#39;host&#39;: &#39;xxx&#39;,</span><br><span class="line">        &#39;port&#39;: 3306,</span><br><span class="line">        &#39;user&#39;: &#39;xx&#39;,</span><br><span class="line">        &#39;passwd&#39;: &#39;xx&#39;,</span><br><span class="line">        &#39;db&#39;: &#39;xx&#39;,</span><br><span class="line">        &#39;charset&#39;: &#39;utf8&#39;</span><br><span class="line">    &#125;,</span><br><span class="line">    # 数据来源</span><br><span class="line">    &#39;data&#39;: &#123;</span><br><span class="line">        &#39;host&#39;: &#39;xxx1&#39;,</span><br><span class="line">        &#39;port&#39;: 3306,</span><br><span class="line">        &#39;user&#39;: &#39;xxx&#39;,</span><br><span class="line">        &#39;passwd&#39;: &#39;xxx&#39;,</span><br><span class="line">        &#39;db&#39;: &#39;xxx&#39;,</span><br><span class="line">        &#39;charset&#39;: &#39;utf8&#39;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 数据处理类</span><br><span class="line">class DataDict:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        # 最值数据的枚举KEY</span><br><span class="line">        self._max_min &#x3D; &#39;max_min&#39;</span><br><span class="line">        self._conn_rule &#x3D; pymysql.connect(**mysql_config[&#39;rule&#39;])</span><br><span class="line">        self._conn_data &#x3D; pymysql.connect(**mysql_config[&#39;data&#39;])</span><br><span class="line"></span><br><span class="line">    # DataFrame转换字典</span><br><span class="line">    def _get_data_dict(self, v):</span><br><span class="line">        if len(v) &#x3D;&#x3D; 1:</span><br><span class="line">            return &#123;col: None if v.iloc[0][col] &#x3D;&#x3D; np.nan else v.iloc[0][col] for col in v.columns&#125;</span><br><span class="line">        elif not v.empty and len(v) &gt; 1:</span><br><span class="line">            min_max &#x3D; &#123;&#125;</span><br><span class="line">            for row in v.iterrows():</span><br><span class="line">                temp &#x3D; &#123;col: row[1][col] for col in v.columns&#125;</span><br><span class="line">                min_max[temp[&#39;index_name&#39;]] &#x3D; temp</span><br><span class="line">                min_max[temp[&#39;index_name&#39;]].pop(&#39;id&#39;)</span><br><span class="line">                min_max[temp[&#39;index_name&#39;]].pop(&#39;index_name&#39;)</span><br><span class="line">            min_max_temp &#x3D; &#123;&#125;</span><br><span class="line">            for key in min_max.keys():</span><br><span class="line">                min_max_temp.update(&#123;</span><br><span class="line">                    &#39;min_&#39; + key: min_max[key].get(&#39;min_value&#39;),</span><br><span class="line">                    &#39;max_&#39; + key: min_max[key].get(&#39;max_value&#39;),</span><br><span class="line">                &#125;)</span><br><span class="line">            return min_max_temp</span><br><span class="line">        elif v.empty and len(v) &lt;&#x3D; 0:</span><br><span class="line">            return None</span><br><span class="line">            # return &#123;col: 0.0 if v.empty else v.iloc[0][col] for col in v.columns&#125;</span><br><span class="line">        return None</span><br><span class="line"></span><br><span class="line">    # 最值数据获取（用于归一化处理）</span><br><span class="line">    def _get_min_max_data(self, conn_data, sql_max_min):</span><br><span class="line">        _v &#x3D; pd.read_sql_query(sql_max_min, con&#x3D;conn_data)</span><br><span class="line">        _v.fillna(0, inplace&#x3D;True)</span><br><span class="line">        return self._get_data_dict(_v)</span><br><span class="line"></span><br><span class="line">    # 获取评分项处理后的数据</span><br><span class="line">    def get_process_data(self, ent_name):</span><br><span class="line">        data_dict &#x3D; dict()</span><br><span class="line">        rts &#x3D; dict()</span><br><span class="line">        _s &#x3D; pd.read_sql_query(&quot;SELECT * FROM data_config &quot;, con&#x3D;self._conn_rule)</span><br><span class="line">        _s.set_index([&#39;index&#39;], inplace&#x3D;True)</span><br><span class="line">        raw_sqls &#x3D; _s.to_dict()[&#39;index_sql&#39;]</span><br><span class="line">        for k in raw_sqls:</span><br><span class="line">            if k in self._max_min:</span><br><span class="line">                data_dict[&#39;min_max&#39;] &#x3D; self._get_min_max_data(self._conn_data, raw_sqls[self._max_min])</span><br><span class="line">            else:</span><br><span class="line">                if &#39;%&#39; in raw_sqls[k]:</span><br><span class="line">                    raw_sqls[k] &#x3D; raw_sqls[k].replace(&quot;%&quot;, &quot;%%&quot;)</span><br><span class="line">                sql &#x3D; raw_sqls[k].replace(&#39;&#123;ent_name&#125;&#39;, &#39;%(ent_name)s&#39;)</span><br><span class="line">                _v &#x3D; pd.read_sql(sql, params&#x3D;&#123;&#39;ent_name&#39;: ent_name&#125;, con&#x3D;self._conn_data)</span><br><span class="line">                # _v.fillna(0, inplace&#x3D;True)</span><br><span class="line">                rts[k] &#x3D; self._get_data_dict(_v)</span><br><span class="line">        for k in rts:</span><br><span class="line">            if rts[k] is not None:</span><br><span class="line">                data_dict.update(rts[k])</span><br><span class="line">        return data_dict</span><br><span class="line"></span><br><span class="line">    # 评分卡数据</span><br><span class="line">    def get_score_card(self):</span><br><span class="line">        sql &#x3D; &#39;&#39;&#39;</span><br><span class="line">        SELECT</span><br><span class="line">   A.score_name,</span><br><span class="line">   A.default_value,</span><br><span class="line">   B.express,</span><br><span class="line">   B.score_value,</span><br><span class="line">   B.default_score</span><br><span class="line">FROM</span><br><span class="line">   base_score_card A,</span><br><span class="line">   base_score_card_item B</span><br><span class="line">WHERE</span><br><span class="line">   A.id &#x3D; B.card_id</span><br><span class="line">ORDER BY</span><br><span class="line">   A.id, B.order_no DESC</span><br><span class="line">        &#39;&#39;&#39;</span><br><span class="line">        score_card_df &#x3D; pd.read_sql_query(sql, self._conn_rule)</span><br><span class="line">        score_card_df_dict &#x3D; dict(list(score_card_df.groupby([&#39;score_name&#39;])))</span><br><span class="line">        score_card &#x3D; &#123;&#125;</span><br><span class="line">        for k in score_card_df_dict:</span><br><span class="line">            score_card[k] &#x3D; []</span><br><span class="line">            for index, row in score_card_df_dict[k].iterrows():</span><br><span class="line">                score_card[k].append((row[&#39;express&#39;], row[&#39;score_value&#39;], row[&#39;default_value&#39;], row[&#39;default_score&#39;]))</span><br><span class="line">        return score_card</span><br><span class="line"></span><br><span class="line">    # 获取自定义公式分数节点</span><br><span class="line">    def get_score_node(self):</span><br><span class="line">        _dim_score_define_df &#x3D; pd.read_sql_query(&#39;SELECT * FROM model_score_node&#39;, con&#x3D;self._conn_rule)</span><br><span class="line">        sn_dict &#x3D; &#123;&#125;</span><br><span class="line">        for index, row in _dim_score_define_df.iterrows():</span><br><span class="line">            sn_dict[row[&#39;score_node_id&#39;]] &#x3D; row[&#39;expression&#39;]</span><br><span class="line">        return sn_dict</span><br><span class="line"></span><br><span class="line">    # 获取分数层级数据字典</span><br><span class="line">    def get_socre_level(self):</span><br><span class="line">        _dim_score_define_df &#x3D; pd.read_sql_query(&#39;SELECT * FROM dimensional_score_define&#39;, con&#x3D;self._conn_rule)</span><br><span class="line">        level_dict &#x3D; &#123;&#125;</span><br><span class="line">        for index, row in _dim_score_define_df.iterrows():</span><br><span class="line">            level_dict[row[&#39;node_name&#39;]] &#x3D; &#123;col: row[col] for col in _dim_score_define_df.columns&#125;</span><br><span class="line">        return level_dict</span><br><span class="line"></span><br><span class="line">    def close_all_conn(self):</span><br><span class="line">        self._conn_rule.close()</span><br><span class="line">        self._conn_data.close()</span><br><span class="line"></span><br><span class="line"># 规则执行器</span><br><span class="line">class RuleExecutor:</span><br><span class="line">    def __init__(self, ent_name):</span><br><span class="line">        data_dict &#x3D; DataDict()</span><br><span class="line">        self._original_data_dict &#x3D; data_dict.get_process_data(ent_name)</span><br><span class="line">        self._score_card &#x3D; data_dict.get_score_card()</span><br><span class="line">        self._sn_dict &#x3D; data_dict.get_score_node()</span><br><span class="line">        self._level_dict &#x3D; data_dict.get_socre_level()</span><br><span class="line">        self._tree_node &#x3D; &#123;&#125;</span><br><span class="line">        self._temp &#x3D; []</span><br><span class="line">        self._re_pattern &#x3D; r&#39;(?&lt;&#x3D;\&#123;)[^&#125;]*(?&#x3D;\&#125;)&#39;</span><br><span class="line">        self._result_dict &#x3D; &#123;&#125;</span><br><span class="line">        data_dict.close_all_conn()</span><br><span class="line"></span><br><span class="line">    def _add_node(self, p, node):</span><br><span class="line">        # 节点list</span><br><span class="line">        p[&quot;children&quot;] &#x3D; []</span><br><span class="line">        for n in node:</span><br><span class="line">            if n.get(&quot;pid&quot;) &#x3D;&#x3D; p.get(&quot;id&quot;):</span><br><span class="line">                p[&quot;children&quot;].append(n)</span><br><span class="line">        # 递归子节点，查找子节点的子节点</span><br><span class="line">        for t in p[&quot;children&quot;]:</span><br><span class="line">            if not t.get(&quot;children&quot;):</span><br><span class="line">                t[&quot;children&quot;] &#x3D; []</span><br><span class="line">            t[&quot;children&quot;].append(self._add_node(t, node))</span><br><span class="line">        # 退出递归的条件</span><br><span class="line">        if len(p[&quot;children&quot;]) &#x3D;&#x3D; 0:</span><br><span class="line">            return</span><br><span class="line"></span><br><span class="line">    def init_score_tree(self):</span><br><span class="line">        root &#x3D; []</span><br><span class="line">        node &#x3D; []</span><br><span class="line">        # 获取根节点 和 其他子节点 list</span><br><span class="line">        for k in self._level_dict:</span><br><span class="line">            if self._level_dict[k][&#39;pid&#39;] &#x3D;&#x3D; 0:</span><br><span class="line">                root.append(self._level_dict[k])</span><br><span class="line">            else:</span><br><span class="line">                node.append(self._level_dict[k])</span><br><span class="line">        # 查找子节点</span><br><span class="line">        for p in root:</span><br><span class="line">            self._add_node(p, node)</span><br><span class="line">        self._tree_node.update(root[0])</span><br><span class="line"></span><br><span class="line">    def _get_card_score(self, sn_id):</span><br><span class="line">        score_list &#x3D; self._score_card[sn_id]</span><br><span class="line"></span><br><span class="line">        for bds in score_list:</span><br><span class="line">            express &#x3D; bds[0]</span><br><span class="line">            score_value &#x3D; bds[1]</span><br><span class="line">            default_value &#x3D; None if np.isnan(bds[2]) else bds[2]</span><br><span class="line">            default_score &#x3D; None if np.isnan(bds[3]) else bds[3]</span><br><span class="line"></span><br><span class="line">            str_list &#x3D; re.findall(self._re_pattern, express)</span><br><span class="line">            str_list &#x3D; list(set(str_list))</span><br><span class="line">            _data_dict &#x3D; &#123;&#125;</span><br><span class="line">            for c in str_list:</span><br><span class="line">                if c not in self._original_data_dict:</span><br><span class="line">                    return 0</span><br><span class="line">                _data_dict[c] &#x3D; default_score if self._original_data_dict[c] is None  else self._original_data_dict[c]</span><br><span class="line">            express_replaced &#x3D; express.format(**_data_dict)</span><br><span class="line"></span><br><span class="line">            try:</span><br><span class="line">                if eval(express_replaced):</span><br><span class="line">                    if &#39;&#123;&#39; in score_value:</span><br><span class="line">                        sv_express &#x3D; score_value.format(**self._original_data_dict)</span><br><span class="line">                        score_value &#x3D; float(eval(sv_express))</span><br><span class="line">                        score_value &#x3D; score_value if score_value !&#x3D; 0 else abs(score_value)</span><br><span class="line">                    break</span><br><span class="line">            except BaseException:</span><br><span class="line">                return default_value</span><br><span class="line">        return float(score_value)</span><br><span class="line"></span><br><span class="line">    # 执行sn表达式</span><br><span class="line">    def _get_sn_express_value(self, sn_id):</span><br><span class="line">        sn_node_express &#x3D; self._sn_dict[sn_id]</span><br><span class="line">        str_list &#x3D; re.findall(self._re_pattern, sn_node_express)</span><br><span class="line">        v_dict &#x3D; &#123;&#125;</span><br><span class="line">        for new_sn_id in str_list:</span><br><span class="line">            if new_sn_id in self._sn_dict.keys():</span><br><span class="line">                v_dict[new_sn_id] &#x3D; self._get_sn_express_value(new_sn_id)</span><br><span class="line">            else:</span><br><span class="line">                card_score &#x3D; self._get_card_score(new_sn_id)</span><br><span class="line">                v_dict[new_sn_id] &#x3D; card_score</span><br><span class="line">        score &#x3D; eval(sn_node_express.format(**v_dict))</span><br><span class="line">        # print(&quot;sn_id:%s,  %s    %s &#x3D; %s&quot; % (sn_id, sn_node_express, sn_node_express.format(**v_dict) ,score))</span><br><span class="line">        return score</span><br><span class="line"></span><br><span class="line">    # 执行dimensional_score_define的表达式</span><br><span class="line">    def _get_expression_value(self, node_name, level_dict):</span><br><span class="line">        self._temp.append(node_name)</span><br><span class="line"></span><br><span class="line">        item &#x3D; level_dict[node_name]</span><br><span class="line"></span><br><span class="line">        if item[&#39;expression&#39;] is None or item[&#39;expression&#39;] &#x3D;&#x3D; &#39;&#39;:</span><br><span class="line">            sn_id &#x3D; item[&#39;sn_id&#39;]</span><br><span class="line">            score &#x3D; self._get_sn_express_value(sn_id)</span><br><span class="line">            score_info &#x3D; (item[&#39;formula_id&#39;], score)</span><br><span class="line">            self._result_dict[node_name] &#x3D; &#123;&#39;formula_id&#39;: item[&#39;formula_id&#39;], &#39;value&#39;: score_info[1],</span><br><span class="line">                                            &#39;dis_name&#39;: item[&#39;node_display_name&#39;]&#125;</span><br><span class="line">            return score_info</span><br><span class="line">        else:</span><br><span class="line">            expression &#x3D; item[&#39;expression&#39;]</span><br><span class="line">            str_list &#x3D; re.findall(self._re_pattern, expression)</span><br><span class="line">            v_dict &#x3D; &#123;&#125;</span><br><span class="line">            for var in str_list:</span><br><span class="line">                v_dict[var] &#x3D; self._get_expression_value(var, level_dict)[1]</span><br><span class="line">            score &#x3D; eval(expression.format(**v_dict))</span><br><span class="line"></span><br><span class="line">            score_info &#x3D; (item[&#39;formula_id&#39;], score)</span><br><span class="line">            self._result_dict[node_name] &#x3D; &#123;&#39;formula_id&#39;: item[&#39;formula_id&#39;], &#39;value&#39;: score_info[1],</span><br><span class="line">                                            &#39;dis_name&#39;: item[&#39;node_display_name&#39;]&#125;</span><br><span class="line">            return score_info</span><br><span class="line"></span><br><span class="line">    def _computer_node_score(self, tree_node&#x3D;&#123;&#125;):</span><br><span class="line">        if tree_node[&#39;node_name&#39;] in self._temp:</span><br><span class="line">            return</span><br><span class="line"></span><br><span class="line">        dis_name &#x3D; tree_node[&#39;node_display_name&#39;]</span><br><span class="line">        expression &#x3D; tree_node[&#39;expression&#39;]</span><br><span class="line">        result &#x3D; &#123;&quot;name&quot;: dis_name, &#39;score&#39;: 0&#125;</span><br><span class="line">        if expression is None:</span><br><span class="line">            sn_id &#x3D; tree_node[&#39;sn_id&#39;]</span><br><span class="line">            score &#x3D; self._get_sn_express_value(sn_id)</span><br><span class="line">            result[&#39;score&#39;] &#x3D; score</span><br><span class="line">        else:</span><br><span class="line">            str_list &#x3D; re.findall(self._re_pattern, expression)</span><br><span class="line">            v_dict &#x3D; &#123;&#125;</span><br><span class="line">            for score_id in str_list:</span><br><span class="line">                score_info &#x3D; self._get_expression_value(score_id, self._level_dict)</span><br><span class="line">                score &#x3D; score_info[1]</span><br><span class="line">                v_dict[score_id] &#x3D; score</span><br><span class="line">            total_score &#x3D; eval(expression.format(**v_dict))</span><br><span class="line">            result[&#39;score&#39;] &#x3D; total_score</span><br><span class="line">        self._result_dict[tree_node[&#39;node_name&#39;]] &#x3D; &#123;&#39;formula_id&#39;: tree_node[&#39;formula_id&#39;], &#39;value&#39;: result[&#39;score&#39;],</span><br><span class="line">                                                     &#39;dis_name&#39;: tree_node[&#39;node_display_name&#39;]&#125;</span><br><span class="line"></span><br><span class="line">    def _computer_score(self, tree_node):</span><br><span class="line">        children &#x3D; tree_node[&#39;children&#39;]</span><br><span class="line">        self._computer_node_score(tree_node)</span><br><span class="line">        if len(children) &#x3D;&#x3D; 0:</span><br><span class="line">            return</span><br><span class="line">        for child_node in children:</span><br><span class="line">            self._computer_score(child_node)</span><br><span class="line"></span><br><span class="line">    def process_score(self):</span><br><span class="line">        self._computer_score(self._tree_node)</span><br><span class="line"></span><br><span class="line">    def _get_standard_score(self, value, fid, df_value&#x3D;0):</span><br><span class="line">        min_score &#x3D; self._original_data_dict[&#39;min_max&#39;][&#39;min_&#39; + fid]</span><br><span class="line">        max_score &#x3D; self._original_data_dict[&#39;min_max&#39;][&#39;max_&#39; + fid]</span><br><span class="line">        std_score &#x3D; df_value if max_score - min_score &#x3D;&#x3D; 0 else pow((value - min_score) &#x2F; (max_score - min_score), 2) * 100</span><br><span class="line">        # print( &#39;fid:%s \t (%s - %s) &#x2F; (%s - %s ) x2 * 100 &#x3D; %s&#39; % (fid,value,min_score,max_score,min_score,std_score))</span><br><span class="line">        return std_score</span><br><span class="line"></span><br><span class="line">    def _rebuild_node_tree(self, tree_node):</span><br><span class="line">        for v in [&#39;id&#39;, &#39;model_id&#39;, &#39;pid&#39;, &#39;default_value&#39;, &#39;expression&#39;, &#39;sn_id&#39;, &#39;formula_id&#39;]:</span><br><span class="line">            tree_node.pop(v)</span><br><span class="line">        tree_node[&#39;score&#39;] &#x3D; self._get_standard_score(self._result_dict[tree_node[&#39;node_name&#39;]][&#39;value&#39;],</span><br><span class="line">                                                      self._result_dict[tree_node[&#39;node_name&#39;]][&#39;formula_id&#39;])</span><br><span class="line">        child_node &#x3D; tree_node[&#39;children&#39;]</span><br><span class="line">        if len(child_node) &gt; 0:</span><br><span class="line">            for node in child_node:</span><br><span class="line">                self._rebuild_node_tree(node)</span><br><span class="line">        else:</span><br><span class="line">            tree_node.pop(&#39;children&#39;)</span><br><span class="line">        return tree_node</span><br><span class="line"></span><br><span class="line">    def get_result(self):</span><br><span class="line">        return self._rebuild_node_tree(self._tree_node)</span><br><span class="line"></span><br><span class="line">    def print_data(self):</span><br><span class="line">        print(self._level_dict)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def init(context):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def calc_ent(ent_info, context):</span><br><span class="line"></span><br><span class="line">    rule_executor &#x3D; RuleExecutor(ent_info[&quot;ent_name&quot;])</span><br><span class="line"></span><br><span class="line">    # 初始化层级树</span><br><span class="line">    rule_executor.init_score_tree()</span><br><span class="line"></span><br><span class="line">    # 计算处理</span><br><span class="line">    rule_executor.process_score()</span><br><span class="line"></span><br><span class="line">    # 获取结果</span><br><span class="line">    result &#x3D; rule_executor.get_result()</span><br><span class="line"></span><br><span class="line">    return json.dumps(result,ensure_ascii&#x3D; False)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    ent_info &#x3D; calc_ent(&#123;&quot;ent_name&quot;:&quot;东方成安资产管理有限公司&quot;&#125;,None)</span><br><span class="line">    print(ent_info)</span><br></pre></td></tr></table></figure><h1 id="6-SQL语句-拼接SQL"><a href="#6-SQL语句-拼接SQL" class="headerlink" title="6 SQL语句-拼接SQL"></a>6 SQL语句-拼接SQL</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select TABLE_NAME,</span><br><span class="line">concat( &#39;insert into &#39;, table_name, &#39;(&#39;, GROUP_CONCAT(COLUMN_NAME) , &#39;) select &#39;, GROUP_CONCAT(COLUMN_NAME),</span><br><span class="line">&#39;from reb_lingang_db.&#39;, TABLE_NAME,&#39;;&#39;)</span><br><span class="line">from information_schema.columns where table_schema &#x3D; &#39;reb_lingang_db&#39; and table_name regexp &#39;^dw_bc*&#39; and COLUMN_NAME not in (&#39;id&#39;)</span><br><span class="line">GROUP BY TABLE_NAME;</span><br></pre></td></tr></table></figure><h1 id="7-MySql导出表结构"><a href="#7-MySql导出表结构" class="headerlink" title="7 MySql导出表结构"></a>7 MySql导出表结构</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">COLUMN_NAME 字段,</span><br><span class="line">COLUMN_TYPE 数据类型,</span><br><span class="line">DATA_TYPE 字段类型,</span><br><span class="line">CHARACTER_MAXIMUM_LENGTH 长度,</span><br><span class="line">IS_NULLABLE 是否为空,</span><br><span class="line">COLUMN_KEY 是否为主键,</span><br><span class="line">COLUMN_DEFAULT 默认值,</span><br><span class="line">COLUMN_COMMENT 备注</span><br><span class="line">FROM</span><br><span class="line">INFORMATION_SCHEMA.COLUMNS</span><br><span class="line">where</span><br><span class="line">-- database为数据库名称，到时候只需要修改成你要导出表结构的数据库即可</span><br><span class="line">table_schema &#x3D;&#39;reb_db&#39;</span><br><span class="line">AND</span><br><span class="line">-- table_name为表名</span><br><span class="line">table_name &#x3D; &#39;reb_overview_comp_index_month&#39;;</span><br></pre></td></tr></table></figure><h1 id="8-多数据源（只是用来作为参考）"><a href="#8-多数据源（只是用来作为参考）" class="headerlink" title="8 多数据源（只是用来作为参考）"></a>8 多数据源（只是用来作为参考）</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@MapperScan(basePackages &#x3D; EngineDataSourceConfig.PACKAGE, sqlSessionFactoryRef &#x3D; &quot;engineSqlSessionFactory&quot;)</span><br><span class="line">public class EngineDataSourceConfig &#123;</span><br><span class="line"></span><br><span class="line">    static final String PACKAGE &#x3D; &quot;com.aliyun.fin.rebengine.manager.mapper.engine&quot;;</span><br><span class="line"></span><br><span class="line">    @Bean(name &#x3D; &quot;engineDatasource&quot;)</span><br><span class="line">    @ConfigurationProperties(prefix &#x3D; &quot;spring.datasource.engine&quot;)</span><br><span class="line">    @Primary</span><br><span class="line">    public DataSource engineDatasource() &#123;</span><br><span class="line">        return DataSourceBuilder.create().type(DruidDataSource.class).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean(name &#x3D; &quot;engineSqlSessionFactory&quot;)</span><br><span class="line">    @Primary</span><br><span class="line">    public SqlSessionFactory engineSqlSessionFactory(@Qualifier(&quot;engineDatasource&quot;) DataSource dataSource)</span><br><span class="line">        throws Exception &#123;</span><br><span class="line">        final SqlSessionFactoryBean bean &#x3D; new SqlSessionFactoryBean();</span><br><span class="line">        bean.setDataSource(dataSource);</span><br><span class="line">        &#x2F;&#x2F;指定mapper.xml路径</span><br><span class="line">        bean.setMapperLocations(</span><br><span class="line">            new PathMatchingResourcePatternResolver().getResources(&quot;classpath:mapper&#x2F;engine&#x2F;*.xml&quot;));</span><br><span class="line">        return bean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean(name &#x3D; &quot;engineTransactionManager&quot;)</span><br><span class="line">    @Primary</span><br><span class="line">    public DataSourceTransactionManager engineTransactionManager(@Qualifier(&quot;engineDatasource&quot;) DataSource dataSource) &#123;</span><br><span class="line">        return new DataSourceTransactionManager(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean(name &#x3D; &quot;engineSqlSessionTemplate&quot;)</span><br><span class="line">    @Primary</span><br><span class="line">    public SqlSessionTemplate engineSqlSessionTemplate(</span><br><span class="line">        @Qualifier(&quot;engineSqlSessionFactory&quot;) SqlSessionFactory sqlSessionFactory) throws Exception &#123;</span><br><span class="line">        return new SqlSessionTemplate(sqlSessionFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean(name &#x3D; &quot;engineJdbcTemplate&quot;)</span><br><span class="line">    public JdbcTemplate primaryJdbcTemplate(@Qualifier(&quot;engineDatasource&quot;) DataSource dataSource) &#123;</span><br><span class="line">        return new JdbcTemplate(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@MapperScan(basePackages &#x3D; RebDataSourceConfig.PACKAGE,sqlSessionFactoryRef &#x3D; &quot;rebSqlSessionFactory&quot;)</span><br><span class="line">public class RebDataSourceConfig &#123;</span><br><span class="line"></span><br><span class="line">    static final String PACKAGE &#x3D; &quot;com.aliyun.fin.rebengine.manager.mapper.reb&quot;;</span><br><span class="line"></span><br><span class="line">    @Bean(name &#x3D; &quot;rebDatasource&quot;)</span><br><span class="line">    @ConfigurationProperties(prefix &#x3D; &quot;spring.datasource.reb&quot;)</span><br><span class="line">    public DataSource rebDatasource() &#123;</span><br><span class="line">        DataSource dataSource &#x3D; DataSourceBuilder.create().type(DruidDataSource.class).build();</span><br><span class="line">        return dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean(name &#x3D; &quot;rebSqlSessionFactory&quot;)</span><br><span class="line">    public SqlSessionFactory rebSqlSessionFactory(@Qualifier(&quot;rebDatasource&quot;) DataSource dataSource) throws Exception &#123;</span><br><span class="line">        final SqlSessionFactoryBean bean &#x3D; new SqlSessionFactoryBean();</span><br><span class="line">        bean.setDataSource(dataSource);</span><br><span class="line">        &#x2F;&#x2F;指定mapper.xml路径</span><br><span class="line">        bean.setMapperLocations(new PathMatchingResourcePatternResolver().getResources(&quot;classpath:mapper&#x2F;reb&#x2F;*.xml&quot;));</span><br><span class="line">        return bean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean(name &#x3D; &quot;rebTransactionManager&quot;)</span><br><span class="line">    public DataSourceTransactionManager rebTransactionManager(@Qualifier(&quot;rebDatasource&quot;) DataSource dataSource) &#123;</span><br><span class="line">        return new DataSourceTransactionManager(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean(name &#x3D; &quot;rebSqlSessionTemplate&quot;)</span><br><span class="line">    public SqlSessionTemplate rebSqlSessionTemplate(@Qualifier(&quot;rebSqlSessionFactory&quot;) SqlSessionFactory sqlSessionFactory) throws Exception &#123;</span><br><span class="line">        return new SqlSessionTemplate(sqlSessionFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean(name &#x3D; &quot;rebJdbcTemplate&quot;)</span><br><span class="line">    public JdbcTemplate primaryJdbcTemplate(@Qualifier(&quot;rebDatasource&quot;) DataSource dataSource) &#123;</span><br><span class="line">        return new JdbcTemplate(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    type: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">    reb:</span><br><span class="line">      url: jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;reb_lingang_db?useUnicode&#x3D;true&amp;characterEncoding&#x3D;UTF-8&amp;allowMultiQueries&#x3D;true&amp;useSSL&#x3D;false&amp;zeroDateTimeBehavior&#x3D;convertToNull&amp;rewriteBatchedStatements&#x3D;true</span><br><span class="line">      username: root</span><br><span class="line">      password: 123456</span><br><span class="line">      driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">    engine:</span><br><span class="line">      url: jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;reb_data_db?useUnicode&#x3D;true&amp;characterEncoding&#x3D;UTF-8&amp;allowMultiQueries&#x3D;true&amp;useSSL&#x3D;false&amp;zeroDateTimeBehavior&#x3D;convertToNull&amp;rewriteBatchedStatements&#x3D;true</span><br><span class="line">      username: root</span><br><span class="line">      password: 123456</span><br><span class="line">      driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">  thymeleaf:</span><br><span class="line">     cache: false</span><br><span class="line">     encoding: utf-8</span><br><span class="line">     mode: HTML5</span><br><span class="line">     servlet:</span><br><span class="line">       content-type: text&#x2F;html</span><br><span class="line">server:</span><br><span class="line">  port: 8081</span><br><span class="line"></span><br><span class="line"># 日志配置</span><br><span class="line">logging:</span><br><span class="line">  level:</span><br><span class="line">    org:</span><br><span class="line">      springframework:</span><br><span class="line">        web: info</span><br><span class="line">        transaction: info</span><br><span class="line">    com:</span><br><span class="line">      aliyun:</span><br><span class="line">        fin:</span><br><span class="line">          rebengine:</span><br><span class="line">              manager:</span><br><span class="line">                mapper: error</span><br></pre></td></tr></table></figure><h1 id="9-JWTUtil（只是用来作为参考）"><a href="#9-JWTUtil（只是用来作为参考）" class="headerlink" title="9 JWTUtil（只是用来作为参考）"></a>9 JWTUtil（只是用来作为参考）</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">public class JwtUtil &#123;</span><br><span class="line">    &#x2F;**过期时间30分钟*&#x2F;</span><br><span class="line">    private static final long EXPIRE_TIME &#x3D; -1;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 生成签名(生成token字符串)</span><br><span class="line">     * @param username 用户名</span><br><span class="line">     * @param secret 密码</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static String sign(String username, String secret)&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Algorithm algorithm &#x3D; Algorithm.HMAC256(secret);</span><br><span class="line">            return JWT.create()</span><br><span class="line">                    .withClaim(&quot;username&quot;, username)</span><br><span class="line">                    .sign(algorithm);</span><br><span class="line">        &#125; catch (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获得token中的信息无需secret解密也能获得</span><br><span class="line">     * @return token中包含的用户名</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static String getUsername(String token) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            DecodedJWT jwt &#x3D; JWT.decode(token);</span><br><span class="line">            return jwt.getClaim(&quot;username&quot;).asString();</span><br><span class="line">        &#125; catch (JWTDecodeException e) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 校验token是否正确</span><br><span class="line">     * @param token 密钥</span><br><span class="line">     * @param secret 用户的密码</span><br><span class="line">     * @return 是否正确</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static boolean verify(String token, String username, String secret) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Algorithm algorithm &#x3D; Algorithm.HMAC256(secret);</span><br><span class="line">            JWTVerifier verifier &#x3D; JWT.require(algorithm)</span><br><span class="line">                    .withClaim(&quot;username&quot;, username)</span><br><span class="line">                    .build();</span><br><span class="line">            DecodedJWT jwt &#x3D; verifier.verify(token);</span><br><span class="line">            return true;</span><br><span class="line">        &#125; catch (Exception exception) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="10-JWTFilterConfig（只是用来作为参考）"><a href="#10-JWTFilterConfig（只是用来作为参考）" class="headerlink" title="10 JWTFilterConfig（只是用来作为参考）"></a>10 JWTFilterConfig（只是用来作为参考）</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">@SuppressWarnings(&quot;all&quot;)</span><br><span class="line">public class JWTFilterConfig implements Filter&#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void init(FilterConfig filterConfig) throws ServletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123;</span><br><span class="line">        HttpServletRequest httpRequest &#x3D; (HttpServletRequest) servletRequest;</span><br><span class="line">        HttpServletResponse httpResponse &#x3D; (HttpServletResponse) servletResponse;</span><br><span class="line">        String url &#x3D; httpRequest.getRequestURI().substring(httpRequest.getContextPath().length());</span><br><span class="line">        ServletContext sc &#x3D; httpRequest.getServletContext();</span><br><span class="line">        WebApplicationContext cxt &#x3D; WebApplicationContextUtils.getWebApplicationContext(sc);</span><br><span class="line">        if(cxt !&#x3D; null &amp;&amp; cxt.getBean(&quot;redisTemplate&quot;) !&#x3D; null &amp;&amp; redisTemplate &#x3D;&#x3D; null) &#123;</span><br><span class="line">            redisTemplate &#x3D; (RedisTemplate) cxt.getBean(&quot;redisTemplate&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;**</span><br><span class="line">         * 跨域请求</span><br><span class="line">         *&#x2F;</span><br><span class="line">        httpResponse.setHeader(&quot;Access-Control-Allow-Origin&quot;, httpRequest.getHeader(&quot;Origin&quot;));</span><br><span class="line">&#x2F;&#x2F;        httpResponse.setHeader(&quot;Access-Control-Expose-Headers&quot;,&quot;Content-Disposition&quot;);</span><br><span class="line">        httpResponse.setHeader(&quot;Access-Control-Allow-Methods&quot;, &quot;POST, GET, OPTIONS, PUT, DELETE&quot;);</span><br><span class="line">        httpResponse.setHeader(&quot;Access-Control-Max-Age&quot;, &quot;3600&quot;);</span><br><span class="line">        httpResponse.setHeader(&quot;Access-Control-Allow-Headers&quot;, &quot;Authorization, Content-Type, Depth, User-Agent, X-File-Size, X-Requested-With, X-Requested-By, If-Modified-Since, X-File-Name, X-File-Type, Cache-Control, Origin&quot;);</span><br><span class="line">        &#x2F;&#x2F;是否支持cookie跨域</span><br><span class="line">        httpResponse.setHeader(&quot;Access-Control-Allow-Credentials&quot;,&quot;true&quot;);</span><br><span class="line">        &#x2F;&#x2F;允许在请求头里存放token</span><br><span class="line">        httpResponse.setHeader(&quot;Access-Control-Expose-Headers&quot;,&quot;Authorization,Content-Disposition&quot;);</span><br><span class="line"></span><br><span class="line">        String method &#x3D; httpRequest.getMethod();</span><br><span class="line">&#x2F;&#x2F;        filterChain.doFilter(httpRequest, httpResponse);</span><br><span class="line"></span><br><span class="line">        if (&quot;OPTIONS&quot;.equals(method)) &#123;</span><br><span class="line">            filterChain.doFilter(httpRequest, httpResponse);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            String authorization &#x3D; httpRequest.getHeader(&quot;Authorization&quot;);</span><br><span class="line">            &#x2F;&#x2F;不需要拦截的路径</span><br><span class="line">            if (!url.contains(&quot;&#x2F;swagger&quot;) &amp;&amp; !url.contains(&quot;&#x2F;login&quot;) &amp;&amp; !url.contains(&quot;&#x2F;registerDepartmentSelected&quot;) &amp;&amp;</span><br><span class="line">                    !url.contains(&quot;&#x2F;getSecurityCode&quot;) &amp;&amp; !url.contains(&quot;&#x2F;register&quot;) &amp;&amp; !url.contains(&quot;&#x2F;downLoadExcel&quot;) &amp;&amp;</span><br><span class="line">                    !url.contains(&quot;&#x2F;exportEntRelation&quot;) &amp;&amp; !url.contains(&quot;&#x2F;exportCompanyList&quot;) &amp;&amp; !url.contains(&quot;&#x2F;api&#x2F;merchantsradar&quot;) &amp;&amp;</span><br><span class="line">                    !url.contains(&quot;.ico&quot;) &amp;&amp; !url.contains(&quot;.json&quot;) &amp;&amp; !url.contains(&quot;&#x2F;statics&quot;) &amp;&amp; !url.contains(&quot;.js&quot;) &amp;&amp; !url.contains(&quot;.css&quot;) &amp;&amp; !url.contains(&quot;&#x2F;static&quot;) &amp;&amp; !url.contains(&quot;&#x2F;media&quot;) &amp;&amp; !url.contains(&quot;&#x2F;synchronization&quot;)) &#123;</span><br><span class="line">                if (StringUtils.isNotBlank(authorization))&#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        String token &#x3D; &quot;&quot;;</span><br><span class="line"></span><br><span class="line">                        &#x2F;&#x2F;避免redis为空报错，先一步校验key是否存在</span><br><span class="line">                        Boolean aBoolean &#x3D; redisTemplate.hasKey(&quot;reb_backend_&quot; + authorization);</span><br><span class="line">                        if (!aBoolean)&#123;</span><br><span class="line">                            JSONObject jsonObject &#x3D; new JSONObject();</span><br><span class="line">                            jsonObject.put(&quot;errCode&quot;, 6001);</span><br><span class="line">                            jsonObject.put(&quot;errMsg&quot;, &quot;error&quot;);</span><br><span class="line">                            jsonObject.put(&quot;data&quot;, &quot;Roles have no access rights&quot;);</span><br><span class="line">                            httpResponse.setStatus(200);</span><br><span class="line">                            httpResponse.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">                            httpResponse.getWriter().write(JSON.toJSONString(jsonObject));</span><br><span class="line">                            return;</span><br><span class="line">                        &#125;else&#123;</span><br><span class="line">                            token &#x3D; redisTemplate.opsForValue().get(&quot;reb_backend_&quot; + authorization).toString();</span><br><span class="line">                        &#125;</span><br><span class="line">                        if (StringUtils.isNotBlank(token)) &#123;</span><br><span class="line">                            redisTemplate.opsForValue().set(&quot;reb_backend_&quot; + authorization, authorization, TokenUtil.getToken(), TimeUnit.SECONDS);</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            JSONObject jsonObject &#x3D; new JSONObject();</span><br><span class="line">                            jsonObject.put(&quot;errCode&quot;, 6001);</span><br><span class="line">                            jsonObject.put(&quot;errMsg&quot;, &quot;error&quot;);</span><br><span class="line">                            jsonObject.put(&quot;data&quot;, &quot;Roles have no access rights&quot;);</span><br><span class="line">                            httpResponse.setStatus(200);</span><br><span class="line">                            httpResponse.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">                            httpResponse.getWriter().write(JSON.toJSONString(jsonObject));</span><br><span class="line">                            return;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;catch (Exception e)&#123;</span><br><span class="line">                        JSONObject jsonObject &#x3D; new JSONObject();</span><br><span class="line">                        jsonObject.put(&quot;errCode&quot;, 6001);</span><br><span class="line">                        jsonObject.put(&quot;errMsg&quot;, &quot;error&quot;);</span><br><span class="line">                        jsonObject.put(&quot;data&quot;, &quot;Roles have no access rights&quot;);</span><br><span class="line">                        httpResponse.setStatus(200);</span><br><span class="line">                        httpResponse.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">                        httpResponse.getWriter().write(JSON.toJSONString(jsonObject));</span><br><span class="line">                        return;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    JSONObject jsonObject &#x3D; new JSONObject();</span><br><span class="line">                    jsonObject.put(&quot;errCode&quot;, 6001);</span><br><span class="line">                    jsonObject.put(&quot;errMsg&quot;, &quot;error&quot;);</span><br><span class="line">                    jsonObject.put(&quot;data&quot;, &quot;Roles have no access rights&quot;);</span><br><span class="line">                    httpResponse.setStatus(200);</span><br><span class="line">                    httpResponse.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">                    httpResponse.getWriter().write(JSON.toJSONString(jsonObject));</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            filterChain.doFilter(httpRequest, httpResponse);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void destroy() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="11-Login（只是用来作为参考）"><a href="#11-Login（只是用来作为参考）" class="headerlink" title="11 Login（只是用来作为参考）"></a>11 Login（只是用来作为参考）</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;user&quot;)</span><br><span class="line">@RestController</span><br><span class="line">@Api(tags &#x3D; &#123;&quot;后台管理&quot;&#125;)</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line">    private Logger logger &#x3D; LoggerFactory.getLogger(UserController.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private UserService userService;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;spring.rebBackend.token.expirationDate&#125;&quot;)</span><br><span class="line">    private long tokenExpirationDate;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">      * @Description: 用户管理-用户登录</span><br><span class="line">      * @return com.alibaba.fastjson.JSONObject</span><br><span class="line">      * @date 2018&#x2F;10&#x2F;10 18:12</span><br><span class="line">    **&#x2F;</span><br><span class="line">    @ApiOperation(&quot;用户管理-用户登录&quot;)</span><br><span class="line">    @ApiImplicitParams(&#123;</span><br><span class="line">            @ApiImplicitParam(name &#x3D; &quot;account&quot;,value &#x3D; &quot;用户账号&quot;,paramType &#x3D; &quot;query&quot;,dataType &#x3D; &quot;String&quot;),</span><br><span class="line">            @ApiImplicitParam(name &#x3D; &quot;password&quot;,value &#x3D; &quot;用户密码&quot;,paramType &#x3D; &quot;query&quot;,dataType &#x3D; &quot;String&quot;)</span><br><span class="line">    &#125;)</span><br><span class="line">    @GetMapping(&quot;&#x2F;login&quot;)</span><br><span class="line">    public JSONObject login(String account, String password,HttpServletRequest request)&#123;</span><br><span class="line">        JSONObject jsonObject &#x3D; new JSONObject();</span><br><span class="line">        try &#123;</span><br><span class="line">            if(StringUtils.isBlank(password) )&#123;</span><br><span class="line">                jsonObject.put(&quot;errorCode&quot;,ResponseCode.CODE_PARAM_NULL);</span><br><span class="line">                jsonObject.put(&quot;errorMsg&quot;,&quot;password&quot; + ResponseCode.MSG_PARAM_NULL);</span><br><span class="line">                return jsonObject;</span><br><span class="line">            &#125;</span><br><span class="line">            if (StringUtils.isBlank(account))&#123;</span><br><span class="line">                jsonObject.put(&quot;errorCode&quot;,ResponseCode.CODE_PARAM_NULL);</span><br><span class="line">                jsonObject.put(&quot;errorMsg&quot;,&quot;account&quot; + ResponseCode.MSG_PARAM_NULL);</span><br><span class="line">                return jsonObject;</span><br><span class="line">            &#125;</span><br><span class="line">            String userStatus &#x3D; (String) redisTemplate.opsForValue().get(&quot;reb_backend_&quot; + account);</span><br><span class="line">            String index &#x3D; &quot;3&quot;;</span><br><span class="line">            if (StringUtils.equals(userStatus,index))&#123;</span><br><span class="line">                jsonObject.put(&quot;errorCode&quot;,ResponseCode.CODE_PARAM_NULL);</span><br><span class="line">                jsonObject.put(&quot;errorMsg&quot;,&quot;密码错误次数过多,请5分钟之后重试&quot;);</span><br><span class="line">                return jsonObject;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F;校验账户是否存在</span><br><span class="line">            User user &#x3D; userService.findUserByAccount(account);</span><br><span class="line">            if (null&#x3D;&#x3D;user)&#123;</span><br><span class="line">                jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_RESULT_NULL);</span><br><span class="line">                jsonObject.put(&quot;errorMsg&quot;,&quot;账户不存在&quot;);</span><br><span class="line">                return jsonObject;</span><br><span class="line">            &#125;</span><br><span class="line">            String index2 &#x3D; &quot;2&quot;;</span><br><span class="line">            if (user.getStatus().equals(index2))&#123;</span><br><span class="line">                jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_RESULT_NULL);</span><br><span class="line">                jsonObject.put(&quot;errorMsg&quot;,&quot;账户已被锁定&quot;);</span><br><span class="line">                return jsonObject;</span><br><span class="line">            &#125;</span><br><span class="line">            String index3 &#x3D; &quot;3&quot;;</span><br><span class="line">            if (user.getStatus().equals(index3))&#123;</span><br><span class="line">                jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_RESULT_NULL);</span><br><span class="line">                jsonObject.put(&quot;errorMsg&quot;,&quot;账户正在审批中&quot;);</span><br><span class="line">                return jsonObject;</span><br><span class="line">            &#125;</span><br><span class="line">            String md5Password &#x3D; PasswordUtil.encode(password,&quot;fin_risk_management_reb_backend&quot;);</span><br><span class="line">            if (user.getPassword().equals(md5Password))&#123;</span><br><span class="line">                &#x2F;&#x2F;登录成功之后保存用户操作日志</span><br><span class="line">                UserLogger userLogger &#x3D; new UserLogger()&#123;&#123;</span><br><span class="line">                    setUserAccount(account);</span><br><span class="line">                    setUserName(user.getUsername());</span><br><span class="line">                    setLoggerType(&quot;1&quot;);</span><br><span class="line">                &#125;&#125;;</span><br><span class="line">                userService.saveUserLogger(userLogger);</span><br><span class="line">                &#x2F;&#x2F;登录成功之后将token缓存到redis</span><br><span class="line">                String token &#x3D; JwtUtil.sign(account,user.getPassword());</span><br><span class="line">                RedisModel redisModel &#x3D; new RedisModel()&#123;&#123;</span><br><span class="line">                    setKey(&quot;reb_backend_&quot; + token);</span><br><span class="line">                    setValue(token);</span><br><span class="line">                &#125;&#125;;</span><br><span class="line">                redisTemplate.opsForValue().set(redisModel.getKey(),redisModel.getValue(),tokenExpirationDate,TimeUnit.SECONDS);</span><br><span class="line">                jsonObject.put(&quot;token&quot;,token);</span><br><span class="line">                jsonObject.put(&quot;username&quot;,user.getUsername());</span><br><span class="line">                jsonObject.put(&quot;userId&quot;,user.getId());</span><br><span class="line">                List&lt;String&gt; roleList &#x3D; userService.findRoleListByUserId(user.getId());</span><br><span class="line">                &#x2F;&#x2F;获取用户所属部门</span><br><span class="line">                Integer departmentId &#x3D; userService.findDepartmentIdByUserId(user.getId());</span><br><span class="line">                jsonObject.put(&quot;role&quot;,roleList.get(0));</span><br><span class="line">                jsonObject.put(&quot;departmentId&quot;,departmentId);</span><br><span class="line">                jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_SUCCESS);</span><br><span class="line">                jsonObject.put(&quot;errorMsg&quot;,ResponseCode.MSG_SUCCESS);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                userStatus &#x3D; userStatus&#x3D;&#x3D;null ? &quot;1&quot; : Integer.parseInt(userStatus)  + 1 + &quot;&quot;;</span><br><span class="line"></span><br><span class="line">                if (userStatus.equals(index3))&#123;</span><br><span class="line">                    redisTemplate.opsForValue().set(&quot;reb_backend_&quot; + user.getAccount(),userStatus,300, TimeUnit.SECONDS);</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    redisTemplate.opsForValue().set(&quot;reb_backend_&quot; + user.getAccount(),userStatus,300,TimeUnit.SECONDS);</span><br><span class="line">                &#125;</span><br><span class="line">                jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_PARAM_NULL);</span><br><span class="line">                jsonObject.put(&quot;errorMsg&quot;,&quot;密码错误&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            logger.error(&quot;用户管理-用户登录&#x3D;&#x3D;&#x3D;&quot;,e.getMessage());</span><br><span class="line">            jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_ERROR);</span><br><span class="line">            jsonObject.put(&quot;errorMsg&quot;,ResponseCode.MSG_ERROR);</span><br><span class="line">            return jsonObject;</span><br><span class="line">        &#125;</span><br><span class="line">        return jsonObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">      * @Description: 用户管理-登出接口</span><br><span class="line">      * @return com.alibaba.fastjson.JSONObject</span><br><span class="line">      * @date 2019&#x2F;1&#x2F;23 11:12</span><br><span class="line">    **&#x2F;</span><br><span class="line">    @GetMapping(&quot;exit&quot;)</span><br><span class="line">    @ApiOperation(&quot;用户管理-登出接口&quot;)</span><br><span class="line">    public JSONObject exit(@RequestHeader(&quot;Authorization&quot;) String token)&#123;</span><br><span class="line">        JSONObject jsonObject &#x3D; new JSONObject();</span><br><span class="line">        try &#123;</span><br><span class="line">            redisTemplate.delete(&quot;reb_backend_&quot; + token);</span><br><span class="line">            String account &#x3D; JwtUtil.getUsername(token);</span><br><span class="line">            &#x2F;&#x2F;根据用户账号获取用户信息</span><br><span class="line">            User user &#x3D; userService.findUserByAccount(account);</span><br><span class="line">            userService.exit(user);</span><br><span class="line">            jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_SUCCESS);</span><br><span class="line">            jsonObject.put(&quot;errorMsg&quot;,ResponseCode.MSG_SUCCESS);</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            logger.error(&quot;用户管理-登出接口&#x3D;&#x3D;&#x3D;&quot;,e.getMessage());</span><br><span class="line">            jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_ERROR);</span><br><span class="line">            jsonObject.put(&quot;errorMsg&quot;,ResponseCode.MSG_ERROR);</span><br><span class="line">            return jsonObject;</span><br><span class="line">        &#125;</span><br><span class="line">        return jsonObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">      * @Description: 用户管理-用户注册</span><br><span class="line">      * @return com.alibaba.fastjson.JSONObject</span><br><span class="line">      * @date 2018&#x2F;11&#x2F;20 10:05</span><br><span class="line">    **&#x2F;</span><br><span class="line">    @ApiOperation(&quot;用户管理-用户注册&quot;)</span><br><span class="line">    @GetMapping(&quot;register&quot;)</span><br><span class="line">    @ApiImplicitParams(&#123;</span><br><span class="line">            @ApiImplicitParam(name &#x3D; &quot;password&quot;,value &#x3D; &quot;用户密码&quot;,paramType &#x3D; &quot;query&quot;,dataType &#x3D; &quot;String&quot;),</span><br><span class="line">            @ApiImplicitParam(name &#x3D; &quot;username&quot;,value &#x3D; &quot;用户名&quot;,paramType &#x3D; &quot;query&quot;,dataType &#x3D; &quot;String&quot;),</span><br><span class="line">            @ApiImplicitParam(name &#x3D; &quot;departmentId&quot;,value &#x3D; &quot;部门ID&quot;,paramType &#x3D; &quot;query&quot;,dataType &#x3D; &quot;Integer&quot;),</span><br><span class="line">            @ApiImplicitParam(name &#x3D; &quot;phone&quot;,value &#x3D; &quot;手机号&quot;,paramType &#x3D; &quot;query&quot;,dataType &#x3D; &quot;String&quot;),</span><br><span class="line">            @ApiImplicitParam(name &#x3D; &quot;code&quot;,value &#x3D; &quot;验证码&quot;,paramType &#x3D; &quot;query&quot;,dataType &#x3D; &quot;String&quot;)</span><br><span class="line">    &#125;)</span><br><span class="line">    public JSONObject register(String username,String phone,Integer departmentId,String password,String code,HttpServletRequest request) &#123;</span><br><span class="line">        JSONObject jsonObject &#x3D; new JSONObject();</span><br><span class="line">        String checkCode &#x3D; (String) request.getSession().getAttribute(&quot;code&quot;);</span><br><span class="line">        String newCheckCode &#x3D; checkCode.toLowerCase();</span><br><span class="line">        String newCode &#x3D; code.toLowerCase();</span><br><span class="line">        if (!newCode.equals(newCheckCode)) &#123;</span><br><span class="line">            jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_PARAM_NULL);</span><br><span class="line">            jsonObject.put(&quot;errorMsg&quot;, &quot;验证码错误&quot;);</span><br><span class="line">            return jsonObject;</span><br><span class="line">        &#125;</span><br><span class="line">        if (StringUtils.isBlank(username)) &#123;</span><br><span class="line">            jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_PARAM_NULL);</span><br><span class="line">            jsonObject.put(&quot;errorMsg&quot;, &quot;username&quot; + ResponseCode.MSG_PARAM_NULL);</span><br><span class="line">            return jsonObject;</span><br><span class="line">        &#125;</span><br><span class="line">        if (StringUtils.isBlank(phone)) &#123;</span><br><span class="line">            jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_PARAM_NULL);</span><br><span class="line">            jsonObject.put(&quot;errorMsg&quot;, &quot;phone&quot; + ResponseCode.MSG_PARAM_NULL);</span><br><span class="line">            return jsonObject;</span><br><span class="line">        &#125;</span><br><span class="line">        if (StringUtils.isBlank(password)) &#123;</span><br><span class="line">            jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_PARAM_NULL);</span><br><span class="line">            jsonObject.put(&quot;errorMsg&quot;, &quot;password&quot; + ResponseCode.MSG_PARAM_NULL);</span><br><span class="line">            return jsonObject;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;校验账户是否存在</span><br><span class="line">        User user &#x3D; userService.findUserByAccount(phone);</span><br><span class="line">        if (user !&#x3D; null) &#123;</span><br><span class="line">            jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_PARAM_NULL);</span><br><span class="line">            jsonObject.put(&quot;errorMsg&quot;, &quot;该手机号已被注册&quot;);</span><br><span class="line">            return jsonObject;</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            String md5Password &#x3D; PasswordUtil.encode(password, &quot;fin_risk_management_reb_backend&quot;);</span><br><span class="line">            userService.register(username, phone, departmentId, md5Password);</span><br><span class="line">            jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_SUCCESS);</span><br><span class="line">            jsonObject.put(&quot;errorMsg&quot;, ResponseCode.MSG_SUCCESS);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            logger.error(&quot;用户管理-用户注册&#x3D;&#x3D;&#x3D;&quot;, e.getMessage());</span><br><span class="line">            jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_ERROR);</span><br><span class="line">            jsonObject.put(&quot;errorMsg&quot;, ResponseCode.MSG_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        return jsonObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">      * @Description: 后台管理-用户登录首次加载列表</span><br><span class="line">      * @return com.alibaba.fastjson.JSONObject</span><br><span class="line">      * @date 2018&#x2F;12&#x2F;10 13:53</span><br><span class="line">    **&#x2F;</span><br><span class="line">    @ApiOperation(&quot;后台管理-用户登录首次加载列表&quot;)</span><br><span class="line">    @GetMapping(&quot;userLoginFirstLoadList&quot;)</span><br><span class="line">    public JSONObject userLoginFirstLoadList(@RequestHeader(&quot;Authorization&quot;) String token)&#123;</span><br><span class="line">        JSONObject jsonObject &#x3D; new JSONObject();</span><br><span class="line">        try &#123;</span><br><span class="line">            String account &#x3D; JwtUtil.getUsername(token);</span><br><span class="line">            &#x2F;&#x2F;根据用户账号获取用户信息</span><br><span class="line">            User user &#x3D; userService.findUserByAccount(account);</span><br><span class="line">            List&lt;String&gt; roleList &#x3D; userService.findRoleListByUserId(user.getId());</span><br><span class="line">            jsonObject &#x3D; userService.userLoginFirstLoadList(roleList.get(0),user.getId());</span><br><span class="line">            jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_SUCCESS);</span><br><span class="line">            jsonObject.put(&quot;errorMsg&quot;,ResponseCode.MSG_SUCCESS);</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            logger.error(&quot;后台管理-用户登录首次加载列表&#x3D;&#x3D;&#x3D;&quot;,e.getMessage());</span><br><span class="line">            jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_ERROR);</span><br><span class="line">            jsonObject.put(&quot;errorMsg&quot;,ResponseCode.MSG_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        return jsonObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">      * @Description: 部门管理-模块授权下拉</span><br><span class="line">      * @return com.alibaba.fastjson.JSONObject</span><br><span class="line">      * @date 2018&#x2F;12&#x2F;11 16:10</span><br><span class="line">    **&#x2F;</span><br><span class="line">    @ApiOperation(&quot;部门管理-模块授权下拉框&quot;)</span><br><span class="line">    @GetMapping(&quot;authorizationModuleSelected&quot;)</span><br><span class="line">    public JSONObject authorizationModuleSelected()&#123;</span><br><span class="line">        JSONObject jsonObject &#x3D; new JSONObject();</span><br><span class="line">        try &#123;</span><br><span class="line">            jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_SUCCESS);</span><br><span class="line">            jsonObject.put(&quot;errorMsg&quot;,ResponseCode.MSG_SUCCESS);</span><br><span class="line">            jsonObject &#x3D; userService.authorizationModuleSelected();</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            logger.error(&quot;部门管理-模块授权下拉框&#x3D;&#x3D;&#x3D;&quot;,e.getMessage());</span><br><span class="line">            jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_ERROR);</span><br><span class="line">            jsonObject.put(&quot;errorMsg&quot;,ResponseCode.MSG_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        return jsonObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">      * @Description: 用户管理-用户列表展示</span><br><span class="line">      * @return com.alibaba.fastjson.JSONObject</span><br><span class="line">      * @date 2018&#x2F;12&#x2F;12 10:55</span><br><span class="line">    **&#x2F;</span><br><span class="line">    @ApiOperation(&quot;用户管理-用户列表展示&quot;)</span><br><span class="line">    @GetMapping(&quot;readUserListShow&quot;)</span><br><span class="line">    public JSONObject readUserListShow(@RequestHeader(&quot;Authorization&quot;) String token)&#123;</span><br><span class="line">        JSONObject jsonObject &#x3D; new JSONObject();</span><br><span class="line">        try &#123;</span><br><span class="line">            String account &#x3D; JwtUtil.getUsername(token);</span><br><span class="line">            &#x2F;&#x2F;根据用户账号获取用户信息</span><br><span class="line">            User user &#x3D; userService.findUserByAccount(account);</span><br><span class="line">            List&lt;String&gt; roleList &#x3D; userService.findRoleListByUserId(user.getId());</span><br><span class="line">            List&lt;UserVO&gt; list &#x3D; userService.readUserListShow(roleList.get(0),user.getId());</span><br><span class="line">            jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_SUCCESS);</span><br><span class="line">            jsonObject.put(&quot;errorMsg&quot;,ResponseCode.MSG_SUCCESS);</span><br><span class="line">            jsonObject.put(&quot;data&quot;,list);</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            logger.error(&quot;用户管理-用户列表展示&#x3D;&#x3D;&#x3D;&quot;,e.getMessage());</span><br><span class="line">            jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_ERROR);</span><br><span class="line">            jsonObject.put(&quot;errorMsg&quot;,ResponseCode.MSG_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        return jsonObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">      * @Description: 用户管理-角色下拉框</span><br><span class="line">      * @return com.alibaba.fastjson.JSONObject</span><br><span class="line">      * @date 2018&#x2F;12&#x2F;13 10:06</span><br><span class="line">    **&#x2F;</span><br><span class="line">    @ApiOperation(&quot;用户管理-角色下拉框&quot;)</span><br><span class="line">    @GetMapping(&quot;readRoleSelected&quot;)</span><br><span class="line">    public JSONObject readRoleSelected(@RequestHeader(&quot;Authorization&quot;) String token)&#123;</span><br><span class="line">        JSONObject jsonObject &#x3D; new JSONObject();</span><br><span class="line">        try &#123;</span><br><span class="line">            String account &#x3D; JwtUtil.getUsername(token);</span><br><span class="line">            &#x2F;&#x2F;根据用户账号获取用户信息</span><br><span class="line">            User user &#x3D; userService.findUserByAccount(account);</span><br><span class="line">            List&lt;String&gt; roleList &#x3D; userService.findRoleListByUserId(user.getId());</span><br><span class="line">            JSONArray jsonArray &#x3D; userService.readRoleSelected(roleList.get(0));</span><br><span class="line">            jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_SUCCESS);</span><br><span class="line">            jsonObject.put(&quot;errorMsg&quot;,ResponseCode.MSG_SUCCESS);</span><br><span class="line">            jsonObject.put(&quot;data&quot;,jsonArray);</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            logger.error(&quot;用户管理-角色下拉框&#x3D;&#x3D;&#x3D;&quot;,e.getMessage());</span><br><span class="line">            jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_ERROR);</span><br><span class="line">            jsonObject.put(&quot;errorMsg&quot;,ResponseCode.MSG_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        return jsonObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">      * @Description: 用户管理-账号删除&#x2F;拒绝通用接口</span><br><span class="line">      * @return com.alibaba.fastjson.JSONObject</span><br><span class="line">      * @date 2018&#x2F;12&#x2F;13 11:26</span><br><span class="line">    **&#x2F;</span><br><span class="line">    @ApiOperation(&quot;用户管理-账号删除&#x2F;拒绝通用接口&quot;)</span><br><span class="line">    @GetMapping(&quot;delAndRefuseUser&quot;)</span><br><span class="line">    @ApiImplicitParam(name &#x3D; &quot;userId&quot;,value &#x3D; &quot;用户ID&quot;,paramType &#x3D; &quot;query&quot;,dataType &#x3D; &quot;Integer&quot;)</span><br><span class="line">    public JSONObject delAndRefuseUser(Integer userId)&#123;</span><br><span class="line">        JSONObject jsonObject &#x3D; new JSONObject();</span><br><span class="line">        try &#123;</span><br><span class="line">            userService.delAndRefuseUser(userId);</span><br><span class="line">            jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_SUCCESS);</span><br><span class="line">            jsonObject.put(&quot;errorMsg&quot;,ResponseCode.MSG_SUCCESS);</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            logger.error(&quot;用户管理-账号删除&#x2F;拒绝通用接口&#x3D;&#x3D;&#x3D;&quot;,e.getMessage());</span><br><span class="line">            jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_ERROR);</span><br><span class="line">            jsonObject.put(&quot;errorMsg&quot;,ResponseCode.MSG_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        return jsonObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">      * @Description: 用户管理-账号启用&#x2F;禁用通用接口</span><br><span class="line">      * @return com.alibaba.fastjson.JSONObject</span><br><span class="line">      * @date 2018&#x2F;12&#x2F;13 11:43</span><br><span class="line">    **&#x2F;</span><br><span class="line">    @ApiOperation(&quot;用户管理-账号启用&#x2F;禁用通用接口&quot;)</span><br><span class="line">    @GetMapping(&quot;enableAndDisabledUser&quot;)</span><br><span class="line">    @ApiImplicitParams(&#123;</span><br><span class="line">            @ApiImplicitParam(name &#x3D; &quot;userId&quot;,value &#x3D; &quot;用户ID&quot;,paramType &#x3D; &quot;query&quot;,dataType &#x3D; &quot;Integer&quot;),</span><br><span class="line">            @ApiImplicitParam(name &#x3D; &quot;userStatus&quot;,value &#x3D; &quot;用户状态 1：启用 2：禁用 3：申请中&quot;,paramType &#x3D; &quot;query&quot;,dataType &#x3D; &quot;Integer&quot;)</span><br><span class="line">    &#125;)</span><br><span class="line">    public JSONObject enableAndDisabledUser(Integer userId,Integer userStatus)&#123;</span><br><span class="line">        JSONObject jsonObject &#x3D; new JSONObject();</span><br><span class="line">        try &#123;</span><br><span class="line">            userService.enableAndDisabledUser(userId,userStatus);</span><br><span class="line">            jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_SUCCESS);</span><br><span class="line">            jsonObject.put(&quot;errorMsg&quot;,ResponseCode.MSG_SUCCESS);</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            logger.error(&quot;用户管理-账号启用&#x2F;禁用通用接口&#x3D;&#x3D;&#x3D;&quot;,e.getMessage());</span><br><span class="line">            jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_ERROR);</span><br><span class="line">            jsonObject.put(&quot;errorMsg&quot;,ResponseCode.MSG_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        return jsonObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">      * @Description: 用户管理-用户通过申请</span><br><span class="line">      * @return com.alibaba.fastjson.JSONObject</span><br><span class="line">      * @date 2018&#x2F;12&#x2F;13 14:41</span><br><span class="line">    **&#x2F;</span><br><span class="line">    @ApiImplicitParams(&#123;</span><br><span class="line">            @ApiImplicitParam(name &#x3D; &quot;userId&quot;,value &#x3D; &quot;用户ID&quot;,paramType &#x3D; &quot;query&quot;,dataType &#x3D; &quot;Integer&quot;),</span><br><span class="line">            @ApiImplicitParam(name &#x3D; &quot;roleId&quot;,value &#x3D; &quot;角色ID&quot;,paramType &#x3D; &quot;query&quot;,dataType &#x3D; &quot;Integer&quot;)</span><br><span class="line">    &#125;)</span><br><span class="line">    @ApiOperation(&quot;用户管理-用户通过申请&quot;)</span><br><span class="line">    @GetMapping(&quot;adoptUser&quot;)</span><br><span class="line">    public JSONObject adoptUser(Integer userId,Integer roleId)&#123;</span><br><span class="line">        JSONObject jsonObject &#x3D; new JSONObject();</span><br><span class="line">        try &#123;</span><br><span class="line">            userService.adoptUser(userId,roleId);</span><br><span class="line">            jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_SUCCESS);</span><br><span class="line">            jsonObject.put(&quot;errorMsg&quot;,ResponseCode.MSG_SUCCESS);</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            logger.error(&quot;用户管理-用户通过申请&#x3D;&#x3D;&#x3D;&quot;,e.getMessage());</span><br><span class="line">            jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_ERROR);</span><br><span class="line">            jsonObject.put(&quot;errorMsg&quot;,ResponseCode.MSG_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        return jsonObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">      * @Description: 用户管理-管理员添加用户</span><br><span class="line">      * @return com.alibaba.fastjson.JSONObject</span><br><span class="line">      * @date 2018&#x2F;12&#x2F;14 17:08</span><br><span class="line">    **&#x2F;</span><br><span class="line">    @ApiOperation(&quot;用户管理-管理员添加用户&quot;)</span><br><span class="line">    @ApiImplicitParams(&#123;</span><br><span class="line">            @ApiImplicitParam(name &#x3D; &quot;username&quot;,value &#x3D; &quot;用户名&quot;,paramType &#x3D; &quot;query&quot;,dataType &#x3D; &quot;String&quot;),</span><br><span class="line">            @ApiImplicitParam(name &#x3D; &quot;departmentId&quot;,value &#x3D; &quot;部门ID&quot;,paramType &#x3D; &quot;query&quot;,dataType &#x3D; &quot;Integer&quot;),</span><br><span class="line">            @ApiImplicitParam(name &#x3D; &quot;phone&quot;,value &#x3D; &quot;手机号&quot;,paramType &#x3D; &quot;query&quot;,dataType &#x3D; &quot;String&quot;),</span><br><span class="line">            @ApiImplicitParam(name &#x3D; &quot;roleId&quot;,value &#x3D; &quot;角色ID&quot;,paramType &#x3D; &quot;query&quot;,dataType &#x3D; &quot;Integer&quot;)</span><br><span class="line">    &#125;)</span><br><span class="line">    @GetMapping(&quot;adminAddUser&quot;)</span><br><span class="line">    public JSONObject adminAddUser(String username,Integer departmentId,String phone,Integer roleId)&#123;</span><br><span class="line">        JSONObject jsonObject &#x3D; new JSONObject();</span><br><span class="line">        try&#123;</span><br><span class="line">            Integer userId &#x3D; userService.findUserIdByAccountAndUserId(phone,0);</span><br><span class="line">            if (userId !&#x3D; null)&#123;</span><br><span class="line">                jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_RESULT_NULL);</span><br><span class="line">                jsonObject.put(&quot;errorMsg&quot;,&quot;该登录账号已存在&quot;);</span><br><span class="line">                return jsonObject;</span><br><span class="line">            &#125;</span><br><span class="line">            if (StringUtils.isBlank(username))&#123;</span><br><span class="line">                jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_PARAM_NULL);</span><br><span class="line">                jsonObject.put(&quot;errorMsg&quot;,&quot;username&quot; + ResponseCode.MSG_PARAM_NULL);</span><br><span class="line">                return jsonObject;</span><br><span class="line">            &#125;</span><br><span class="line">            if (StringUtils.isBlank(phone))&#123;</span><br><span class="line">                jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_PARAM_NULL);</span><br><span class="line">                jsonObject.put(&quot;errorMsg&quot;,&quot;phone&quot; + ResponseCode.MSG_PARAM_NULL);</span><br><span class="line">                return jsonObject;</span><br><span class="line">            &#125;</span><br><span class="line">            userService.adminAddUser(username,departmentId,phone,roleId);</span><br><span class="line">            jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_SUCCESS);</span><br><span class="line">            jsonObject.put(&quot;errorMsg&quot;,ResponseCode.MSG_SUCCESS);</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            logger.error(&quot;用户管理-管理员添加用户&#x3D;&#x3D;&#x3D;&quot;,e.getMessage());</span><br><span class="line">            jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_ERROR);</span><br><span class="line">            jsonObject.put(&quot;errorMsg&quot;,ResponseCode.MSG_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        return jsonObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">      * @Description: 用户管理-修改用户</span><br><span class="line">      * @return com.alibaba.fastjson.JSONObject</span><br><span class="line">      * @date 2018&#x2F;12&#x2F;17 14:45</span><br><span class="line">    **&#x2F;</span><br><span class="line">    @ApiOperation(&quot;用户管理-修改用户&quot;)</span><br><span class="line">    @ApiImplicitParams(&#123;</span><br><span class="line">            @ApiImplicitParam(name &#x3D; &quot;id&quot;,value &#x3D; &quot;用户ID&quot;,paramType &#x3D; &quot;query&quot;,dataType &#x3D; &quot;Integer&quot;),</span><br><span class="line">            @ApiImplicitParam(name &#x3D; &quot;username&quot;,value &#x3D; &quot;用户名&quot;,paramType &#x3D; &quot;query&quot;,dataType &#x3D; &quot;String&quot;),</span><br><span class="line">            @ApiImplicitParam(name &#x3D; &quot;departmentId&quot;,value &#x3D; &quot;部门ID&quot;,paramType &#x3D; &quot;query&quot;,dataType &#x3D; &quot;Integer&quot;),</span><br><span class="line">            @ApiImplicitParam(name &#x3D; &quot;phone&quot;,value &#x3D; &quot;手机号&quot;,paramType &#x3D; &quot;query&quot;,dataType &#x3D; &quot;String&quot;),</span><br><span class="line">            @ApiImplicitParam(name &#x3D; &quot;roleId&quot;,value &#x3D; &quot;角色ID&quot;,paramType &#x3D; &quot;query&quot;,dataType &#x3D; &quot;Integer&quot;)</span><br><span class="line">    &#125;)</span><br><span class="line">    @GetMapping(&quot;updateUser&quot;)</span><br><span class="line">    public JSONObject updateUser(Integer id,String username,Integer departmentId,String phone,Integer roleId)&#123;</span><br><span class="line">        JSONObject jsonObject &#x3D; new JSONObject();</span><br><span class="line">        try&#123;</span><br><span class="line">            if (StringUtils.isBlank(username))&#123;</span><br><span class="line">                jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_PARAM_NULL);</span><br><span class="line">                jsonObject.put(&quot;errorMsg&quot;,&quot;username&quot; + ResponseCode.MSG_PARAM_NULL);</span><br><span class="line">                return jsonObject;</span><br><span class="line">            &#125;</span><br><span class="line">            if (StringUtils.isBlank(phone))&#123;</span><br><span class="line">                jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_PARAM_NULL);</span><br><span class="line">                jsonObject.put(&quot;errorMsg&quot;,&quot;phone&quot; + ResponseCode.MSG_PARAM_NULL);</span><br><span class="line">                return jsonObject;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F;校验手机号是否已存在</span><br><span class="line">            Integer userId &#x3D; userService.findUserIdByAccountAndUserId(phone,id);</span><br><span class="line">            if (userId !&#x3D; null)&#123;</span><br><span class="line">                jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_RESULT_NULL);</span><br><span class="line">                jsonObject.put(&quot;errorMsg&quot;,&quot;该登录账号已存在&quot;);</span><br><span class="line">                return jsonObject;</span><br><span class="line">            &#125;</span><br><span class="line">            userService.updateUser(id,username,departmentId,phone,roleId);</span><br><span class="line">            jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_SUCCESS);</span><br><span class="line">            jsonObject.put(&quot;errorMsg&quot;,ResponseCode.MSG_SUCCESS);</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            logger.error(&quot;用户管理-修改用户&#x3D;&#x3D;&#x3D;&quot;,e.getMessage());</span><br><span class="line">            jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_ERROR);</span><br><span class="line">            jsonObject.put(&quot;errorMsg&quot;,ResponseCode.MSG_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        return jsonObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">      * @Description: 部门管理-添加部门</span><br><span class="line">      * @return com.alibaba.fastjson.JSONObject</span><br><span class="line">      * @date 2018&#x2F;12&#x2F;19 10:12</span><br><span class="line">    **&#x2F;</span><br><span class="line">    @ApiOperation(&quot;部门管理-添加部门&quot;)</span><br><span class="line">    @ApiImplicitParams(&#123;</span><br><span class="line">            @ApiImplicitParam(name &#x3D; &quot;departmentName&quot;, value &#x3D; &quot;部门名称&quot;, paramType &#x3D; &quot;query&quot;, dataType &#x3D; &quot;String&quot;),</span><br><span class="line">            @ApiImplicitParam(name &#x3D; &quot;model&quot;, value &#x3D; &quot;模块JSON&quot;, paramType &#x3D; &quot;query&quot;, dataType &#x3D; &quot;String&quot;)</span><br><span class="line">    &#125;)</span><br><span class="line">    @GetMapping(&quot;addDepartment&quot;)</span><br><span class="line">    public JSONObject addDepartment(String departmentName,String model)&#123;</span><br><span class="line">        JSONObject jsonObject &#x3D; new JSONObject();</span><br><span class="line">        try &#123;</span><br><span class="line">            if (StringUtils.isBlank(departmentName))&#123;</span><br><span class="line">                jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_PARAM_NULL);</span><br><span class="line">                jsonObject.put(&quot;errorMsg&quot;,&quot;departmentName&quot; + ResponseCode.MSG_PARAM_NULL);</span><br><span class="line">                return jsonObject;</span><br><span class="line">            &#125;</span><br><span class="line">            if (StringUtils.isBlank(model))&#123;</span><br><span class="line">                jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_PARAM_NULL);</span><br><span class="line">                jsonObject.put(&quot;errorMsg&quot;,&quot;model&quot; + ResponseCode.MSG_PARAM_NULL);</span><br><span class="line">                return jsonObject;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F;校验部门名称是否已存在</span><br><span class="line">            Integer id &#x3D; userService.findDepartmentByDepartmentName(departmentName);</span><br><span class="line">            if (id !&#x3D; null)&#123;</span><br><span class="line">                jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_PARAM_NULL);</span><br><span class="line">                jsonObject.put(&quot;errorMsg&quot;,&quot;部门名称已存在&quot;);</span><br><span class="line">                return jsonObject;</span><br><span class="line">            &#125;</span><br><span class="line">            userService.addDepartment(departmentName,model);</span><br><span class="line">            jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_SUCCESS);</span><br><span class="line">            jsonObject.put(&quot;errorMsg&quot;,ResponseCode.MSG_SUCCESS);</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            logger.error(&quot;部门管理-添加部门&#x3D;&#x3D;&#x3D;&quot;,e.getMessage());</span><br><span class="line">            jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_ERROR);</span><br><span class="line">            jsonObject.put(&quot;errorMsg&quot;,ResponseCode.MSG_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        return jsonObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">      * @Description: 部门管理-部门列表展示</span><br><span class="line">      * @return com.alibaba.fastjson.JSONObject</span><br><span class="line">      * @date 2018&#x2F;12&#x2F;19 11:00</span><br><span class="line">    **&#x2F;</span><br><span class="line">    @ApiOperation(&quot;部门管理-部门列表展示&quot;)</span><br><span class="line">    @GetMapping(&quot;readDepartmentShow&quot;)</span><br><span class="line">    public JSONObject readDepartmentShow(@RequestHeader(&quot;Authorization&quot;) String token) &#123;</span><br><span class="line">        JSONObject jsonObject &#x3D; new JSONObject();</span><br><span class="line">        try &#123;</span><br><span class="line">            String account &#x3D; JwtUtil.getUsername(token);</span><br><span class="line">            &#x2F;&#x2F;根据用户账号获取用户信息</span><br><span class="line">            User user &#x3D; userService.findUserByAccount(account);</span><br><span class="line">            List&lt;String&gt; roleList &#x3D; userService.findRoleListByUserId(user.getId());</span><br><span class="line">            List&lt;DictDepartment&gt; list &#x3D; userService.readDepartmentShow(roleList.get(0), user.getId());</span><br><span class="line">            jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_SUCCESS);</span><br><span class="line">            jsonObject.put(&quot;errorMsg&quot;, ResponseCode.MSG_SUCCESS);</span><br><span class="line">            jsonObject.put(&quot;data&quot;, list);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            logger.error(&quot;部门管理-部门列表展示&#x3D;&#x3D;&#x3D;&quot;, e.getMessage());</span><br><span class="line">            jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_ERROR);</span><br><span class="line">            jsonObject.put(&quot;errorMsg&quot;, ResponseCode.MSG_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        return jsonObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">      * @Description: 部门管理-删除部门</span><br><span class="line">      * @return com.alibaba.fastjson.JSONObject</span><br><span class="line">      * @date 2018&#x2F;12&#x2F;29 9:52</span><br><span class="line">    **&#x2F;</span><br><span class="line">    @ApiOperation(&quot;部门管理-删除部门&quot;)</span><br><span class="line">    @ApiImplicitParam(name &#x3D; &quot;departmentId&quot;, value &#x3D; &quot;部门ID&quot;, paramType &#x3D; &quot;query&quot;, dataType &#x3D; &quot;Integer&quot;)</span><br><span class="line">    @GetMapping(&quot;delDepartment&quot;)</span><br><span class="line">    public JSONObject delDepartment(Integer departmentId)&#123;</span><br><span class="line">        JSONObject jsonObject &#x3D; new JSONObject();</span><br><span class="line">        try &#123;</span><br><span class="line">            userService.delDepartment(departmentId);</span><br><span class="line">            jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_SUCCESS);</span><br><span class="line">            jsonObject.put(&quot;errorMsg&quot;, ResponseCode.MSG_SUCCESS);</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            logger.error(&quot;部门管理-删除部门&#x3D;&#x3D;&#x3D;&quot;, e.getMessage());</span><br><span class="line">            jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_ERROR);</span><br><span class="line">            jsonObject.put(&quot;errorMsg&quot;, ResponseCode.MSG_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        return jsonObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">      * @Description: 部门管理-授权模块</span><br><span class="line">      * @return com.alibaba.fastjson.JSONObject</span><br><span class="line">      * @date 2018&#x2F;12&#x2F;19 16:31</span><br><span class="line">    **&#x2F;</span><br><span class="line">    @ApiOperation(&quot;部门管理-授权模块&quot;)</span><br><span class="line">    @ApiImplicitParams(&#123;</span><br><span class="line">            @ApiImplicitParam(name &#x3D; &quot;departmentId&quot;, value &#x3D; &quot;部门ID&quot;, paramType &#x3D; &quot;query&quot;, dataType &#x3D; &quot;Integer&quot;),</span><br><span class="line">            @ApiImplicitParam(name &#x3D; &quot;model&quot;, value &#x3D; &quot;模块JSON&quot;, paramType &#x3D; &quot;query&quot;, dataType &#x3D; &quot;String&quot;)</span><br><span class="line">    &#125;)</span><br><span class="line">    @GetMapping(&quot;authorizationModule&quot;)</span><br><span class="line">    public JSONObject authorizationModule(Integer departmentId,String model)&#123;</span><br><span class="line">        JSONObject jsonObject &#x3D; new JSONObject();</span><br><span class="line">        try &#123;</span><br><span class="line">            userService.authorizationModule(departmentId,model);</span><br><span class="line">            jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_SUCCESS);</span><br><span class="line">            jsonObject.put(&quot;errorMsg&quot;,ResponseCode.MSG_SUCCESS);</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            logger.error(&quot;部门管理-授权模块&#x3D;&#x3D;&#x3D;&quot;,e.getMessage());</span><br><span class="line">            jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_ERROR);</span><br><span class="line">            jsonObject.put(&quot;errorMsg&quot;,ResponseCode.MSG_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        return jsonObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">      * @Description: 用户管理-部门下拉框</span><br><span class="line">      * @return com.alibaba.fastjson.JSONObject</span><br><span class="line">      * @date 2018&#x2F;12&#x2F;19 17:40</span><br><span class="line">    **&#x2F;</span><br><span class="line">    @ApiOperation(&quot;用户管理-部门下拉框&quot;)</span><br><span class="line">    @GetMapping(&quot;readDepartmentSelected&quot;)</span><br><span class="line">    public JSONObject readDepartmentSelected(@RequestHeader(&quot;Authorization&quot;) String token)&#123;</span><br><span class="line">        JSONObject jsonObject &#x3D; new JSONObject();</span><br><span class="line">        try &#123;</span><br><span class="line">            String account &#x3D; JwtUtil.getUsername(token);</span><br><span class="line">            &#x2F;&#x2F;根据用户账号获取用户信息</span><br><span class="line">            User user &#x3D; userService.findUserByAccount(account);</span><br><span class="line">            List&lt;String&gt; roleList &#x3D; userService.findRoleListByUserId(user.getId());</span><br><span class="line">            List&lt;DictDepartment&gt; list &#x3D; userService.readDepartmentSelected(roleList.get(0),user.getId());</span><br><span class="line">            jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_SUCCESS);</span><br><span class="line">            jsonObject.put(&quot;errorMsg&quot;,ResponseCode.MSG_SUCCESS);</span><br><span class="line">            jsonObject.put(&quot;data&quot;,list);</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            logger.error(&quot;用户管理-部门下拉框&#x3D;&#x3D;&#x3D;&quot;,e.getMessage());</span><br><span class="line">            jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_ERROR);</span><br><span class="line">            jsonObject.put(&quot;errorMsg&quot;,ResponseCode.MSG_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        return jsonObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * @Description: 用户管理-用户注册部门下拉框</span><br><span class="line">     * @return com.alibaba.fastjson.JSONObject</span><br><span class="line">     * @date 2018&#x2F;12&#x2F;19 17:40</span><br><span class="line">     **&#x2F;</span><br><span class="line">    @ApiOperation(&quot;用户管理-用户注册部门下拉框&quot;)</span><br><span class="line">    @GetMapping(&quot;registerDepartmentSelected&quot;)</span><br><span class="line">    public JSONObject registerDepartmentSelected()&#123;</span><br><span class="line">        JSONObject jsonObject &#x3D; new JSONObject();</span><br><span class="line">        try &#123;</span><br><span class="line">            List&lt;DictDepartment&gt; list &#x3D; userService.registerDepartmentSelected();</span><br><span class="line">            jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_SUCCESS);</span><br><span class="line">            jsonObject.put(&quot;errorMsg&quot;,ResponseCode.MSG_SUCCESS);</span><br><span class="line">            jsonObject.put(&quot;data&quot;,list);</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            logger.error(&quot;用户管理-用户注册部门下拉框&#x3D;&#x3D;&#x3D;&quot;,e.getMessage());</span><br><span class="line">            jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_ERROR);</span><br><span class="line">            jsonObject.put(&quot;errorMsg&quot;,ResponseCode.MSG_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        return jsonObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">      * @Description: 用户管理-获取验证码</span><br><span class="line">      * @return void</span><br><span class="line">      * @date 2018&#x2F;12&#x2F;26 14:58</span><br><span class="line">    **&#x2F;</span><br><span class="line">    @ApiOperation(&quot;用户管理-获取验证码&quot;)</span><br><span class="line">    @RequestMapping(value &#x3D; &quot;getSecurityCode&quot;,method &#x3D; RequestMethod.GET)</span><br><span class="line">    public void getSecurityCode(HttpServletResponse response, HttpServletRequest request,Integer random)&#123;</span><br><span class="line">        &#x2F;&#x2F; 设置响应的类型格式为图片格式</span><br><span class="line">        response.setContentType(&quot;image&#x2F;jpeg&quot;);</span><br><span class="line">        &#x2F;&#x2F; 通知浏览器不要缓存</span><br><span class="line">        response.setHeader(&quot;Expires&quot;, &quot;-1&quot;);</span><br><span class="line">        response.setHeader(&quot;Cache-Control&quot;, &quot;no-cache&quot;);</span><br><span class="line">        response.setHeader(&quot;Pragma&quot;, &quot;-1&quot;);</span><br><span class="line">        SecurityUtil util &#x3D; SecurityUtil.instance();</span><br><span class="line">        &#x2F;&#x2F; 将验证码输入到session中，用来验证</span><br><span class="line">        String code &#x3D; util.getString();</span><br><span class="line">        request.getSession().setAttribute(&quot;code&quot;, code);</span><br><span class="line">        &#x2F;&#x2F; 输出打web页面</span><br><span class="line">        try &#123;</span><br><span class="line">            ImageIO.write(util.getImage(), &quot;jpg&quot;, response.getOutputStream());</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">      * @Description: 用户管理-修改密码</span><br><span class="line">      * @return com.alibaba.fastjson.JSONObject</span><br><span class="line">      * @date 2019&#x2F;1&#x2F;10 14:21</span><br><span class="line">    **&#x2F;</span><br><span class="line">    @ApiOperation(&quot;用户管理-修改密码&quot;)</span><br><span class="line">    @ApiImplicitParams(&#123;</span><br><span class="line">            @ApiImplicitParam(name &#x3D; &quot;userId&quot;, value &#x3D; &quot;用户ID&quot;, paramType &#x3D; &quot;query&quot;, dataType &#x3D; &quot;Integer&quot;),</span><br><span class="line">            @ApiImplicitParam(name &#x3D; &quot;password&quot;, value &#x3D; &quot;密码&quot;, paramType &#x3D; &quot;query&quot;, dataType &#x3D; &quot;String&quot;)</span><br><span class="line">    &#125;)</span><br><span class="line">    @GetMapping(&quot;updatePassword&quot;)</span><br><span class="line">    public JSONObject updatePassword(Integer userId,String password)&#123;</span><br><span class="line">        JSONObject jsonObject &#x3D; new JSONObject();</span><br><span class="line">        try &#123;</span><br><span class="line">            if (userId &#x3D;&#x3D; null)&#123;</span><br><span class="line">                jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_PARAM_NULL);</span><br><span class="line">                jsonObject.put(&quot;errorMsg&quot;,&quot;userId&quot; + ResponseCode.MSG_PARAM_NULL);</span><br><span class="line">                return jsonObject;</span><br><span class="line">            &#125;</span><br><span class="line">            if (StringUtils.isBlank(password))&#123;</span><br><span class="line">                jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_PARAM_NULL);</span><br><span class="line">                jsonObject.put(&quot;errorMsg&quot;,&quot;password&quot; + ResponseCode.MSG_PARAM_NULL);</span><br><span class="line">                return jsonObject;</span><br><span class="line">            &#125;</span><br><span class="line">            userService.updatePassword(userId,password);</span><br><span class="line">            jsonObject.put(&quot;errorCode&quot;,ResponseCode.CODE_SUCCESS);</span><br><span class="line">            jsonObject.put(&quot;errorMsg&quot;,ResponseCode.MSG_SUCCESS);</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            logger.error(&quot;用户管理-修改密码&#x3D;&#x3D;&#x3D;&quot;,e.getMessage());</span><br><span class="line">            jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_ERROR);</span><br><span class="line">            jsonObject.put(&quot;errorMsg&quot;,ResponseCode.MSG_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        return jsonObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">      * @Description: 用户管理-校验原密码是否正确</span><br><span class="line">      * @return com.alibaba.fastjson.JSONObject</span><br><span class="line">      * @date 2019&#x2F;1&#x2F;10 14:36</span><br><span class="line">    **&#x2F;</span><br><span class="line">    @ApiOperation(&quot;用户管理-校验原密码是否正确&quot;)</span><br><span class="line">    @ApiImplicitParams(&#123;</span><br><span class="line">            @ApiImplicitParam(name &#x3D; &quot;userId&quot;, value &#x3D; &quot;用户ID&quot;, paramType &#x3D; &quot;query&quot;, dataType &#x3D; &quot;Integer&quot;),</span><br><span class="line">            @ApiImplicitParam(name &#x3D; &quot;password&quot;, value &#x3D; &quot;密码&quot;, paramType &#x3D; &quot;query&quot;, dataType &#x3D; &quot;String&quot;)</span><br><span class="line">    &#125;)</span><br><span class="line">    @GetMapping(&quot;checkPassword&quot;)</span><br><span class="line">    public JSONObject checkPassword(String password,Integer userId)&#123;</span><br><span class="line">        JSONObject jsonObject &#x3D; new JSONObject();</span><br><span class="line">        try &#123;</span><br><span class="line">            if (userId &#x3D;&#x3D; null)&#123;</span><br><span class="line">                jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_PARAM_NULL);</span><br><span class="line">                jsonObject.put(&quot;errorMsg&quot;,&quot;userId&quot; + ResponseCode.MSG_PARAM_NULL);</span><br><span class="line">                return jsonObject;</span><br><span class="line">            &#125;</span><br><span class="line">            if (StringUtils.isBlank(password))&#123;</span><br><span class="line">                jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_PARAM_NULL);</span><br><span class="line">                jsonObject.put(&quot;errorMsg&quot;,&quot;password&quot; + ResponseCode.MSG_PARAM_NULL);</span><br><span class="line">                return jsonObject;</span><br><span class="line">            &#125;</span><br><span class="line">            boolean check &#x3D; userService.checkPassword(userId,password);</span><br><span class="line">            if (!check)&#123;</span><br><span class="line">                jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_RESULT_NULL);</span><br><span class="line">                jsonObject.put(&quot;errorMsg&quot;,&quot;密码错误&quot;);</span><br><span class="line">                return jsonObject;</span><br><span class="line">            &#125;</span><br><span class="line">            jsonObject.put(&quot;errorCode&quot;,ResponseCode.CODE_SUCCESS);</span><br><span class="line">            jsonObject.put(&quot;errorMsg&quot;,ResponseCode.MSG_SUCCESS);</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            logger.error(&quot;用户管理-校验原密码是否正确&#x3D;&#x3D;&#x3D;&quot;,e.getMessage());</span><br><span class="line">            jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_ERROR);</span><br><span class="line">            jsonObject.put(&quot;errorMsg&quot;,ResponseCode.MSG_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        return jsonObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">      * @Description: 用户管理-重置密码</span><br><span class="line">      * @return com.alibaba.fastjson.JSONObject</span><br><span class="line">      * @date 2019&#x2F;1&#x2F;10 14:57</span><br><span class="line">    **&#x2F;</span><br><span class="line">    @ApiOperation(&quot;用户管理-重置密码&quot;)</span><br><span class="line">    @ApiImplicitParam(name &#x3D; &quot;userId&quot;, value &#x3D; &quot;用户ID&quot;, paramType &#x3D; &quot;query&quot;, dataType &#x3D; &quot;Integer&quot;)</span><br><span class="line">    @GetMapping(&quot;resetPassword&quot;)</span><br><span class="line">    public JSONObject resetPassword(Integer userId)&#123;</span><br><span class="line">        JSONObject jsonObject &#x3D; new JSONObject();</span><br><span class="line">        try &#123;</span><br><span class="line">            if (userId &#x3D;&#x3D; null)&#123;</span><br><span class="line">                jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_PARAM_NULL);</span><br><span class="line">                jsonObject.put(&quot;errorMsg&quot;,&quot;userId&quot; + ResponseCode.MSG_PARAM_NULL);</span><br><span class="line">                return jsonObject;</span><br><span class="line">            &#125;</span><br><span class="line">            userService.resetPassword(userId);</span><br><span class="line">            jsonObject.put(&quot;errorCode&quot;,ResponseCode.CODE_SUCCESS);</span><br><span class="line">            jsonObject.put(&quot;errorMsg&quot;,ResponseCode.MSG_SUCCESS);</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            logger.error(&quot;用户管理-重置密码&#x3D;&#x3D;&#x3D;&quot;,e.getMessage());</span><br><span class="line">            jsonObject.put(&quot;errorCode&quot;, ResponseCode.CODE_ERROR);</span><br><span class="line">            jsonObject.put(&quot;errorMsg&quot;,ResponseCode.MSG_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        return jsonObject;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>12 Pom配置（只是用来作为参考）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;reb_backend&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.aliyun&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;reb_service&lt;&#x2F;artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;name&gt;reb_service&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;!-- FIXME change it to the project&#39;s website --&gt;</span><br><span class="line">    &lt;url&gt;http:&#x2F;&#x2F;www.example.com&lt;&#x2F;url&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;</span><br><span class="line">        &lt;maven.compiler.source&gt;1.8&lt;&#x2F;maven.compiler.source&gt;</span><br><span class="line">        &lt;maven.compiler.target&gt;1.8&lt;&#x2F;maven.compiler.target&gt;</span><br><span class="line">        &lt;shiro.version&gt;1.4.0&lt;&#x2F;shiro.version&gt;</span><br><span class="line">    &lt;&#x2F;properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- redis --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-data-redis&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--Spring Boot中使用Swagger2构建强大的RESTful API文档--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;springfox-swagger2&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.7.0&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;springfox-swagger-ui&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.7.0&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis.spring.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;druid&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;!-- 连接池  --&gt;</span><br><span class="line">        &lt;!--&lt;dependency&gt;--&gt;</span><br><span class="line">            &lt;!--&lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;--&gt;</span><br><span class="line">            &lt;!--&lt;artifactId&gt;druid-spring-boot-starter&lt;&#x2F;artifactId&gt;--&gt;</span><br><span class="line">            &lt;!--&lt;version&gt;1.1.5&lt;&#x2F;version&gt;--&gt;</span><br><span class="line">        &lt;!--&lt;&#x2F;dependency&gt;--&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- esay poi --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;cn.afterturn&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;easypoi-base&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.0.3&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;cn.afterturn&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;easypoi-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.0.3&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;cn.afterturn&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;easypoi-annotation&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.0.3&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;!-- guava --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.google.guava&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;guava&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;18.0&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- shiro 配置--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.shiro&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;shiro-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;shiro.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.shiro&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;shiro-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;shiro.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.shiro&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;shiro-spring&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;shiro.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.auth0&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;java-jwt&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.3.0&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- json --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;fastjson&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!-- 缓存 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;net.sf.ehcache&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;ehcache&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-data-redis&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;commons-io&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;commons-io&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.aliyun&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;reb_common&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.github.pagehelper&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;pagehelper-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2.5&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.google.code.gson&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;gson&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.8.0&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--easypoi--&gt;</span><br><span class="line">        &lt;!--easypoi导出excel --&gt;</span><br><span class="line">        &lt;!--easypoi-base 导入导出的工具包,可以完成Excel导出,导入,Word的导出,Excel的导出功能 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;cn.afterturn&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;easypoi-base&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.0.3&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;cn.afterturn&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;easypoi-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.0.3&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;cn.afterturn&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;easypoi-annotation&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.0.3&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- springboot整合redis --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-data-redis&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;!-- 指定该Main Class为全局的唯一入口 --&gt;</span><br><span class="line">                    &lt;mainClass&gt;com.aliyun.finintell.rebbackend.RebBackendApplication&lt;&#x2F;mainClass&gt;</span><br><span class="line">                    &lt;layout&gt;ZIP&lt;&#x2F;layout&gt;</span><br><span class="line">                &lt;&#x2F;configuration&gt;</span><br><span class="line">                &lt;executions&gt;</span><br><span class="line">                    &lt;execution&gt;</span><br><span class="line">                        &lt;goals&gt;</span><br><span class="line">                            &lt;goal&gt;repackage&lt;&#x2F;goal&gt;&lt;!--可以把依赖的包都打包到生成的Jar包中--&gt;</span><br><span class="line">                        &lt;&#x2F;goals&gt;</span><br><span class="line">                    &lt;&#x2F;execution&gt;</span><br><span class="line">                &lt;&#x2F;executions&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;&#x2F;plugins&gt;</span><br><span class="line">        &lt;pluginManagement&gt;&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span><br><span class="line">            &lt;plugins&gt;</span><br><span class="line">                &lt;plugin&gt;</span><br><span class="line">                    &lt;artifactId&gt;maven-clean-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                    &lt;version&gt;3.0.0&lt;&#x2F;version&gt;</span><br><span class="line">                &lt;&#x2F;plugin&gt;</span><br><span class="line">                &lt;!-- see http:&#x2F;&#x2F;maven.apache.org&#x2F;ref&#x2F;current&#x2F;maven-core&#x2F;default-bindings.html#Plugin_bindings_for_jar_packaging --&gt;</span><br><span class="line">                &lt;plugin&gt;</span><br><span class="line">                    &lt;artifactId&gt;maven-resources-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                    &lt;version&gt;3.0.2&lt;&#x2F;version&gt;</span><br><span class="line">                &lt;&#x2F;plugin&gt;</span><br><span class="line">                &lt;plugin&gt;</span><br><span class="line">                    &lt;artifactId&gt;maven-compiler-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                    &lt;version&gt;3.7.0&lt;&#x2F;version&gt;</span><br><span class="line">                &lt;&#x2F;plugin&gt;</span><br><span class="line">                &lt;plugin&gt;</span><br><span class="line">                    &lt;artifactId&gt;maven-surefire-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                    &lt;version&gt;2.20.1&lt;&#x2F;version&gt;</span><br><span class="line">                &lt;&#x2F;plugin&gt;</span><br><span class="line">                &lt;plugin&gt;</span><br><span class="line">                    &lt;artifactId&gt;maven-jar-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                    &lt;version&gt;3.0.2&lt;&#x2F;version&gt;</span><br><span class="line">                &lt;&#x2F;plugin&gt;</span><br><span class="line">                &lt;plugin&gt;</span><br><span class="line">                    &lt;artifactId&gt;maven-install-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                    &lt;version&gt;2.5.2&lt;&#x2F;version&gt;</span><br><span class="line">                &lt;&#x2F;plugin&gt;</span><br><span class="line">                &lt;plugin&gt;</span><br><span class="line">                    &lt;artifactId&gt;maven-deploy-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                    &lt;version&gt;2.8.2&lt;&#x2F;version&gt;</span><br><span class="line">                &lt;&#x2F;plugin&gt;</span><br><span class="line">            &lt;&#x2F;plugins&gt;</span><br><span class="line">        &lt;&#x2F;pluginManagement&gt;</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Author: haoransun&lt;br&gt;Wechat: SHR—97&lt;/p&gt;
&lt;h1 id=&quot;1-判断一个点是否在不规则多边形内部&quot;&gt;&lt;a href=&quot;#1-判断一个点是否在不规则多边形内部&quot; class=&quot;headerlink&quot; title=&quot;1  判断一个点是否在不规则多边形内部&quot;&gt;&lt;/a&gt;1  判断一个点是否在不规则多边形内部&lt;/h1&gt;&lt;p&gt;用途：&lt;br&gt;用于判断企业是否落在指定区域内&lt;/p&gt;
&lt;p&gt;以一个点做射线，计算它与多边形边界的交点个数&lt;br&gt;       奇数个：在多边形内部&lt;br&gt;       偶数个：在多边形外部&lt;br&gt;推论：&lt;br&gt;如果点在多边形内部，射线第一次穿越边界一定是穿出多边形。&lt;br&gt;如果点在多边形外部，射线第一次穿越边界一定是进入多边形。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="搬砖结晶" scheme="http://JavaSsun.github.io/tags/%E6%90%AC%E7%A0%96%E7%BB%93%E6%99%B6/"/>
    
  </entry>
  
  <entry>
    <title>复杂度分析-下部</title>
    <link href="http://javassun.github.io/2019/08/12/%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90-%E4%B8%8B%E9%83%A8/"/>
    <id>http://javassun.github.io/2019/08/12/%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90-%E4%B8%8B%E9%83%A8/</id>
    <published>2019-08-12T14:00:30.000Z</published>
    <updated>2020-04-16T06:26:56.517Z</updated>
    
    <content type="html"><![CDATA[<p>Author: haoransun<br>Wechat: SHR—97<br><font color="red">学习来源：极客时间-算法之美，本人购买课程后依据图文讲解汇总成个人见解。</font></p><h1 id="1-浅析最好、最坏、平均、均摊时间复杂度"><a href="#1-浅析最好、最坏、平均、均摊时间复杂度" class="headerlink" title="1 浅析最好、最坏、平均、均摊时间复杂度"></a>1 浅析最好、最坏、平均、均摊时间复杂度</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">最好情况时间法则度</font>(best case time complexity)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">最坏情况时间复杂度</font>(worst case time complexity)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">平均情况时间复杂度</font>(average case time complexity)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">均摊时间复杂度</font>(amortized time complexity)</p><a id="more"></a><h2 id="1-1-最好、最坏情况时间复杂度"><a href="#1-1-最好、最坏情况时间复杂度" class="headerlink" title="1.1 最好、最坏情况时间复杂度"></a>1.1 最好、最坏情况时间复杂度</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// n 表示数组 array 的长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> n, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> pos = -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (array[i] == x) pos = i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> pos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上述代码的功能：在一个无序的数组(array)中，查找变量x出现的位置。如果没有找到，就返回 -1。这段代码的时间复杂度就是 O(n)，其中，n代表数组的长度。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然而，我们在数组中查找一个数据时，并不需要每次都把整个数据都遍历一遍，因为有可能中途找到提前结束循环了。因此，改写后的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// n 表示数组 array 的长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> n, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> pos = -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (array[i] == x) &#123;</span><br><span class="line">       pos = i;</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> pos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这段优化后的代码，时间复杂度还是O(n)吗？很显然，暂时还解决不了这个问题。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因为要查找的变量 x 可能出现在数组的任意位置。如果数组中第一个元素正好是要查找的变量 x，那就不需要遍历剩下的 n-1 个数据了，那时间复杂度就是 O(1)，但如果数组中不存在变量 x , 那就需要把整个数组都遍历一遍，时间复杂度就成了 O(n)，所以，不同情况下，这段代码的时间复杂度是不一样的。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为了表示代码在不同情况下的不同时间复杂度，需要3种概念：最好情况时间复杂度、最坏情况时间复杂度、平局情况时间复杂度。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>最好情况时间复杂度：最理想的情况下，执行这段代码的时间复杂度。</strong>如：在最理想的情况下，要查找的变量 x 正好是数组的第一个元素，这种情况下的时间复杂度即是最好情况时间复杂度。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;同理，<strong>最坏情况时间复杂度，在最糟糕的情况下，执行这段代码的时间复杂度。</strong>如：在数组中没有要查找的变量 x , 需要把整个数组都遍历一遍才行，这种情况下的时间复杂度即是最坏情况时间复杂度。</p><h2 id="1-2-平均情况时间复杂度"><a href="#1-2-平均情况时间复杂度" class="headerlink" title="1.2 平均情况时间复杂度"></a>1.2 平均情况时间复杂度</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最好情况时间复杂度和最坏请款时间复杂度对应的都是极端情况下的代码复杂度，发生的概率其实并不大为了更好地表示平均情况下的复杂度，需要引入一个新的概念：<strong>平均情况时间复杂度</strong>，即平均时间复杂度。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;依然是上述代码，要查找变量 x 在数组中的位置，有 n+1 种情况：<strong>在数组的 0~n-1 位置中</strong> 和 <strong>不在数组中</strong>。把每种情况下，查找需要遍历的元素个数累加起来，再除以 n+1，就可以得到需要遍历的元素个数的平均值，即（等数列求和公式）：<br><img src="/2019/08/12/%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90-%E4%B8%8B%E9%83%A8/d889a358b8eccc5bbb90fc16e327a22f.jpg" alt><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在 大O 标记法中，可以省略掉系数、低阶、常量，所以，简化后的平均时间复杂度就是O(n)。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个结论是正确的，但是计算过程稍稍有点问题，因为有 n+1 种情况，出现的概率并不是一样的。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;要查找的变量 x, 要么在数组里，要不不在数组里。这两种情况对应的概率统计起来很麻烦，为了方便理解，假设在数组中与不在数组中的概率都为 1/2。另外，要查找的数据出现在 0<del>n-1 这 n 个位置的概率是一样的，为 1/n，所以，根据概率乘法法则，要查找的数组出现在 0</del> n-1 中任意位置的概率就是 1/(2n)。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因此，<font color="red">前面推导的存在的最大问题就是，没有讲各种情况发生的概率考虑进去。如果我们把每种情况发生的概率考虑进去，那么平均时间复杂度的计算过程就变成饿了这样：</font><br><img src="/2019/08/12/%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90-%E4%B8%8B%E9%83%A8/36c0aabdac69032f8a43368f5e90c67f.jpg" alt><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个值就是概率论中的<strong>加权平均值</strong>，即<strong>期望值</strong>，所以平均时间复杂度的全称就是<strong>加权平均时间复杂度</strong>或者<strong>期望时间复杂度</strong>。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;引入概率之后，上述代码的加权平均值为(3n+1)/4。用 大O 表示法表示，去掉系数和常量，这段代码的加权平均时间复杂仍然是 O(n)。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;很多时候，并不需要区分最好、最坏、平均时间复杂度三种情况。很多时候，只用一种复杂度就可以满足需求。<strong>只有同一块代码在不同的情况下，时间复杂度有量级的差距，才会使用这三种复杂度表示法来区分。</strong></p><h2 id="1-3-均摊时间复杂度"><a href="#1-3-均摊时间复杂度" class="headerlink" title="1.3 均摊时间复杂度"></a>1.3 均摊时间复杂度</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>均摊时间复杂度</strong>，一种更加高级的概念，它对应的分析方法，<strong>摊还分析(平摊分析)</strong> 。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;均摊时间复杂度，听起来与平均时间复杂度有点像。长容易混淆，大部分情况下，并不需要区分最好、最坏、平均时间复杂度。平均复杂度只有在某些特殊情况下才会用到，而均摊时间复杂度应用的场景比它更加特殊、更加有限。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// array 表示一个长度为 n 的数组</span></span><br><span class="line"><span class="comment">// 代码中的 array.length 就等于 n</span></span><br><span class="line"><span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (count == array.length) &#123;</span><br><span class="line">      <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; ++i) &#123;</span><br><span class="line">         sum = sum + array[i];</span><br><span class="line">      &#125;</span><br><span class="line">      array[<span class="number">0</span>] = sum;</span><br><span class="line">      count = <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   array[count] = val;</span><br><span class="line">   ++count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 上述代码实现了一个往数组中插入数据的功能。当数组满了之后，也就是代码中的 count == array.length 时，用for循环遍历数组求和，并清空数组，将求和之后的 sum 值放到数组的第一个位置，然后再讲新的数据插入。但如果数组一开始就有空闲空间，则直接将数据插入数组。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 最理想的情况下，数组中有空闲空间，只需要将数据插入到数组下表为 count 的为位置就可以了，所以最好情况时间复杂度为 O(1)。最坏的情况，数组中没有空闲空间了，需要先做一次数组的遍历求和，然后再将数据插入，所以最坏情况时间复杂度为 O(n)。</p><hr><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;平均时间复杂度呢？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;假定数组的长度是 n,根据数据插入的位置的不同，就可以分为 n 种情况，每种情况的时间复杂度都是 O(1),除此之外，还有一种“额外“的情况，就是数组在没有空闲空间时插入一个数据，这个时候的时间复杂度是 O(n)。而且，这 n+1 种情况发生的概率是一样的，即 1/(n+1)。所以，根据加权平均计算方法，求得的平均情况时间复杂度：<br><img src="/2019/08/12/%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90-%E4%B8%8B%E9%83%A8/6df62366a60336d9de3bc34f488d8bed.jpg" alt><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个例子的平均时间复杂度其实并不需要这么复杂，并不需要引入概率论的知识。由对比得知，insert() 的例子和 上面的那个 find() 的列子，会发现二者有很大的差别。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先，find() 函数在极端情况下，时间复杂度采薇 O(1)。但是 insert() 在大部分情况下，时间复杂度都为 O(1)。只有个别情况下，复杂度才比较高，为 O(n)。这是 insert() <strong>第一个</strong>区别于find() 的地方。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>第二个</strong>，对于 insert() 函数来说，O(1) 时间复杂度的插入和 O(n) 时间复杂度的插入，出现的频率是非常有规律的，而且有一定的前后时序关系，一般都是一个 O(n) 插入之后，后面紧跟着 n-1 个 O(1) 的插入操作，循环往复。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;针对这种特殊场景的复杂度分析，并不需要像之前将平均时间复杂度分析方法那样，找出所有的输入情况以及相应的发生概率，然后在计算加权平均值。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由此，引入了一种更加简单的分析方法：<strong>摊还分析法</strong>，通过摊还分析得到的时间复杂度：<strong>均摊时间复杂度</strong>。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如何用摊还分析发来分析算法的均摊时间复杂度呢？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;继续啊观看数组插入数的这个例子，每一次 O(n) 的插入操作，都会跟着 n-1 次 O(1) 的插入操作，所以把耗时多的<strong>那次操作</strong>均摊到接下来的 n-1 次耗时少的操作上，均摊下来，这一组连续的操作的均摊时间复杂度就是 O(1)。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;均摊时间复杂度和摊还分析应用场景比较特殊，所以并不会经常用到，为了方便理解，简单总结他们的应用场景。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">对一个数据结构进行一组连续操作中，大部分情况下的时间复杂度都很低，只有个别情况下时间复杂度比较高，而且这些操作之间存在前后连贯的时序关系，这个时候，就可以将一组操作放在一块儿分析，看是否能将较高时间复杂度那次操作的耗时，平摊到其他那些时间复杂度比较低的操作上。而且，<strong>在能够应用均摊时间复杂度分析的场合，一般均摊时间复杂度就等于最好时间复杂度</strong>。</font></p><h1 id="2-总结"><a href="#2-总结" class="headerlink" title="2 总结"></a>2 总结</h1><p>一、复杂度分析的4个概念<br>1.最坏情况时间复杂度：代码在最理想情况下执行的时间复杂度。<br>2.最好情况时间复杂度：代码在最坏情况下执行的时间复杂度。<br>3.平均时间复杂度：用代码在所有情况下执行的次数的加权平均值表示。<br>4.均摊时间复杂度：在代码执行的所有复杂度情况中绝大部分是低级别的复杂度，个别情况是高级别复杂度且发生具有时序关系时，可以将个别高级别复杂度均摊到低级别复杂度上。基本上均摊结果就等于低级别复杂度。</p><p>二、为什么要引入这4个概念？<br>1.同一段代码在不同情况下时间复杂度会出现量级差异，为了更全面，更准确的描述代码的时间复杂度，所以引入这4个概念。<br>2.代码复杂度在不同情况下出现量级差别时才需要区别这四种复杂度。大多数情况下，是不需要区别分析它们的。</p><p>三、如何分析平均、均摊时间复杂度？<br>1.平均时间复杂度<br>代码在不同情况下复杂度出现量级差别，则用代码所有可能情况下执行次数的加权平均值表示。<br>2.均摊时间复杂度<br>两个条件满足时使用：1）代码在绝大多数情况下是低级别复杂度，只有极少数情况是高级别复杂度；2）低级别和高级别复杂度出现具有时序规律。均摊结果一般都等于低级别复杂度。</p><hr><h1 id="3-试试分析下面-add-函数"><a href="#3-试试分析下面-add-函数" class="headerlink" title="3 试试分析下面 add()函数"></a>3 试试分析下面 add()函数</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局变量，大小为 10 的数组 array，长度 len，下标 i。</span></span><br><span class="line"><span class="keyword">int</span> array[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>]; </span><br><span class="line"><span class="keyword">int</span> len = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 往数组中添加一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> element)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (i &gt;= len) &#123; <span class="comment">// 数组空间不够了</span></span><br><span class="line">     <span class="comment">// 重新申请一个 2 倍大小的数组空间</span></span><br><span class="line">     <span class="keyword">int</span> new_array[] = <span class="keyword">new</span> <span class="keyword">int</span>[len*<span class="number">2</span>];</span><br><span class="line">     <span class="comment">// 把原来 array 数组中的数据依次 copy 到 new_array</span></span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; ++j) &#123;</span><br><span class="line">       new_array[j] = array[j];</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// new_array 复制给 array，array 现在大小就是 2 倍 len 了</span></span><br><span class="line">     array = new_array;</span><br><span class="line">     len = <span class="number">2</span> * len;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 将 element 放到下标为 i 的位置，下标 i 加一</span></span><br><span class="line">   array[i] = element;</span><br><span class="line">   ++i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1. 最好情况时间复杂度为 O(1)<br>2.最坏情况分析：<br>最坏情况代码执行的次数跟每次数组的长度有关<br>第1次调用insert的执行的次数为 n ,<br>第2次调用insert的执行的次数为 2n ,<br>第3次调用insert的执行的次数为 2^2 * n<br>第k次调用insert的执行的次数为 2^(k-1) * n<br>最坏时间复杂度为 O(n)。<br>3. 平均情况分析<br>当每次遇到最坏情况时数组会进行2倍扩容，原数组被导入新数组，虽然数组的长度变大了，但是插入操作落在的区间的长度是一样的，分别是0<del>len-1, len</del>(2len-1),….；<br>插入的情况仍是len+1种：0~len-1和插满之后的O(len)；所以每次插入的概率是：p= 1/len+1，<br>最后求出加权平均时间复杂度为 1<em>p + 2</em>p+ ▪▪▪ + len*p + len * p = O(1) ;<br>4. 均摊时间复杂度 O(1)<br>而均摊复杂度由于每次O(len)的出现都跟着len次O(1)，是前后连贯的，因而将O(len)平摊到前len次上，得出平摊复杂度是O(1)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Author: haoransun&lt;br&gt;Wechat: SHR—97&lt;br&gt;&lt;font color=&quot;red&quot;&gt;学习来源：极客时间-算法之美，本人购买课程后依据图文讲解汇总成个人见解。&lt;/font&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-浅析最好、最坏、平均、均摊时间复杂度&quot;&gt;&lt;a href=&quot;#1-浅析最好、最坏、平均、均摊时间复杂度&quot; class=&quot;headerlink&quot; title=&quot;1 浅析最好、最坏、平均、均摊时间复杂度&quot;&gt;&lt;/a&gt;1 浅析最好、最坏、平均、均摊时间复杂度&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;font color=&quot;red&quot;&gt;最好情况时间法则度&lt;/font&gt;(best case time complexity)&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;font color=&quot;red&quot;&gt;最坏情况时间复杂度&lt;/font&gt;(worst case time complexity)&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;font color=&quot;red&quot;&gt;平均情况时间复杂度&lt;/font&gt;(average case time complexity)&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;font color=&quot;red&quot;&gt;均摊时间复杂度&lt;/font&gt;(amortized time complexity)&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://JavaSsun.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://JavaSsun.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>复杂度分析-上部</title>
    <link href="http://javassun.github.io/2019/08/10/%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90-%E4%B8%8A%E9%83%A8/"/>
    <id>http://javassun.github.io/2019/08/10/%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90-%E4%B8%8A%E9%83%A8/</id>
    <published>2019-08-10T13:00:30.000Z</published>
    <updated>2020-04-16T06:26:00.560Z</updated>
    
    <content type="html"><![CDATA[<p>Author: haoransun<br>Wechat: SHR—97<br><font color="red">学习来源：极客时间-算法之美，本人购买课程后依据图文讲解汇总成个人见解。</font></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;众所周知，数据结构与算法本身解决的是“快”和“省”的问题，即如何让代码运行得更快，如何让代码更省存储空间。所以，<font color="red">执行效率</font>是算法一个非常重要的考量指标。</p><h2 id="1-为什么需要复杂度分析？"><a href="#1-为什么需要复杂度分析？" class="headerlink" title="1 为什么需要复杂度分析？"></a>1 为什么需要复杂度分析？</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我将代码跑一遍，通过统计、监控，就能得到算法执行时间个占用的内存大小。为什么要使用空间、时间复杂度分析呢？难道比我实实在在跑一遍得到的数据还要准确吗？</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上述评估算法执行效率的方法是正确的。大部分人称它为<strong>事后统计法</strong>，但它有非常大的局限性。</p><a id="more"></a><h3 id="1-1-测试结果非常依赖测试环境"><a href="#1-1-测试结果非常依赖测试环境" class="headerlink" title="1.1 测试结果非常依赖测试环境"></a>1.1 测试结果非常依赖测试环境</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;测试环境中硬件的不同会对测试结果有很大的影响。比如，用同样一段代码，用I9处理器与I3处理器，效率自然不同。</p><h3 id="1-2-测试结果受数据规模的影响很大"><a href="#1-2-测试结果受数据规模的影响很大" class="headerlink" title="1.2 测试结果受数据规模的影响很大"></a>1.2 测试结果受数据规模的影响很大</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对同一个排序算法，待排序数据的有序度不一样，排序的执行时间会有很大的差别。极端情况下，如果数据已经有序，排序算法不需要做任何操作，执行时间非常短。除此之外，如果测试数据规模小，测试结果可能无法真实的反应算法的性能。如：对于小规模的数据排序，插入排序可能反倒会比快速排序要快！<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>我们需要一个不用具体的测试数据来测试，就可以粗略地估计算法的执行效率的方法</strong>–<font color="red">时间、空间复杂度分析方法</font>。</p><h2 id="2-大-O-复杂度表示法"><a href="#2-大-O-复杂度表示法" class="headerlink" title="2 大 O 复杂度表示法"></a>2 大 O 复杂度表示法</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;算法的执行效率，粗略的说，就是算法代码的执行时间。但是，如何在不运行代码的情况下，用 “肉眼” 得到一段代码的执行时间呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> sum = <span class="number">0</span></span><br><span class="line">   <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">for</span>(;i&lt;=n;++i)&#123;</span><br><span class="line">      sum = sum+i;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从CPU的角度来看，这段代码的每一行都执行着类似的操作：<strong>读数据-运算-写数据</strong>。尽管每行对应的CPU执行的个数、执行的时间都不一样，但是，只是粗略的估计，所以可以假设每行代码的执行时间都一样，为<font color="red"> unit_time</font>。在这个假设的基础上，这段代码的总执行时间是多少呢？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="blue">第2、3行代码分别需要1个unit_time的执行时间，第4、5行代码都运行了n遍，所以需要2n &#42; unit_time的执行时间，所以这段代码总的执行时间就是 (2n+2) &#42;   unit_time</font>。因此， <strong>所有代码的执行时间T(n)与每行代码的执行次数成正比</strong>。</p><hr><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;按照这个思路，再次分析如下代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt;= n; ++i) &#123;</span><br><span class="line">    j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; j &lt;= n; ++j) &#123;</span><br><span class="line">      sum = sum +  i * j;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;依旧假设每个语句的执行时间是 unit_time ，那么这段代码的总执行时间T(n)是多少呢？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="blue">第2、3、4行代码，每行代码都需要1个 unit_time的执行时间，第5、6行代码循环执行了n遍，需要2n &#42; unit_time的执行时间，第7、8行代码循环执行了n<sup>2</sup>遍，所以需要2n<sup>2</sup> &#42; unit_time的执行时间。</font><font color="red">所以，整段代码的执行时间T(n)与每行代码的执行次数n成正比</font>。</p><h2 id="3-大-O-登场"><a href="#3-大-O-登场" class="headerlink" title="3 大 O 登场"></a>3 大 O 登场</h2><p><img src="/2019/08/10/%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90-%E4%B8%8A%E9%83%A8/22900968aa2b190072c985a08b0e92ef.png" alt><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T(n)已经解释过，表示代码的执行时间；n表示数据规模的大小；f(n)表示每行代码执行的次数总和。因为它是一个公式。所以用f(n)来表示。公式中的 O ，表示代码的执行时间T(n) 与 f(n) 表达式成正比。<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;所以，第一个例子中的T(n)=O(2n+2)，第二个例子中的T(n)=O(2n<sup>2</sup>+2n+3)。这就是<strong>大 O 时间复杂度表示法</strong>。大 O 时间复杂度实际上并不具体表示代码真正的执行时间，而是表示<strong>代码执行时间随数据规模增长的变化趋势</strong>，因此，也称之为<strong>渐进时间复杂度</strong>(asymptotic time complexity),即<strong>时间复杂度</strong>。<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当 n 很大时，可以把它想象成10000,10000000。而公式中的<font color="red">低阶、常量、系数</font>三部分并不左右增长趋势，所以可以忽略。因此，只需要记录一个最大量级就可以了，如果用大 O 表示法表示上述两段代码的时间复杂度，既可以记为：T(n)=O(n); T(n)=O(n<sup>2</sup>)</p><h2 id="4-时间复杂度分析"><a href="#4-时间复杂度分析" class="headerlink" title="4 时间复杂度分析"></a>4 时间复杂度分析</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前面介绍了大 O 时间复杂度的由来和表示方法。现在看看如何分析一段代码的时间复杂度？</p><h3 id="4-1-只关注循环执行次数最多的一段代码"><a href="#4-1-只关注循环执行次数最多的一段代码" class="headerlink" title="4.1 只关注循环执行次数最多的一段代码"></a>4.1 只关注循环执行次数最多的一段代码</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;大 O 这种复杂度表示方法只是表示一种变化趋势。通常会忽略掉工事中的常量、低阶、系数，只需要记录一个最大阶的量级就可以了，所以，<strong>在分析一个算法，一段代码的时间复杂度的时候，只关注循环执行次数最多的那一段代码就可以了。</strong>这段核心代码执行次数的n的量级，就是整段要分析代码的时间复杂度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> sum = <span class="number">0</span></span><br><span class="line">   <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">for</span>(;i&lt;=n;++i)&#123;</span><br><span class="line">      sum = sum+i;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其中第2、3行代码都是常量级的执行时间，与n的大小无关，所以对于复杂度没有影响。循环执行次数最多的是第4、5行代码，所以这块代码要重点分析，这两行代码被执行了n次，所以总的时间复杂度就是O(n)。</p><h3 id="4-2-加法法则：总复杂度等于量级最大的那段代码的复杂度"><a href="#4-2-加法法则：总复杂度等于量级最大的那段代码的复杂度" class="headerlink" title="4.2 加法法则：总复杂度等于量级最大的那段代码的复杂度"></a>4.2 加法法则：总复杂度等于量级最大的那段代码的复杂度</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> sum_1 = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">int</span> p = <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">for</span> (; p &lt; <span class="number">100</span>; ++p) &#123;</span><br><span class="line">     sum_1 = sum_1 + p;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">int</span> sum_2 = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">int</span> q = <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">for</span> (; q &lt; n; ++q) &#123;</span><br><span class="line">     sum_2 = sum_2 + q;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">int</span> sum_3 = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">for</span> (; i &lt;= n; ++i) &#123;</span><br><span class="line">     j = <span class="number">1</span>; </span><br><span class="line">     <span class="keyword">for</span> (; j &lt;= n; ++j) &#123;</span><br><span class="line">       sum_3 = sum_3 +  i * j;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> sum_1 + sum_2 + sum_3;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个代码分为3个部分分别是求sum_1、sum_2、sum_3。分析每一部分的时间复杂度，然后把它们放到一块儿，再取一个量级最大的作为整段代码的复杂度。<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第一段代码的时间复杂度是多少呢？这段代码循环执行了100次，所以是一个常量的执行时间，跟n的规模无关。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">这里强调一下，即便这段代码循环了10000次，1亿次，只要是一个已知的数，跟n无关。照样是常量级的执行时间。当n无限大的时候，就可以忽略。尽管对代码的执行时间会有很大影响，但是回到时间复杂度的概念来说，它表示的是一个算法执行效率与数据规模增长的变化趋势，所以不管常量的执行时间多大，我们都可以忽略掉，因为它本身对增长趋势并没有影响。</font><br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第二段代码和第三段代码的时间复杂度是多少呢？答案是O(n) 和 O(n<sup>2</sup>)</p><hr><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;综合这三段代码的时间复杂度，取其中最大的量级，所以，整段代码的时间复杂度就为O(n<sup>2</sup>)。也就是说：<strong>总的时间复杂度就是等于量级最大的那段代码的时间复杂度</strong>。那可以讲规律抽象为公式：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果T1(n)=O(f(n))，T2(n)=O(g(n))；那么 T(n)=T1(n)+T2(n)=max(O(f(n)),O(g(n)))=O(max(f(n),g(n)))。</p><h3 id="4-3-乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积"><a href="#4-3-乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积" class="headerlink" title="4.3 乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积"></a>4.3 乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;类比加法法则，乘法法则公式：T1(n)=O(f(n))，T2(n)=O(g(n));那么 T(n)=T1(n) &#42; T2(n)=O(f(n)) &#42; O(g(n))=O(f(n) &#42; g(n))。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;假设T1(n)=O(n)，T2(n)=O(n<sup>2</sup>)，则T1(n) &#42; T2(n) = O(n<sup>3</sup>)。落实到具体的代码中：可以把乘法法则看成是<strong>嵌套循环</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> ret = <span class="number">0</span>; </span><br><span class="line">   <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">for</span> (; i &lt; n; ++i) &#123;</span><br><span class="line">     ret = ret + f(i);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt; n; ++i) &#123;</span><br><span class="line">    sum = sum + i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;单独看cal()函数，假设f()只是一个普通的操作，那第4~6行的时间复杂度就是，T1(n) = O(n),但是f()函数本身不是一个简单的操作，它的时间复杂度是T2(n) = O(n)，所以整个cal()函数的时间复杂度就是：T(n) = T1(n) &#42; T2(n) = O(n &#42; n) = O(n<sup>2</sup>)</p><h2 id="5-几种常见时间复杂度实例分析"><a href="#5-几种常见时间复杂度实例分析" class="headerlink" title="5 几种常见时间复杂度实例分析"></a>5 几种常见时间复杂度实例分析</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;虽然代码千差万别，但是常见的复杂度量级并不多，以下几乎涵盖了所有一般代码的复杂度量级。<br><img src="/2019/08/10/%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90-%E4%B8%8A%E9%83%A8/3723793cc5c810e9d5b06bc95325bf0a.jpg" alt></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上述可粗略的分为两类：<strong>多项式量级</strong> 和 <strong>非多项式量级</strong>。其中，非多项式量级只有两个：O(2<sup>n</sup>) 和 O(n!)</p><hr><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当数据规模n越来越大时，非多项式量级算法的执行时间会急剧增加，求解问题的执行时间会无限增长。所以，非多项式时间复杂度的算法其实是非常低效的算法。因此，关于 NP 时间复杂度需要再次学习。</p><h3 id="5-1-O-1"><a href="#5-1-O-1" class="headerlink" title="5.1 O(1)"></a>5.1 O(1)</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先必须知道，O(1)只是常量级时间复杂度的一种表示方法，并不是指只执行了一行代码，比如下面这段代码的时间复杂度就是 O(1)，而不是O(3)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">int</span> sum = i + j;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;只要代码的执行时间不随 n 的增大而增长，这样代码的时间复杂度都记作 O(1)，或者：<strong>一般情况下，只要算法中不存在循环、递归，即使有成千上万行的代码，其时间复杂度也是 O(1)</strong></p><h3 id="5-2-O-logn-、O-nlogn"><a href="#5-2-O-logn-、O-nlogn" class="headerlink" title="5.2 O(logn)、O(nlogn)"></a>5.2 O(logn)、O(nlogn)</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对数阶时间复杂度非常常见，同时也是最难分析的一种时间复杂度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= n)  &#123;</span><br><span class="line">  i = i * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第3行代码是循环执行次数最多的。所以，只要能计算出这行代码执行了多少次，就知道整段代码的时间复杂度。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从代码中可以看出，变量i的值从1开始取，每循环一次就乘以2.当大于n时，循环结束。这就是一个等比数列。如下所示：<br><img src="/2019/08/10/%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90-%E4%B8%8A%E9%83%A8/9b1c88264e7a1a20b5954be9bc4bec9a_20_281_29.jpg" alt><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2<sup>x</sup>=n 求解这个x这个问题。x=log<sub>2</sub>n。所以这段代码的时间复杂度是O(log<sub>2</sub>n)。<br>下面呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= n)  &#123;</span><br><span class="line">  i = i * <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;时间复杂度：O(log<sub>3</sub>n)</p><hr><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;实际上，不管是以2位底、还是以3为底，还是以10位底，可以把所有对数阶的时间复杂度都记为O(logn)。为什么呢？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因为对数可以互相转换的。<br>log<sub>3</sub>n = log<sub>3</sub>2 &#42; log<sub>2</sub>n，所以O(log<sub>3</sub>n) = O(C &#42; log<sub>2</sub>n)，其中 C = log<sub>3</sub>2 是一个常量。基于前面的一个理论：采用** 大O标记复杂度的时候，可以忽略系数，即 O(Cf(n)) = O(f(n))** 。 因此，O(log<sub>2</sub>n) 等于 log<sub>3</sub>n，所以在对数阶时间复杂度的表示方法里，忽略对数的“底”，统一标示为O（logn）。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如此说来，O(nlogn)不难理解，就乘法法则而言，如果一段代码的时间复杂度是O(logn)，循环执行了n遍，其时间复杂度就是O(nlogn)。而且，O(nlogn)是一种非常常见的算法时间复杂度。如：归并排序、快速排序的时间复杂度都是O(nlogn)。</p><h3 id="5-3-O-m-n-、O-m-42-n"><a href="#5-3-O-m-n-、O-m-42-n" class="headerlink" title="5.3 O(m+n)、O(m &#42; n)"></a>5.3 O(m+n)、O(m &#42; n)</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果代码的复杂度由<strong>两个数据的规模</strong>来决定的呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> sum_1 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt; m; ++i) &#123;</span><br><span class="line">    sum_1 = sum_1 + i;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> sum_2 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (; j &lt; n; ++j) &#123;</span><br><span class="line">    sum_2 = sum_2 + j;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sum_1 + sum_2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由代码看出，m和n表示两个数据规模。无法事先评估m和n谁的量极大，所以在表示复杂度的时候，就不能简单的利用加法法则，省略掉一种一个。因此上面代码的时间复杂度就是O(m+n)。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;针对这种情况，原来的加法法则就不在正确，需要将加法法则改写：T1(m)+T2(n) = O(f(m) + g(n))。但是乘法法则依然有效：T1(m)&#42;T2(n) = O(f(m) &#42; f(n))。</p><h2 id="6-空间复杂度分析"><a href="#6-空间复杂度分析" class="headerlink" title="6 空间复杂度分析"></a>6 空间复杂度分析</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由上面得知，时间复杂度的全称是<strong>渐进时间复杂度，表示算法的执行时间与数据规模之间的增长关系。</strong>类比可知，空间复杂度全称就是<strong>渐进空间复杂度</strong>(asymptotic space complexity)，<strong>表示算法的存储空间与数据规模之间的增长关系</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">  <span class="keyword">for</span> (i; i &lt;n; ++i) &#123;</span><br><span class="line">    a[i] = i * i;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = n-<span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">    print out a[i]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;仿照时间复杂度，可以得知，第2行代码中，申请了一个空间存储变量 i , 但是它是常量阶，跟数据规模 n 没有关系，所以可以忽略。第 3 行申请了一个大小为n的int类型数组，除此之外剩下的代码都没有占用更多的空间，所以，整段代码的空间复杂度就是O(n)。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;常见的空间复杂度是：O(1)，O(n),O(n<sup>2</sup>)，如O(logn)、O(nlogn)这样的对数阶复杂度平时很难用到。</p><h2 id="7-小结"><a href="#7-小结" class="headerlink" title="7 小结"></a>7 小结</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;复杂度也称为渐进复杂度，包括时间复杂度和空间复杂度，用来分析算法执行效率与数据规模之间的增长关系，可以粗略的表示，越高阶复杂度的算法，执行效率越低。常见的复杂度并不多，由低阶到高阶有：O(1)、O(logn)、O(n)、O(nlogn)、O(n<sup>2</sup>)。<br><img src="/2019/08/10/%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90-%E4%B8%8A%E9%83%A8/497a3f120b7debee07dc0d03984faf04.jpg" alt></p><hr><h2 id="8-理解"><a href="#8-理解" class="headerlink" title="8 理解"></a>8 理解</h2><p>一、什么是复杂度分析？<br>1.数据结构和算法解决是“如何让计算机更快时间、更省空间的解决问题”。<br>2.因此需从执行时间和占用空间两个维度来评估数据结构和算法的性能。<br>3.分别用时间复杂度和空间复杂度两个概念来描述性能问题，二者统称为复杂度。<br>4.复杂度描述的是算法执行时间（或占用空间）与数据规模的增长关系。<br>二、为什么要进行复杂度分析？<br>1.和性能测试相比，复杂度分析有不依赖执行环境、成本低、效率高、易操作、指导性强的特点。<br>2.掌握复杂度分析，将能编写出性能更优的代码，有利于降低系统开发和维护成本。<br>三、如何进行复杂度分析？<br>1.大O表示法<br>1）来源<br>算法的执行时间与每行代码的执行次数成正比，用T(n) = O(f(n))表示，其中T(n)表示算法执行总时间，f(n)表示每行代码执行总次数，而n往往表示数据的规模。<br>2）特点<br>以时间复杂度为例，由于时间复杂度描述的是算法执行时间与数据规模的增长变化趋势，所以常量阶、低阶以及系数实际上对这种增长趋势不产决定性影响，所以在做时间复杂度分析时忽略这些项。<br>2.复杂度分析法则<br>1）单段代码看高频：比如循环。<br>2）多段代码取最大：比如一段代码中有单循环和多重循环，那么取多重循环的复杂度。<br>3）嵌套代码求乘积：比如递归、多重循环等<br>4）多个规模求加法：比如方法有两个参数控制两个循环的次数，那么这时就取二者复杂度相加。<br>四、常用的复杂度级别？<br>多项式阶：随着数据规模的增长，算法的执行时间和空间占用，按照多项式的比例增长。包括，<br>O(1)（常数阶）、O(logn)（对数阶）、O(n)（线性阶）、O(nlogn)（线性对数阶）、O(n^2)（平方阶）、O(n^3)（立方阶）<br>非多项式阶：随着数据规模的增长，算法的执行时间和空间占用暴增，这类算法性能极差。包括，<br>O(2^n)（指数阶）、O(n!)（阶乘阶）<br>五、如何掌握好复杂度分析方法？<br>复杂度分析关键在于多练，所谓孰能生巧</p><hr><h3 id="项目之前都进行性能测试，再做一次复杂度分析，多此一举吗？"><a href="#项目之前都进行性能测试，再做一次复杂度分析，多此一举吗？" class="headerlink" title="项目之前都进行性能测试，再做一次复杂度分析，多此一举吗？"></a>项目之前都进行性能测试，再做一次复杂度分析，多此一举吗？</h3><p>我不认为是多此一举，渐进时间，空间复杂度分析为我们提供了一个很好的理论分析的方向，并且它是宿主平台无关的，能够让我们对我们的程序或算法有一个大致的认识，让我们知道，比如在最坏的情况下程序的执行效率如何，同时也为我们交流提供了一个不错的桥梁，我们可以说，算法1的时间复杂度是O(n)，算法2的时间复杂度是O(logN)，这样我们立刻就对不同的算法有了一个“效率”上的感性认识。</p><p>当然，渐进式时间，空间复杂度分析只是一个理论模型，只能提供给粗略的估计分析，我们不能直接断定就觉得O(logN)的算法一定优于O(n), 针对不同的宿主环境，不同的数据集，不同的数据量的大小，在实际应用上面可能真正的性能会不同，个人觉得，针对不同的实际情况，进而进行一定的性能基准测试是很有必要的，比如在统一一批手机上(同样的硬件，系统等等)进行横向基准测试，进而选择适合特定应用场景下的最有算法。</p><p>综上所述，渐进式时间，空间复杂度分析与性能基准测试并不冲突，而是相辅相成的，但是一个低阶的时间复杂度程序有极大的可能性会优于一个高阶的时间复杂度程序，所以在实际编程中，时刻关心理论时间，空间度模型是有助于产出效率高的程序的，同时，因为渐进式时间，空间复杂度分析只是提供一个粗略的分析模型，因此也不会浪费太多时间，重点在于在编程时，要具有这种复杂度分析的思维。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Author: haoransun&lt;br&gt;Wechat: SHR—97&lt;br&gt;&lt;font color=&quot;red&quot;&gt;学习来源：极客时间-算法之美，本人购买课程后依据图文讲解汇总成个人见解。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;众所周知，数据结构与算法本身解决的是“快”和“省”的问题，即如何让代码运行得更快，如何让代码更省存储空间。所以，&lt;font color=&quot;red&quot;&gt;执行效率&lt;/font&gt;是算法一个非常重要的考量指标。&lt;/p&gt;
&lt;h2 id=&quot;1-为什么需要复杂度分析？&quot;&gt;&lt;a href=&quot;#1-为什么需要复杂度分析？&quot; class=&quot;headerlink&quot; title=&quot;1 为什么需要复杂度分析？&quot;&gt;&lt;/a&gt;1 为什么需要复杂度分析？&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;我将代码跑一遍，通过统计、监控，就能得到算法执行时间个占用的内存大小。为什么要使用空间、时间复杂度分析呢？难道比我实实在在跑一遍得到的数据还要准确吗？&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;上述评估算法执行效率的方法是正确的。大部分人称它为&lt;strong&gt;事后统计法&lt;/strong&gt;，但它有非常大的局限性。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://JavaSsun.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://JavaSsun.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法概览</title>
    <link href="http://javassun.github.io/2019/08/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E6%A6%82%E8%A7%88/"/>
    <id>http://javassun.github.io/2019/08/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E6%A6%82%E8%A7%88/</id>
    <published>2019-08-08T12:00:30.000Z</published>
    <updated>2020-04-16T06:24:12.485Z</updated>
    
    <content type="html"><![CDATA[<p>Author: haoransun<br>Wechat: SHR—97<br><font color="red">学习来源：极客时间-算法之美，本人购买课程后依据图文讲解汇总成个人见解。</font></p><h1 id="1-定义"><a href="#1-定义" class="headerlink" title="1 定义"></a>1 定义</h1><p>&nbsp;&nbsp;&nbsp;广义上：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>数据结构</strong>：<font color="red">一组数据的存储结构</font>。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>算法</strong>：<font color="red">操作数据的一组方法</font>。<br>&nbsp;&nbsp;&nbsp;狭义上：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;某些<font color="red">著名</font>的数据结构与算法,如队列、栈、堆、二分查找、动态规划等等。</p><h1 id="2-二者关系"><a href="#2-二者关系" class="headerlink" title="2 二者关系"></a>2 二者关系</h1><p>&nbsp;&nbsp;&nbsp;数据结构与算法相辅相成。<font color="red">数据结构是为算法服务的，算法要作用在特定的数据结构之上</font>。因此，孤立而单独的讲解两者毫无意义。<br>&nbsp;&nbsp;&nbsp;比如，因为数组具有随机访问的特点，常用的二分查找算法需要用数组来存储数据。但是我们选择链表这种数据结构，二分查找就无法工作了，因为链表不支持随机访问。<br>&nbsp;&nbsp;&nbsp;数据结构是<font color="red">静态</font>的，它只是组织数据的一种方式。如果不在它的基础上操作、构建算法，孤立存在的数据结构是没有用的。</p><a id="more"></a><h1 id="3-复杂度分析"><a href="#3-复杂度分析" class="headerlink" title="3 复杂度分析"></a>3 复杂度分析</h1><p>&nbsp;&nbsp;&nbsp;<font color="red">复杂度分析</font>占据了数据结构与算法的半壁江山，是数据结构与算法的精髓。<br>&nbsp;&nbsp;&nbsp;数据结构与算法解决的是如何更省、更快的存储和处理数据的问题，因此，需要考量效率和资源消耗的方法，这就是复杂度分析方法。所以，只掌握了数据结构与算法的特点、用法，没有学会复杂度分析，相当于只知口诀，而无心法，只有把心法了然于胸，才能做到无招胜有招！</p><h1 id="4-学习图"><a href="#4-学习图" class="headerlink" title="4 学习图"></a>4 学习图</h1><p><img src="/2019/08/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E6%A6%82%E8%A7%88/913e0ababe43a2d57267df5c5f0832a7.jpg" alt></p><h1 id="5-20个基础"><a href="#5-20个基础" class="headerlink" title="5 20个基础"></a>5 20个基础</h1><p>&nbsp;&nbsp;&nbsp;<font color="blue">10个数据结构</font>：<br>&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">数组、链表、栈、队列、散列表、二叉树、堆、跳表、图、Trie树</font><br>&nbsp;&nbsp;&nbsp;<font color="blue">10个算法</font>：<br>&nbsp;&nbsp;&nbsp;&nbsp;<font color="red">递归、排序、二分查找、搜索、哈希算法、贪心算法、分治算法、回溯算法、动态规划、字符串匹配算法</font></p><h1 id="6-策略"><a href="#6-策略" class="headerlink" title="6 策略"></a>6 策略</h1><p>&nbsp;&nbsp;&nbsp;学习 <strong>‘它’</strong> 的<font color="red">来历、自身特点、适合解决的问题、实际应用场景</font>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Author: haoransun&lt;br&gt;Wechat: SHR—97&lt;br&gt;&lt;font color=&quot;red&quot;&gt;学习来源：极客时间-算法之美，本人购买课程后依据图文讲解汇总成个人见解。&lt;/font&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-定义&quot;&gt;&lt;a href=&quot;#1-定义&quot; class=&quot;headerlink&quot; title=&quot;1 定义&quot;&gt;&lt;/a&gt;1 定义&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;广义上：&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;strong&gt;数据结构&lt;/strong&gt;：&lt;font color=&quot;red&quot;&gt;一组数据的存储结构&lt;/font&gt;。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;strong&gt;算法&lt;/strong&gt;：&lt;font color=&quot;red&quot;&gt;操作数据的一组方法&lt;/font&gt;。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;狭义上：&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;某些&lt;font color=&quot;red&quot;&gt;著名&lt;/font&gt;的数据结构与算法,如队列、栈、堆、二分查找、动态规划等等。&lt;/p&gt;
&lt;h1 id=&quot;2-二者关系&quot;&gt;&lt;a href=&quot;#2-二者关系&quot; class=&quot;headerlink&quot; title=&quot;2 二者关系&quot;&gt;&lt;/a&gt;2 二者关系&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;数据结构与算法相辅相成。&lt;font color=&quot;red&quot;&gt;数据结构是为算法服务的，算法要作用在特定的数据结构之上&lt;/font&gt;。因此，孤立而单独的讲解两者毫无意义。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;比如，因为数组具有随机访问的特点，常用的二分查找算法需要用数组来存储数据。但是我们选择链表这种数据结构，二分查找就无法工作了，因为链表不支持随机访问。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;数据结构是&lt;font color=&quot;red&quot;&gt;静态&lt;/font&gt;的，它只是组织数据的一种方式。如果不在它的基础上操作、构建算法，孤立存在的数据结构是没有用的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://JavaSsun.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://JavaSsun.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
